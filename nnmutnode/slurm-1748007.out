Lmod has detected the following error: The following module(s) are unknown:
"anaconda3/2020.2"

Please check the spelling or version number. Also try "module spider ..."
It is also possible your cache file is out-of-date; it may help to try:
  $ module --ignore-cache load "anaconda3/2020.2"

Also make sure that all modulefiles written in TCL start with the string
#%Module



DONE
Begin GP!

64 0.5 0.5 0.5 0.25 0.5 0.05 0.05 30 32 51
Performing connection setup for PID: 12249
Open Database Connection UUID: f53effda-a56f-4e87-b3a8-56e090faa476 PID: 12249 Ind Hash: None TimeStamp: 2020-08-22 21:11:12.993270
Before Pareto Front Retrieval | 2020-08-22 21:11:13.044206
After Pareto Front Retrieval | 2020-08-22 21:11:13.092928
No pareto front to seed
Got first generation
64 to evaluate
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:11:21.220771
After Uneval Count Query | 2020-08-22 21:11:21.235266
85 elements remaining in queue, query complete in 0.01 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:11:31.245684
After Uneval Count Query | 2020-08-22 21:11:31.709820
85 elements remaining in queue, query complete in 0.46 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:11:41.720918
After Uneval Count Query | 2020-08-22 21:11:42.036526
85 elements remaining in queue, query complete in 0.32 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:11:52.047681
After Uneval Count Query | 2020-08-22 21:11:52.363107
85 elements remaining in queue, query complete in 0.32 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:12:02.373549
After Uneval Count Query | 2020-08-22 21:12:02.892823
85 elements remaining in queue, query complete in 0.52 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:12:12.903614
After Uneval Count Query | 2020-08-22 21:12:13.378373
85 elements remaining in queue, query complete in 0.47 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:12:23.389412
After Uneval Count Query | 2020-08-22 21:12:23.728916
85 elements remaining in queue, query complete in 0.34 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:12:33.739319
After Uneval Count Query | 2020-08-22 21:12:33.760508
81 elements remaining in queue, query complete in 0.02 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:12:43.771490
After Uneval Count Query | 2020-08-22 21:12:43.776104
81 elements remaining in queue, query complete in 0.00 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:12:53.787176
After Uneval Count Query | 2020-08-22 21:12:53.867114
57 elements remaining in queue, query complete in 0.08 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:13:03.877586
After Uneval Count Query | 2020-08-22 21:13:04.174437
57 elements remaining in queue, query complete in 0.30 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:13:14.185445
After Uneval Count Query | 2020-08-22 21:13:14.453405
57 elements remaining in queue, query complete in 0.27 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:13:24.464435
After Uneval Count Query | 2020-08-22 21:13:24.892770
57 elements remaining in queue, query complete in 0.43 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:13:34.903766
After Uneval Count Query | 2020-08-22 21:13:35.208719
57 elements remaining in queue, query complete in 0.31 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:13:45.219726
After Uneval Count Query | 2020-08-22 21:13:45.748533
57 elements remaining in queue, query complete in 0.53 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:13:55.759004
After Uneval Count Query | 2020-08-22 21:13:56.641065
57 elements remaining in queue, query complete in 0.88 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:14:06.651484
After Uneval Count Query | 2020-08-22 21:14:07.104683
57 elements remaining in queue, query complete in 0.45 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:14:17.115644
After Uneval Count Query | 2020-08-22 21:14:17.533425
57 elements remaining in queue, query complete in 0.42 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:14:27.544457
After Uneval Count Query | 2020-08-22 21:14:27.841690
57 elements remaining in queue, query complete in 0.30 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:14:37.852085
After Uneval Count Query | 2020-08-22 21:14:38.160921
57 elements remaining in queue, query complete in 0.31 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:14:48.172100
After Uneval Count Query | 2020-08-22 21:14:48.540648
57 elements remaining in queue, query complete in 0.37 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:14:58.551639
After Uneval Count Query | 2020-08-22 21:14:58.945400
57 elements remaining in queue, query complete in 0.39 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:15:08.955818
After Uneval Count Query | 2020-08-22 21:15:09.205446
57 elements remaining in queue, query complete in 0.25 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:15:19.216456
After Uneval Count Query | 2020-08-22 21:15:19.559027
57 elements remaining in queue, query complete in 0.34 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:15:29.570152
After Uneval Count Query | 2020-08-22 21:15:29.984738
57 elements remaining in queue, query complete in 0.41 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:15:39.995150
After Uneval Count Query | 2020-08-22 21:15:40.346548
57 elements remaining in queue, query complete in 0.35 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:15:50.357650
After Uneval Count Query | 2020-08-22 21:15:50.712178
57 elements remaining in queue, query complete in 0.35 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:16:00.723174
After Uneval Count Query | 2020-08-22 21:16:01.122830
57 elements remaining in queue, query complete in 0.40 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:16:11.133277
After Uneval Count Query | 2020-08-22 21:16:11.401016
57 elements remaining in queue, query complete in 0.27 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:16:21.412092
After Uneval Count Query | 2020-08-22 21:16:21.786004
57 elements remaining in queue, query complete in 0.37 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:16:31.796896
After Uneval Count Query | 2020-08-22 21:16:32.047423
57 elements remaining in queue, query complete in 0.25 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:16:42.057842
After Uneval Count Query | 2020-08-22 21:16:42.284784
57 elements remaining in queue, query complete in 0.23 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:16:52.295251
After Uneval Count Query | 2020-08-22 21:16:52.609772
57 elements remaining in queue, query complete in 0.31 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:17:02.620093
After Uneval Count Query | 2020-08-22 21:17:02.762754
48 elements remaining in queue, query complete in 0.14 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:17:12.773729
After Uneval Count Query | 2020-08-22 21:17:12.778432
48 elements remaining in queue, query complete in 0.00 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:17:22.788845
After Uneval Count Query | 2020-08-22 21:17:22.793094
43 elements remaining in queue, query complete in 0.00 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:17:32.804142
After Uneval Count Query | 2020-08-22 21:17:33.348061
34 elements remaining in queue, query complete in 0.54 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:17:43.359096
After Uneval Count Query | 2020-08-22 21:17:43.364049
34 elements remaining in queue, query complete in 0.01 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:17:53.374456
After Uneval Count Query | 2020-08-22 21:17:53.379281
34 elements remaining in queue, query complete in 0.00 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:18:03.390280
After Uneval Count Query | 2020-08-22 21:18:03.395140
34 elements remaining in queue, query complete in 0.00 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:18:13.406133
After Uneval Count Query | 2020-08-22 21:18:13.410684
34 elements remaining in queue, query complete in 0.00 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:18:23.421121
After Uneval Count Query | 2020-08-22 21:18:23.426126
33 elements remaining in queue, query complete in 0.01 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:18:33.437111
After Uneval Count Query | 2020-08-22 21:18:33.441479
33 elements remaining in queue, query complete in 0.00 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:18:43.452441
After Uneval Count Query | 2020-08-22 21:18:43.457359
33 elements remaining in queue, query complete in 0.01 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:18:53.467773
After Uneval Count Query | 2020-08-22 21:18:53.471937
33 elements remaining in queue, query complete in 0.00 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:19:03.475853
After Uneval Count Query | 2020-08-22 21:19:03.480222
33 elements remaining in queue, query complete in 0.00 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:19:13.491167
After Uneval Count Query | 2020-08-22 21:19:13.494445
33 elements remaining in queue, query complete in 0.00 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:19:23.504827
After Uneval Count Query | 2020-08-22 21:19:23.509401
33 elements remaining in queue, query complete in 0.00 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:19:33.519860
After Uneval Count Query | 2020-08-22 21:19:33.628263
31 elements remaining in queue, query complete in 0.11 seconds
Good night
Good morning
Starting Gen 0
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:19:43.639293
After Uneval Count Query | 2020-08-22 21:19:43.643535
22 elements remaining in queue, query complete in 0.00 seconds
Updating population
Passed parents update
Before Recent Evaluated Query | 2020-08-22 21:19:43.643696
After Recent Evaluated Query | 2020-08-22 21:19:43.687057
TimeStamp | 2020-08-22 21:19:43.687503
Received: SpectralClustering(StandardNorm(ARG0, TriState.STREAM_TO_STREAM, passAxis(passAxis(passAxis(Axis.AXIS_0)))), lessThan(myFloatIntAdd(myFloatIntDiv(myFloatSub(0.1, 0.1), passInt(10)), notEqual(-2.4033966752898586, 0.01)), myFloatSub(0.01, myIntToFloat(lessThanOrEqual(10.0, 100.0)))), 0.1)
	With Hash 0693201780a7708e679ea3a082313311559c28f5d3c94a33f0a43b2a98b45100
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.687845
Received: DBSCANClustering(Cv2NotEqual(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_0), myFloatIntSub(0.1, 78), myFloatIntAdd(4.597384690743992, 50))
	With Hash 072988bf9bfb863242b624ac6736c62dd3708f14076c0c282b54b56c8e14abed
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.688041
Received: CreateBBox(LowpassFilterEllipsoid(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 50), WindowHamming(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, falseBool), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_2), myNot(falseBool))
	With Hash 08737565aa8eb6c8bf35820532f9b38722a3e66b1d0a033ca03f197a3531d9d3
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.688223
Received: ScalarAdd(SEPObjectDetection(ScalarDivide(mySelFwe(WindowBartlett(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), myFloatToInt(100.0), myFloatMult(0.01, 0.1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatIntSub(myFloatDiv(100.0, 10.0), myAnd(trueBool, trueBool))), myIntAdd(lessThanOrEqual(myFloatSub(0.1, 1.0), myFloatSub(100.0, 1.0)), equal(passFloat(4.707413748836608), myFloatDiv(1.0, -0.7775053560257277))), myFloatIntSub(myIntToFloat(ifThenElseBool(trueBool, trueBool, trueBool)), myFloatToInt(myFloatIntAdd(0.01, 6))), myFloatDiv(myFloatIntAdd(myFloatIntMult(0.1, 32), myIntSub(5, 77)), myFloatSub(passFloat(0.01), myIntToFloat(8)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myFloatMult(ifThenElseFloat(ifThenElseBool(lessThan(0.01, 100.0), myNot(falseBool), greaterThanEqual(0.01, 3.400231775276932)), myFloatAdd(myFloatIntSub(1.0, 64), myFloatSub(100.0, 10.0)), myFloatIntAdd(myFloatIntMult(2.8064767778458126, 64), myIntAdd(2, 10))), myFloatIntMult(passFloat(myFloatAdd(0.01, 10.0)), myIntAdd(myFloatToInt(100.0), myIntDiv(1, 6)))))
	With Hash 09721f15cc1cc11ea7f0e56c3cf053300e04f62a66e39ccb1e577ec5888f2afc
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.688742
Received: WindowTriangular(MorphDilateRect(MorphGradientCross(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 2, 0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myIntAdd(6579, 10), myOr(falseBool, trueBool), passInt(3)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)))
	With Hash 0b7931c1a59f7b9b8bf44e4516bd1d90338fd60b2863c186a95fde9eadc57f0b
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.688936
Received: Cv2Min(ContoursAll(Cv2DCT(HighpassFourierUniform(DogDetection(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 100.0, 0.7245293173604006, 100.0, 100.0, 1.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), myAnd(falseBool, falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL))), TriState.FEATURES_TO_FEATURES, passAxis(passAxis(passAxis(Axis.AXIS_1)))), myPCA(MorphErosionEllipse(Prerejection(ARG0, passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passBool(trueBool), greaterThan(10.0, 1.0), passFloat(1.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myNot(ifThenElseBool(falseBool, falseBool, trueBool)), myAnd(notEqual(2.483547608190869, 0.422436862800617), trueBool), 150), passTriState(TriState.FEATURES_TO_FEATURES), greaterThanEqual(myIntToFloat(100), myFloatMult(myFloatSub(10.0, 0.01), ifThenElseFloat(trueBool, 0.1, 0.01))), equal(ifThenElseFloat(notEqual(100.0, 10.0), 10.0, myFloatIntDiv(1.0, 3)), myIntToFloat(9))), passTriState(TriState.STREAM_TO_STREAM), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))))
	With Hash 0e75dcc516f30c69e299ad2c7ad4f8164b1314c312d748256284b59690dec0cc
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.689439
Received: MySnapshot(ContourMaskConvex(Cv2Divide(Sine(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), Cv2Max(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), myNot(greaterThanEqual(100.0, 100.0))), EmadeDataAddInt(WienerFilter(ThresholdToZeroPixelFloat(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), lessThanOrEqual(myFloatIntSub(0.01, 128), passFloat(0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), passAxis(passAxis(passAxis(Axis.AXIS_2))), notEqual(ifThenElseFloat(ifThenElseBool(falseBool, trueBool, falseBool), passFloat(2.9900549360085655), ifThenElseFloat(trueBool, 0.01, -4.268745342159392)), myFloatIntDiv(myIntToFloat(255), myIntAdd(4, 128))))
	With Hash 10b2115c21225791f5f92637a890bf75f0924cb3992bf8e83a1b1f42b979e903
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.689896
Received: RegionalMaxima(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 10.0)
	With Hash 126904288d069a26c98011520b0735753326e91f1af29c2bd6b23a8c1470ef3f
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.690025
Received: MyDiff(CutDataLead(Cv2Sqrt(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passBool(trueBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)))
	With Hash 12865b66a041d1553458aac9f917071a5db4ca3e49a222a6c18d0eb9ea1842c9
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.690185
Received: NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(93, ARG0, randomUniformWeights, InputLayer(ARG0))), 100)
	With Hash 138bce9aac71129d4f785d54f4a3a7d161a607c23018300e6deba679adc2d2dd
	With Fitnesses: (0.04506511846853911, 744001.0)
	With Age: 1.0
TimeStamp | 2020-08-22 21:19:43.690335
Received: MatchedFiltering(ContourMask(HighpassFourierEllipsoid(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, trueBool), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myIntAdd(ifThenElseBool(falseBool, trueBool, trueBool), myIntAdd(255, 0)))
	With Hash 13d931dac480b7029c46ea3fd0e0fbc9be57aafa55b9943e0d97ffdce8b7fb44
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.690520
Received: MorphOpenCross(EqualizeDisk(EmadeDataIntegerDivide(HighpassUnsharpMask(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 2, 4, 32), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), ifThenElseFloat(falseBool, 0.01, 10.0)), TriState.STREAM_TO_STREAM, passAxis(passAxis(Axis.AXIS_2)), -3), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL))), myOr(myNot(trueBool), lessThan(myFloatSub(10.0, 1.0), passFloat(10.0))), passBool(greaterThan(myFloatDiv(1.0, 1.2137787611428665), myFloatIntSub(3.854469707383876, 9))))
	With Hash 1430bbbe8107c3da507f83b5032f01c1a9d9d58e6de09410ebe52d8eb00d23bd
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.690828
Received: LinearPredictiveCoding(AdjustConstrastGamma(SelectRange(MorphBlackhatRect(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 5, 5), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), ifThenElseBool(falseBool, falseBool, trueBool), myIntAdd(50, 7)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(Axis.AXIS_2), ifThenElseFloat(myNot(trueBool), myFloatIntAdd(0.1, 1), myFloatMult(1.8889586660344424, 10.0)), myFloatDiv(myFloatMult(0.1, 10.0), myFloatIntMult(1.0, 255))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myIntDiv(lessThan(myFloatMult(1.0, 10.0), myFloatIntSub(0.01, 8)), myIntMult(passBool(trueBool), myOr(falseBool, falseBool))))
	With Hash 14956589a226593021bb026a9456b670cd66ae6c1f8e0f63c8e8fc391c122e3c
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.691176
Received: KalmanFilter(EqualizeHist(Rebase(LocalPoolingMax(MorphBlackhatRect(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 4, 64), TriState.FEATURES_TO_FEATURES, passAxis(Axis.AXIS_1), ifThenElseBool(trueBool, falseBool, falseBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), Axis.AXIS_1), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), passFloat(passFloat(passFloat(myFloatIntSub(10.0, 5469)))), myFloatMult(myFloatMult(ifThenElseFloat(notEqual(100.0, 0.1), myIntToFloat(64), myFloatIntMult(1.0, falseBool)), passFloat(ifThenElseFloat(trueBool, 100.0, 4.2866232571471645))), myFloatIntSub(myIntToFloat(notEqual(1.9701394954076603, 1.0)), 55)))
	With Hash 1dcdd0ce492822d3e4207113cc68f45f5b21278d253468a86f0d3fc4ac5f33c9
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.691521
Received: NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(99, ARG0, randomUniformWeights, InputLayer(ARG0))), 100)
	With Hash 2512556b6aac04bf4d8b630dda9ef36ed8de686597650fa1d4dfbde74c015932
	With Fitnesses: (0.04446885297348191, 792001.0)
	With Age: 1.0
TimeStamp | 2020-08-22 21:19:43.691648
Received: EqualizeDisk(SEPObjectDetection(GetCentroids(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passBool(trueBool), myFloatAdd(0.1, 0.01), myFloatSub(10.0, 10.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myFloatToInt(myFloatSub(10.0, 1.0)))
	With Hash 25eea966f165b97f410167c080e3053df27bc77a12f8bb2e05d0bb223653e204
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.691826
Received: ContourMaskMinArea(ARG0, passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), myFloatSub(myFloatDiv(0.1, 3.318901895439245), myFloatAdd(1.0, 0.1)))
	With Hash 2991ca15595c5152d71bc4d5b29da0cfd33e3b4378bc8da8341b5f17dbe8b2c1
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.691993
Received: MaxLoc(BitwiseAnd(ContourMaskRangeLength(Round(StdDeviation(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 9), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), Axis.AXIS_0, equal(passFloat(10.0), myFloatDiv(0.01, 0.2274954885701046)), passBool(ifThenElseBool(falseBool, trueBool, falseBool))), ThresholdBinary(MyCumSum(LocalPoolingMax(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 6), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), 7), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), 100.0, myOr(greaterThanEqual(-4.171750319883218, 0.01), notEqual(10.0, 1.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), passAxis(passAxis(passAxis(Axis.AXIS_0)))), TriState.FEATURES_TO_FEATURES, passAxis(passAxis(passAxis(passAxis(Axis.FULL)))))
	With Hash 2b8c06ac03a62fe975b7a11559bffd3aeaff2a2ed48ca654d54abc0b3033a2a6
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.692348
Received: LinearPredictiveCoding(ContourMaskRangeEnclosingCircle(WienerFilter(EmadeDataSubtractInt(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 150), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), lessThanOrEqual(myFloatIntDiv(10.0, 0), myFloatSub(1.0, 0.1)), myNot(passBool(falseBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myIntSub(myIntMult(ifThenElseBool(trueBool, falseBool, trueBool), myIntMult(7, -7)), myIntMult(myAnd(trueBool, falseBool), lessThan(100.0, 1.1740340576743877))))
	With Hash 2cea7f9a3ca35d8d176047a4e7f09b7b00d73ecabd1d7a90283b65d6b8154989
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.692610
Received: SepDetectionWindow(ARG0, 100, 2, 0.1)
	With Hash 3a6e9b30021f1711c11fd5d8e85aec970260184d9a1f3d66011b47f972ee0a11
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.692703
Received: TfidfVectorizer(ContoursConvexConcave(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, trueBool), greaterThan(-1.6930484173848095, 0.1), myIntAdd(61, 128), ifThenElseBool(trueBool, trueBool, falseBool), notEqual(100.0, 0.01))
	With Hash 3d465d2d646c9aa45cdfee9b74730c3b70e8e51901c6ed8acadc8d12c5155371
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.692850
Received: RandomNormal(HighpassFourierShift(Cv2TemplateMatching(EdgeDetectionCanny(NumNamedEntities(ARG0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), notEqual(100.0, 0.1), myOr(trueBool, trueBool), greaterThanEqual(0.01, 0.655345905959468)), ifThenElseBool(ifThenElseBool(trueBool, trueBool, trueBool), lessThan(0.1, 1.0), greaterThan(0.01, 0.1)), greaterThanEqual(myFloatAdd(0.1, 1.0), myFloatMult(10.0, 1.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myIntSub(myOr(notEqual(-4.806114631559221, -0.6688009570321087), passBool(trueBool)), ifThenElseBool(myAnd(trueBool, falseBool), greaterThan(0.1, 0.1), lessThanOrEqual(0.01, 100.0)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myOr(equal(myFloatDiv(myFloatMult(0.1, 1.0), myIntToFloat(128)), ifThenElseFloat(lessThanOrEqual(100.0, 0.01), myFloatIntAdd(3.0017359330657065, falseBool), myFloatDiv(100.0, 0.1))), lessThan(myFloatIntDiv(passFloat(0.1), ifThenElseBool(falseBool, falseBool, trueBool)), myFloatIntMult(passFloat(10.0), myAnd(falseBool, falseBool)))), myNot(equal(myFloatSub(ifThenElseFloat(falseBool, -1.6858447345013938, 1.0), myFloatMult(0.01, 0.01)), myFloatAdd(myFloatIntSub(100.0, 5), myFloatAdd(100.0, 100.0)))))
	With Hash 41a416dc5a21ce63382b4670cf359f59112102c8f15cc8f23cc83d5056adcafc
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.693350
Received: NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 91)
	With Hash 4376795a5a254724d947d0454392ea19d1725e1f1e22cd6f095d2430e2542cea
	With Fitnesses: (0.04490820649615568, 800001.0)
	With Age: 1.0
TimeStamp | 2020-08-22 21:19:43.693469
Received: BitwiseOr(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, Axis.FULL)
	With Hash 483c7e0e54e0fcbbccf9f57bb3d6a569d8db72087bac078fd888f640e307d3f7
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.693574
Received: WienerFilter(MorphDilateEllipse(KalmanFilter(PeakFinder(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 100.0, 10), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), ifThenElseFloat(trueBool, 100.0, 10.0), myFloatDiv(100.0, 100.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), ifThenElseBool(greaterThan(100.0, 1.0), myNot(falseBool), myNot(falseBool)), myIntSub(myIntMult(128, 6), myAnd(trueBool, falseBool)), myOr(greaterThan(100.0, 1.0), ifThenElseBool(falseBool, falseBool, falseBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))))
	With Hash 489887f3621624ba7711782d44453b4d9e7d61551574b26af24adcfa87455970
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.693875
Received: ThresholdNLargestBinary(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 46)
	With Hash 497c268379b98b52b929970acc74b9e8a2cd31a220486c9474eead644545a0cf
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.693993
Received: ThresholdNLargestBinary(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 55)
	With Hash 4f3195e107b35de1214c40be15380e4991d0de1602167d7b2974b464888899a4
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.694090
Received: MyCumSum(ARG0, passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), lessThan(myFloatSub(myIntToFloat(notEqual(0.01, 0.01)), myIntToFloat(myIntMult(10, 7))), myFloatDiv(myFloatMult(-4.271518007828476, myFloatSub(10.0, 0.1)), myFloatIntMult(myFloatIntSub(-2.3830347558036244, falseBool), myOr(trueBool, trueBool)))))
	With Hash 555d8b63d9ce9b7214bb5c397331b94fee95b00078df9491ab6b3dc5bebc9768
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.694292
Received: NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 93)
	With Hash 55dc7e5795e1ae567db6fecc18a6a718bfa17f91a36c2e9aaf96bd57dfd0d3aa
	With Fitnesses: (0.04471991212929549, 800001.0)
	With Age: 1.0
TimeStamp | 2020-08-22 21:19:43.694407
Received: ThresholdToZeroFloat(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 0.8206458690020755)
	With Hash 5604c375c8ccc2379e1fac723ca64d267e2179f0bfc7d493c2c268507bd9cd56
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.694506
Received: ContourMaskMaxSolidity(WindowTurkey(MatchedFiltering(SavitzkyGolayFilter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 87, 5, 2), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myAnd(falseBool, trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myFloatMult(myFloatAdd(-0.35649298395985163, 1.0), myIntToFloat(4))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myFloatMult(myFloatIntMult(ifThenElseFloat(falseBool, -3.2065381108254987, 1.0), myOr(falseBool, trueBool)), passFloat(myFloatIntMult(0.01, 128))))
	With Hash 57960d2bf383faee9ac330f4a6824184044fef559d9f51b6eb37e3fee730bd37
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.694760
Received: ScalarMax(MorphErosionEllipse(ArcSine(MyNorm(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 12), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myIntAdd(myIntDiv(9, 7), myIntDiv(64, 64)), myFloatToInt(myFloatSub(0.1, 1.0)), myIntDiv(myNot(falseBool), lessThan(10.0, 100.0))), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(passAxis(Axis.AXIS_1))), equal(myFloatDiv(10.0, myFloatIntSub(0.01, 3)), myFloatSub(myFloatMult(1.0, 0.01), myFloatAdd(10.0, 2.8038385610904095))))
	With Hash 579ea7cc680bfc6ae99c88fbbd8f9a1e2dea36c251fe6a85dea04be5f8232309
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.695047
Received: ContourMaskRangeExtentEnclosingCircle(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 3, 8)
	With Hash 590b3d3a796c47b9f7b11f2277107999ce7afeda41f5ecfcd1718e9d316bdb1f
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.695146
Received: NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 95)
	With Hash 5b4125bef33d66cd47741754dd929438ae170fe3ce2bc710756e786888187f78
	With Fitnesses: (0.046006590302840156, 800001.0)
	With Age: 1.0
TimeStamp | 2020-08-22 21:19:43.695262
Received: Daisy(Cv2AbsDiff(Round(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1), Prerejection(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 150, 3, 0.01), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThan(myFloatIntDiv(0.1, 95), myFloatIntMult(100.0, 1)), lessThanOrEqual(myFloatIntMult(-4.863904585918977, 13), myFloatIntSub(0.1, 4)), myNot(myNot(falseBool)), myOr(ifThenElseBool(trueBool, falseBool, falseBool), greaterThan(0.1, 1.0)), myIntSub(myFloatToInt(0.01), myFloatToInt(10.0)))
	With Hash 5cc2de0245aa492eaaf3de4c11c1aa38b1b6ab3ae67d68b4386a10758c9526cf
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.695542
Received: ContourMaskMinExtent(EmadeDataNumpyMultiplyFloat(ThresholdToZeroFloat(EmadeDataAddFloat(LowpassFilterUniform(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 0), TriState.FEATURES_TO_FEATURES, passAxis(Axis.FULL), myFloatDiv(1.0, 1.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), myFloatMult(myFloatAdd(-1.290955640033229, 10.0), 0.1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatDiv(10.0, myFloatSub(myFloatDiv(0.01, 0.01), passFloat(1.0)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), falseBool)
	With Hash 5df9d92ad6ab8007c8b739bfa07c91d5d330e3778fa9d15682002052c8b22b1f
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.695803
Received: FractionDouble(ARG0, KalmanFilter(AbsDiff(ARG0, ContoursMinArea(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 9), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatDiv(myIntToFloat(4), myFloatDiv(-1.2860892075522354, 0.01)), ifThenElseFloat(greaterThan(100.0, 100.0), myFloatAdd(100.0, 10.0), myFloatIntDiv(10.0, 150))), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(Axis.AXIS_1), passAxis(passAxis(passAxis(Axis.AXIS_1))), lessThanOrEqual(myFloatIntAdd(0.1, myOr(trueBool, falseBool)), passFloat(myFloatIntAdd(100.0, falseBool))))
	With Hash 5e1f6a1c09cbdcab9562e15f1fccc2af9cc22b6076213b73f3d4548c7ce39d09
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.696113
Received: LowpassFilterAverage(Cv2DFTReal(HighpassFourierShift(HighpassUnsharpMask(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 1, 150, 8), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), notEqual(0.01, 0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myIntDiv(myIntDiv(myIntSub(128, 0), ifThenElseBool(falseBool, falseBool, trueBool)), myIntMult(equal(1.0, 0.01), notEqual(10.0, 10.0))))
	With Hash 6318cdcdb5bbaa06ca7eca8460239e83b05afda310b23aeaf1d2cd8a6f3065c1
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.696354
Received: SVCMulti(ARG0)
	With Hash 648a3973d6585986482d65feb0fc12ed54a29df856626f34ead937092fdcf663
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.696434
Received: ThresholdBinaryInverse(RandomUniform(WindowGaussian(Cv2Sqrt(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatIntSub(10.0, 10)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myIntDiv(myIntMult(trueBool, trueBool), equal(10.0, 0.01)), equal(myFloatMult(0.1, 0.01), myFloatIntDiv(1.0, 8))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myFloatSub(myFloatSub(myFloatDiv(0.7218485454438, 1.0), myFloatAdd(-3.131190716300516, 10.0)), myFloatDiv(myFloatSub(1.0, 10.0), passFloat(0.01))))
	With Hash 653891accb0e3c933a43819c1bea9f0bebd0f0bbd37ae649a5fdd525e6aa582e
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.696743
Received: StdDeviationHoleCustom(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.AXIS_2, 1, 128)
	With Hash 65b454cb979190dc3fbff55b6b3f9b496ea22032ea3e8eba76542987b953172e
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.696860
Received: ThresholdBinaryInverseMask(ifThenElseDataPair(equal(10.0, 10.0), EmadeDataNumpyMultiplyPair(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.FULL, Axis.AXIS_2), LowpassFilterUniform(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, trueBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), ifThenElseFloat(ifThenElseBool(falseBool, trueBool, trueBool), myFloatMult(0.1, 0.01), myFloatIntMult(-3.2750096983702024, 65)))
	With Hash 67a78ba72d5c58fe905ab67bcc7d061255f0305d41ca495ad18c6ad4b7ad26a4
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.697078
Received: Select3D(Fraction(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 55), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), passInt(9), myIntMult(-2, -4), passInt(6), lessThan(10.0, 0.1), myFloatToInt(1.0), greaterThanEqual(0.1, 1.8083601746166629))
	With Hash 6a82b60f5f32e3bea5122e1c9da1b824ff2a83514c516978cbd92c1f8a87e410
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.697245
Received: NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 100)
	With Hash 6fc699da33bfb8f3aedc606b67f0be14249c8f3dc796096b248b69740cbc6a08
	With Fitnesses: (0.044437470579005156, 800001.0)
	With Age: 1.0
TimeStamp | 2020-08-22 21:19:43.697360
Received: NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(92, ARG0, randomUniformWeights, InputLayer(ARG0))), 100)
	With Hash 71348f71a8fd8e00bf13e4031813170879815c4ff57d5c9ba58722abeebb3e5a
	With Fitnesses: (0.04515926565196926, 736001.0)
	With Age: 1.0
TimeStamp | 2020-08-22 21:19:43.697471
Received: EmadeDataIntegerDividePair(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.FULL, Axis.AXIS_1)
	With Hash 728f7c8d927e652cc014c842be160c69ea8f8c0ed5327f4d7c6326db53ff8516
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.697573
Received: ContourMaskMaxLength(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 0.1)
	With Hash 73f0da5e60b737fef620fce64b8bd5e7ab22af763de687a95d15ebbccfc8883b
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.697667
Received: EmadeDataNumpyMultiplyPair(ARG0, AdjustConstrastLog(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 0.01), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_1))
	With Hash 7dd7d9796704a32399526f16c83bef09aa6d697da0a51942b7167809bbb165c0
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.697796
Received: EmadeDataDivideInt(ContoursMinLength(ThresholdBinaryInverseMask(mySelGenUni(ContourMaskMaxArea(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 1.0), passTriState(TriState.FEATURES_TO_FEATURES), notEqual(1.0, -1.1809009856472263), lessThanOrEqual(0.1, 10.0), ifThenElseFloat(trueBool, 0.1, 0.1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), ifThenElseFloat(equal(100.0, 0.1), myFloatIntSub(100.0, 0), passFloat(0.1))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myIntSub(passInt(myIntAdd(9447, 6)), myAnd(lessThanOrEqual(100.0, 100.0), greaterThan(0.01, 1.0)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), lessThan(myIntToFloat(lessThanOrEqual(myIntToFloat(4), myFloatDiv(0.1, 0.1))), myIntToFloat(passInt(greaterThanEqual(1.0, -0.952573118188651)))))
	With Hash 82d5e2a7636066286b19b3a1ecc83ce92a775cc0a7eb1e9d91bdb458ad6f45a0
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.698164
Received: NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 94)
	With Hash 9048b19a826299d7fdabdac4aedc95388a40ddf325e0fa04ed5546cc3facd293
	With Fitnesses: (0.044437470579005156, 800001.0)
	With Age: 1.0
TimeStamp | 2020-08-22 21:19:43.698280
Received: EmadeDataSubtractFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 0.1)
	With Hash a77ae9ad94f9b12345d813b7031ad0ed60becc19043e36ddcdcd667f37699344
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.698378
Received: ImageAlignmentECC(KalmanFilter(MyDCT(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, trueBool, 2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatIntMult(0.1, 10), myFloatIntSub(1.0, 255)), MyAverager(EmadeDataSubtractFloat(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 100.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), greaterThan(3.401422068898336, -4.062248093417838)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_1)), passInt(notEqual(100.0, 0.1)), passFloat(10.0), notEqual(passFloat(1.0), myFloatIntAdd(100.0, 5)), passInt(myFloatToInt(10.0)))
	With Hash ab7e28618224f9b77b0c69c2d643a9fe2f60f744be987fd10b6af87cbff635dc
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.698658
Received: WindowNuttal(mySelKBest(ARG0, TriState.FEATURES_TO_FEATURES, 74, 0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0))
	With Hash aea8744c95edb34b2f6b646533f2e95fd4062504d1ad98a5442bff099882cb3b
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.698769
Received: FFT(MorphDilateEllipse(EmadeDataMultiplyFloat(RandomNormal(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 128, 7), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatIntDiv(100.0, 55)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myOr(ifThenElseBool(falseBool, trueBool, trueBool), ifThenElseBool(falseBool, falseBool, falseBool)), myNot(equal(0.1, 4.626238182777421)), passBool(myNot(falseBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_0))))
	With Hash b3a2ca897e0bbf5a1807d4fbd32e021231697c88a394beff01054c93e26f2ecd
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.699021
Received: BitwiseNOT(EmadeDataMultiplyPair(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0))
	With Hash bfe719043320d8e22414e17e6b30e5898092fdf258b503d9c1a441b504c369c3
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.699144
Received: NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(97, ARG0, randomUniformWeights, InputLayer(ARG0))), 100)
	With Hash ce9a5c870b097d6fd6d1a0c49eae1ddad13823487145a6aba4be82828b9822c0
	With Fitnesses: (0.04515926565196926, 776001.0)
	With Age: 1.0
TimeStamp | 2020-08-22 21:19:43.699255
Received: NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(95, ARG0, randomUniformWeights, InputLayer(ARG0))), 100)
	With Hash d065103c93798a23bc47450b45a86195345b9f32855755d3b743cdcb5fa27af6
	With Fitnesses: (0.04550447199121288, 760001.0)
	With Age: 1.0
TimeStamp | 2020-08-22 21:19:43.699362
Received: Tfisf(NumNamedEntities(StdDeviationHoleCustom(mySelFwe(ARG0, TriState.STREAM_TO_FEATURES, 8, 1.0), EmadeDataAddPairTriple(ARG0, ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.AXIS_1, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_1), passInt(falseBool), myIntSub(7, 4))), lessThanOrEqual(ifThenElseFloat(greaterThanEqual(0.1, 1.0), myIntToFloat(50), myFloatMult(0.01, 10.0)), myFloatIntSub(ifThenElseFloat(falseBool, 0.01, 0.01), equal(0.01, 10.0))), ifThenElseBool(lessThanOrEqual(myFloatMult(0.1, 10.0), myFloatDiv(1.0, -2.752141980396087)), lessThan(passFloat(10.0), myFloatAdd(1.0, 100.0)), equal(myFloatIntAdd(10.0, 128), myFloatMult(0.01, 100.0))), passInt(myAnd(myOr(trueBool, trueBool), passBool(falseBool))), greaterThanEqual(myFloatAdd(myFloatIntAdd(100.0, 7), myFloatSub(100.0, 100.0)), myFloatIntAdd(myFloatDiv(1.0, 10.0), myOr(trueBool, falseBool))))
	With Hash d15075a91828d2b3487f1b9619f1fda9fd4085b6c201cacc1ce9a22a478f46cc
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.699789
Received: GradientMagnitude(agglomerative_clustering(LowpassFilterUniform(Sine(MatchedFiltering2D(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 100, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), lessThan(myFloatMult(-1.597816002836654, 100.0), myFloatIntDiv(0.1, 3))), passInt(myIntAdd(notEqual(1.0, 0.01), greaterThan(100.0, 100.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), lessThan(myFloatIntMult(myFloatAdd(passFloat(100.0), myFloatDiv(0.1, 1.0)), myFloatToInt(myFloatAdd(0.1, 100.0))), myFloatAdd(myFloatIntMult(myFloatIntSub(0.01, 5), notEqual(0.01, 0.1)), myFloatIntDiv(myFloatMult(100.0, 10.0), myFloatToInt(0.9952902216527812)))))
	With Hash df83bc130c12ac8a933295e4b1dca98b7884f0f46fa665e56a2d03fc1ffa0a8e
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.700141
Received: MorphBlackhatEllipse(WindowLanczos(CopyStreamToTarget(GetCentroids(WindowNuttal(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.STREAM_TO_STREAM), Axis.AXIS_0)), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), myIntMult(4, ifThenElseBool(myOr(equal(10.0, 0.1), ifThenElseBool(trueBool, trueBool, trueBool)), myAnd(lessThanOrEqual(10.0, 100.0), ifThenElseBool(falseBool, trueBool, falseBool)), myOr(ifThenElseBool(trueBool, trueBool, falseBool), falseBool))), equal(-1.7789343059738059, 10.0))
	With Hash e07b3c9f8b95f4977ec8eaf3617785a3b29d272363dad9f6f3ea63ff81c0f2dd
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.700419
Received: InRange(StdDeviationHole(MyProd(BitwiseAnd(SVCMulti(ARG0), ARG0, passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), passBool(greaterThan(ifThenElseFloat(trueBool, 0.01, 100.0), myFloatSub(100.0, 0.1))), 150), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), ifThenElseBool(lessThan(myFloatIntAdd(myFloatIntSub(1.0, 0), equal(1.0, 0.1)), 100.0), lessThanOrEqual(myFloatIntMult(myFloatIntMult(1.0, 255), myAnd(trueBool, trueBool)), myFloatIntAdd(myFloatIntAdd(100.0, 83), myIntSub(10, 1817))), trueBool), passInt(myIntAdd(myOr(notEqual(1.0, 0.01), notEqual(0.01, 100.0)), equal(myFloatMult(0.1, -0.1908841944749975), myFloatIntDiv(-1.364853875303662, 4255)))))
	With Hash f8d0e120ca9434626acdfa9d4ccd223c6c6bcd49d8a23413a3441b7ab2f1ab5b
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:19:43.700809
Received: NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(98, ARG0, randomUniformWeights, InputLayer(ARG0))), 100)
	With Hash fa5c828c0d6e66cf264c794af787a3da7c36cfa165cdf07de72582ef08379394
	With Fitnesses: (0.046571473403420716, 784001.0)
	With Age: 1.0
TimeStamp | 2020-08-22 21:19:43.700927
Received: Cv2LessThanOrEqual(MorphTophatEllipse(Select3D(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 9, 0, 255, falseBool, 100, 55), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), greaterThanEqual(1.0, 0.1), myAnd(trueBool, falseBool)), EmadeDataAddPair(ContourMaskConvex(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, trueBool), HashingVectorizer(ARG0, falseBool, 5, 7, 55), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.FULL)))
	With Hash ffe81f38aef3e8bd1e21f0e0b201f448b8128c1303cc5ce1876d5d4edb5e1132
	With Fitnesses: (inf, inf)
	With Age: 0
Elite Pool has: 0 individuals, and 0 are unique
evaluated offspring has: 63 individuals, and 63 are unique
Gene Pool has: 63 individuals, and 63 are unique
Sanity check after removal of redundant individuals
Elite Pool has: 0 individuals, and 0 are unique
evaluated offspring has: 63 individuals, and 63 are unique
Gene Pool has: 63 individuals, and 63 are unique
Before History Addition | 2020-08-22 21:19:44.010765
After History Addition | 2020-08-22 21:19:46.945639
11 FullDataSet individuals
Gene pool assembled
After adjust for data set 63 out of 63 are unique
After select nsga2 63 out of 63 are unique
NSGAII Completed
11 FullDataSet individuals
63 total individuals
Before Uneval Count Query | 2020-08-22 21:19:50.869441
After Uneval Count Query | 2020-08-22 21:19:50.874197
63 individuals evaluated thus far
Right before binary tournament 63 out of 63 are unique
Parents Selected 32 from 63
26 out of 32 are unique
[0.9157608695651807, 0.8722826086956188, inf, inf, inf, 1.0, inf, inf, inf, inf, inf, inf, inf, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Updating Pareto Front
Pareto Front Updated
Before Pareto Front Addition | 2020-08-22 21:19:51.067102
After Pareto Front Addition | 2020-08-22 21:19:51.203177
Pareto Front Updated
(0.044437470579005156, 800001.0)
(0.04446885297348191, 792001.0)
(0.04506511846853911, 744001.0)
(0.04515926565196926, 736001.0)
Hypervolume:  45140801.708739996
Pareto Individual 0 after gen 0 is NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 100)(0.044437470579005156, 800001.0) Age 1.0
Pareto Individual 1 after gen 0 is NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(99, ARG0, randomUniformWeights, InputLayer(ARG0))), 100)(0.04446885297348191, 792001.0) Age 1.0
Pareto Individual 2 after gen 0 is NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(93, ARG0, randomUniformWeights, InputLayer(ARG0))), 100)(0.04506511846853911, 744001.0) Age 1.0
Pareto Individual 3 after gen 0 is NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(92, ARG0, randomUniformWeights, InputLayer(ARG0))), 100)(0.04515926565196926, 736001.0) Age 1.0
Updated Elite Pool
Finished Calculating Statistics
Starting Gen 1
Producing offspring
After cloning from parents 26 out of 32 are unique
Additionally 32 individuals are unique in memory
And 92 mains and adfs are unique
Mating offspring
Mated 74 individuals
Mating offspring Ephemerals
Mated 64 individuals ephermerals
Mating offspring headless chicken
Mated 16 individuals
Mating offspring Ephemerals headless chicken
Mated 38 individuals ephermerals
Mutating offspring (Node Replace)
Mutated 118 individuals
Heal Offspring
[<deap.gp.Terminal object at 0x7f46a6ad0120>]
[<deap.gp.Primitive object at 0x7f46a6a54048>, <deap.gp.Primitive object at 0x7f46a6a59318>, <deap.gp.Primitive object at 0x7f46a6a675e8>, <deap.gp.Primitive object at 0x7f46a6a55bd8>, <deap.gp.Primitive object at 0x7f46a6a59e58>, <deap.gp.Terminal object at 0x7f46a6ad0120>, <deap.gp.TriStateGen object at 0x7f469f12b780>, <deap.gp.AxisGen object at 0x7f469f12b7d8>, <deap.gp.myGenFloat object at 0x7f469f12b830>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.TriStateGen object at 0x7f469f12b888>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.AxisGen object at 0x7f469f12b8e0>, <deap.gp.Primitive object at 0x7f46a6ace8b8>, <deap.gp.Terminal object at 0x7f46a6a6a0d8>, <deap.gp.myGenFloat object at 0x7f469f12b938>, <deap.gp.Primitive object at 0x7f46a6a64cc8>, <deap.gp.Terminal object at 0x7f46a6a6a168>, <deap.gp.myGenFloat object at 0x7f469f12b990>, <deap.gp.Primitive object at 0x7f46a6a67688>, <deap.gp.Primitive object at 0x7f46a6a66228>, <deap.gp.Terminal object at 0x7f46a6a6a1b0>, <deap.gp.Terminal object at 0x7f46a6a6a0d8>, <deap.gp.Primitive object at 0x7f46a6a66f98>, <deap.gp.Terminal object at 0x7f46a6a6a5e8>, <deap.gp.Terminal object at 0x7f46a6a6a558>, <deap.gp.Primitive object at 0x7f46a6a67188>, <deap.gp.Terminal object at 0x7f46a6a6a3f0>, <deap.gp.Terminal object at 0x7f46a6ad0120>, <deap.gp.Terminal object at 0x7f46a6a6a900>, <deap.gp.Primitive object at 0x7f46a6a67138>, <deap.gp.Terminal object at 0x7f46a6ad0120>, <deap.gp.Primitive object at 0x7f46a6ace8b8>, <deap.gp.Primitive object at 0x7f46a6a66138>, <deap.gp.Terminal object at 0x7f46a6a6a168>, <deap.gp.Terminal object at 0x7f46a6a6a1b0>, <deap.gp.Primitive object at 0x7f46a6a66138>, <deap.gp.Terminal object at 0x7f46a6a6a168>, <deap.gp.Terminal object at 0x7f46a6a6a090>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.TriStateGen object at 0x7f469f12ba40>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.AxisGen object at 0x7f469f12ba98>, <deap.gp.Primitive object at 0x7f46a6a64c28>, <deap.gp.Primitive object at 0x7f46a6a66638>, <deap.gp.Primitive object at 0x7f46a6a66278>, <deap.gp.Terminal object at 0x7f46a6a6a090>, <deap.gp.Terminal object at 0x7f46a6a6a438>, <deap.gp.Primitive object at 0x7f46a6a66458>, <deap.gp.Primitive object at 0x7f46a6a663b8>, <deap.gp.myGenFloat object at 0x7f469f12baf0>, <deap.gp.Terminal object at 0x7f46a6a6a3a8>, <deap.gp.Primitive object at 0x7f46a6a66138>, <deap.gp.Terminal object at 0x7f46a6a6a1b0>, <deap.gp.Terminal object at 0x7f46a6a6a0d8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.TriStateGen object at 0x7f469f12bb48>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.AxisGen object at 0x7f469f12bba0>]
<class 'deap.gp.PrimitiveTree'>
Healed128 individuals
Mutating offspring (Add Layer)
EmadeDataNumpyMultiplyPair(ARG0, AdjustConstrastLog(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 0.01), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_1))
15
LowpassFilterAverage(Cv2DFTReal(HighpassFourierShift(HighpassUnsharpMask(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 1, 150, 8), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), notEqual(0.01, 0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myIntDiv(myIntDiv(myIntSub(128, 0), ifThenElseBool(falseBool, falseBool, trueBool)), myIntMult(equal(1.0, 0.01), notEqual(10.0, 10.0))))
47
ScalarMax(MorphErosionEllipse(ArcSine(MyNorm(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 12), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myIntAdd(myIntDiv(9, 7), myIntDiv(64, 64)), myFloatToInt(myFloatSub(0.1, 1.0)), myIntDiv(myNot(falseBool), lessThan(10.0, 100.0))), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(passAxis(Axis.AXIS_1))), equal(myFloatDiv(10.0, myFloatIntSub(0.01, 3)), myFloatSub(myFloatMult(1.0, 0.01), myFloatAdd(10.0, 2.8038385610904095))))
55
SVCMulti(ARG0)
2
MyDCT(ARG0, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myIntSub(5, 5), greaterThan(1.0, 1.0))
12
NNLearner(ARG0, OutputLayer(SkiMedianFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 4), EmbeddingLayer(9, ContourMaskMaxExtentEnclosingCircle(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 100.0), randomUniformWeights, InputLayer(ARG0))), 95)
19
index
2
2
18
add node
Conv2DLayer
after make
NNLearner(ARG0, OutputLayer(SkiMedianFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 4), Conv2DLayer(6, 100, 2, falseBool, 6, EmbeddingLayer(9, ContourMaskMaxExtentEnclosingCircle(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 100.0), randomUniformWeights, InputLayer(ARG0)))), 95)
NNLearner(ARG0, OutputLayer(SkiMedianFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 4), Conv2DLayer(6, 100, 2, falseBool, 6, EmbeddingLayer(9, ContourMaskMaxExtentEnclosingCircle(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 100.0), randomUniformWeights, InputLayer(ARG0)))), 95)
NNLearner(ARG0, OutputLayer(CutDataLead(Cv2Sqrt(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), TriState.FEATURES_TO_FEATURES, passAxis(Axis.AXIS_2), greaterThan(1.0, 100.0)), EmbeddingLayer(7, ARG0, randomUniformWeights, InputLayer(ARG0))), 0)
21
index
2
2
20
add node
Conv1DLayer
after make
NNLearner(ARG0, OutputLayer(CutDataLead(Cv2Sqrt(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), TriState.FEATURES_TO_FEATURES, passAxis(Axis.AXIS_2), greaterThan(1.0, 100.0)), Conv1DLayer(128, 64, 5, falseBool, 50, EmbeddingLayer(7, ARG0, randomUniformWeights, InputLayer(ARG0)))), 0)
NNLearner(ARG0, OutputLayer(CutDataLead(Cv2Sqrt(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), TriState.FEATURES_TO_FEATURES, passAxis(Axis.AXIS_2), greaterThan(1.0, 100.0)), Conv1DLayer(128, 64, 5, falseBool, 50, EmbeddingLayer(7, ARG0, randomUniformWeights, InputLayer(ARG0)))), 0)
MyDiff(ARG0, passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)))
8
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(97, ARG0, randomUniformWeights, InputLayer(ARG0))), 100)
11
index
2
2
10
add node
ReLULayer
after make
NNLearner(ARG0, OutputLayer(ARG0, ReLULayer(EmbeddingLayer(97, ARG0, randomUniformWeights, InputLayer(ARG0)))), 100)
NNLearner(ARG0, OutputLayer(ARG0, ReLULayer(EmbeddingLayer(97, ARG0, randomUniformWeights, InputLayer(ARG0)))), 100)
FFT(MorphDilateEllipse(EmadeDataMultiplyFloat(RandomNormal(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 128, 7), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatIntDiv(100.0, 55)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myOr(ifThenElseBool(falseBool, trueBool, trueBool), ifThenElseBool(falseBool, falseBool, falseBool)), myNot(equal(0.1, 4.626238182777421)), passBool(myNot(falseBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_0))))
46
LabelObjects(RandomNormal(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 4, 100), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1))
11
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(myIntMult(10, 7), ARG0, randomUniformWeights, InputLayer(ARG0))), 128)
13
index
2
2
12
add node
ConcatenateLayer3
after make
NNLearner(ARG0, OutputLayer(ARG0, ConcatenateLayer3([], [], EmbeddingLayer(myIntMult(10, 7), ARG0, randomUniformWeights, InputLayer(ARG0)))), 128)
NNLearner(ARG0, OutputLayer(ARG0, ConcatenateLayer3(EmbeddingLayer(myIntMult(10, 7), ARG0, randomUniformWeights, InputLayer(ARG0)), EmbeddingLayer(myIntMult(10, 7), ARG0, randomUniformWeights, InputLayer(ARG0)), EmbeddingLayer(myIntMult(10, 7), ARG0, randomUniformWeights, InputLayer(ARG0)))), 128)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(95, ContourMaskMinArea(ARG0, passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatDiv(0.4694841172690589, 0.01)), randomUniformWeights, InputLayer(ARG0))), 100)
19
index
2
2
18
add node
GlobalMaxPoolingLayer2D
after make
NNLearner(ARG0, OutputLayer(ARG0, GlobalMaxPoolingLayer2D(EmbeddingLayer(95, ContourMaskMinArea(ARG0, passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatDiv(0.4694841172690589, 0.01)), randomUniformWeights, InputLayer(ARG0)))), 100)
NNLearner(ARG0, OutputLayer(ARG0, GlobalMaxPoolingLayer2D(EmbeddingLayer(95, ContourMaskMinArea(ARG0, passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatDiv(0.4694841172690589, 0.01)), randomUniformWeights, InputLayer(ARG0)))), 100)
MorphErosionCross(ContourMaskRangeExtent(Cv2RMS(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 100), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myOr(trueBool, falseBool), passInt(5)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), myIntMult(lessThanOrEqual(1.0, 0.1), notEqual(0.01, 1.0)), greaterThanEqual(myFloatSub(0.01, -0.4522880452439626), myFloatAdd(100.0, 10.0)), myIntSub(myNot(trueBool), notEqual(-4.98813454945843, 10.0)))
42
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 150)
11
index
2
2
10
add node
Conv1DLayer
after make
NNLearner(ARG0, OutputLayer(ARG0, Conv1DLayer(55, 0, 9, falseBool, falseBool, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)))), 150)
NNLearner(ARG0, OutputLayer(ARG0, Conv1DLayer(55, 0, 9, falseBool, falseBool, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)))), 150)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, gloveTwitterWeights, InputLayer(ARG0))), 91)
11
index
2
2
10
add node
ConcatenateLayer4
after make
NNLearner(ARG0, OutputLayer(ARG0, ConcatenateLayer4([], [], [], EmbeddingLayer(100, ARG0, gloveTwitterWeights, InputLayer(ARG0)))), 91)
NNLearner(ARG0, OutputLayer(ARG0, ConcatenateLayer4(EmbeddingLayer(100, ARG0, gloveTwitterWeights, InputLayer(ARG0)), EmbeddingLayer(100, ARG0, gloveTwitterWeights, InputLayer(ARG0)), EmbeddingLayer(100, ARG0, gloveTwitterWeights, InputLayer(ARG0)), EmbeddingLayer(100, ARG0, gloveTwitterWeights, InputLayer(ARG0)))), 91)
NNLearner(ARG0, OutputLayer(MorphTophatEllipse(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 2, 128), EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 1676)
16
index
2
2
15
add node
GRULayer
after make
NNLearner(ARG0, OutputLayer(MorphTophatEllipse(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 2, 128), GRULayer(9, 33, falseBool, trueBool, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)))), 1676)
NNLearner(ARG0, OutputLayer(MorphTophatEllipse(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 2, 128), GRULayer(9, 33, falseBool, trueBool, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)))), 1676)
ScalarDivide(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, -2.920989511456935)
5
WindowCosine(AbsDiff(WindowBackmanNuttall(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2), MorphCloseCross(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, trueBool, 64), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)))
26
Prerejection(StdDeviation(EmadeDataDividePair(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), lessThanOrEqual(0.867917720815516, -1.815796594419039)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), greaterThanEqual(passFloat(1.2183144692576144), myFloatIntDiv(-1.5129234047736286, 64)), myIntDiv(notEqual(0.1, -3.514226927314944), myNot(trueBool)), myFloatIntSub(myIntToFloat(100), equal(1.0, 10.0)))
40
EmadeDataSubtractFloat(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 100.0)
5
MyDiff(CutDataLead(Cv2Sqrt(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passBool(trueBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)))
18
SpectralFilter(Fraction(myVarThresh(ARG0, TriState.FEATURES_TO_FEATURES, 1.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myNot(falseBool)), ContourMaskRangeSolidity(Tangent(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatIntMult(10.0, 8), myFloatIntMult(-0.26536102741776535, 10)), mySelKBest(Fraction(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, trueBool), passTriState(TriState.FEATURES_TO_FEATURES), myIntMult(4, 22), lessThanOrEqual(0.01, 0.1)), FilterCentroids(NormalLikelihood(ARG0, 1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passAxis(passAxis(Axis.FULL)), passAxis(passAxis(Axis.FULL)), passAxis(passAxis(Axis.AXIS_2)))
69
ThresholdToZeroFloat(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 0.8206458690020755)
5
MyProd(LowpassFourierGaussian(MultiplyTransposed(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, falseBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), greaterThan(0.01, 1.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)))
20
ScalarAdd(SEPObjectDetection(ScalarDivide(mySelFwe(WindowBartlett(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), myFloatToInt(100.0), myFloatMult(0.01, 0.1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatIntSub(myFloatDiv(100.0, 10.0), myAnd(trueBool, trueBool))), myIntAdd(lessThanOrEqual(myFloatSub(0.1, 1.0), myFloatSub(100.0, 1.0)), equal(passFloat(4.707413748836608), myFloatDiv(1.0, -0.7775053560257277))), myFloatIntSub(myIntToFloat(ifThenElseBool(trueBool, trueBool, trueBool)), myFloatToInt(myFloatIntAdd(0.01, 6))), myFloatDiv(myFloatIntSub(myFloatIntMult(0.1, 32), myIntSub(5, 77)), myFloatSub(passFloat(0.01), myIntToFloat(8)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myFloatMult(ifThenElseFloat(ifThenElseBool(lessThan(0.01, 100.0), myNot(falseBool), greaterThanEqual(0.01, 3.400231775276932)), myFloatAdd(myFloatIntSub(1.0, 64), myFloatSub(100.0, 10.0)), myFloatIntAdd(myFloatIntMult(2.8064767778458126, 64), myIntAdd(4, 10))), myFloatIntMult(passFloat(myFloatAdd(0.01, 10.0)), myIntAdd(myFloatToInt(100.0), myIntDiv(1, 6)))))
111
MorphBlackhatCross(MorphOpenRect(MyProd(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), equal(0.1, -2.637537782037951), myIntSub(97, 150)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), passBool(passBool(trueBool)), myOr(greaterThanEqual(-4.642923599793463, 4.988814147509068), lessThanOrEqual(1.0, 0.1)))
32
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(3722, ARG0, randomUniformWeights, InputLayer(ConvolveChannelMerge(ARG0, 2)))), 100)
13
index
2
2
12
add node
ReLULayer
after make
NNLearner(ARG0, OutputLayer(ARG0, ReLULayer(EmbeddingLayer(3722, ARG0, randomUniformWeights, InputLayer(ConvolveChannelMerge(ARG0, 2))))), 100)
NNLearner(ARG0, OutputLayer(ARG0, ReLULayer(EmbeddingLayer(3722, ARG0, randomUniformWeights, InputLayer(ConvolveChannelMerge(ARG0, 2))))), 100)
NNLearner(EmadeDataSubtractFloat(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0.1), InputLayer(ARG0), 100)
9
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(8, ARG0, randomUniformWeights, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))))), 93)
17
index
8
8
16
add node
ELUActivationLayer
after make
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(8, ARG0, randomUniformWeights, OutputLayer(ARG0, ELUActivationLayer(EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)))))), 93)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(8, ARG0, randomUniformWeights, OutputLayer(ARG0, ELUActivationLayer(EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)))))), 93)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(1, ARG0, randomUniformWeights, InputLayer(ARG0))), myFloatToInt(2.634959647734199))
12
index
2
2
10
add node
ConcatenateLayer3
after make
NNLearner(ARG0, OutputLayer(ARG0, ConcatenateLayer3([], [], EmbeddingLayer(1, ARG0, randomUniformWeights, InputLayer(ARG0)))), myFloatToInt(2.634959647734199))
NNLearner(ARG0, OutputLayer(ARG0, ConcatenateLayer3(EmbeddingLayer(1, ARG0, randomUniformWeights, InputLayer(ARG0)), EmbeddingLayer(1, ARG0, randomUniformWeights, InputLayer(ARG0)), EmbeddingLayer(1, ARG0, randomUniformWeights, InputLayer(ARG0)))), myFloatToInt(2.634959647734199))
GradientMagnitude(agglomerative_clustering(LowpassFilterUniform(Sine(MatchedFiltering2D(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 100, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), lessThan(myFloatMult(-1.597816002836654, 100.0), myFloatIntDiv(0.1, 3))), passInt(myIntAdd(notEqual(1.0, 0.01), greaterThan(100.0, 100.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), lessThan(myFloatIntMult(myFloatAdd(passFloat(100.0), myFloatDiv(0.1, 1.0)), myFloatToInt(myFloatAdd(0.1, 100.0))), myFloatAdd(myFloatIntMult(myFloatIntSub(0.01, 5), notEqual(0.01, 0.1)), myFloatIntDiv(myFloatMult(100.0, 10.0), 100))))
70
MaxLoc(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0)
4
mySpectralEmbedding(ARG0, TriState.FEATURES_TO_FEATURES, 7)
4
OtsuBinaryThreshold(MorphErosionCross(MorphCloseEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 50, 64), TriState.FEATURES_TO_FEATURES, passAxis(Axis.FULL), myNot(falseBool), myIntDiv(55, 2), notEqual(0.1, 1.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myOr(lessThan(10.0, 0.1), equal(100.0, 0.1)))
32
SpectralClustering(ARG0, passBool(lessThan(myFloatIntDiv(passFloat(0.01), equal(0.1, 0.01)), myFloatAdd(myFloatAdd(-4.404746095441986, 10.0), myFloatIntSub(4.3254805991726375, 100)))), myFloatAdd(myFloatIntMult(myFloatDiv(myFloatIntDiv(1.0, 50), 1.0), 6), 100.0))
26
KalmanFilter(EmadeDataMultiplyInt(FractionDouble(RandomShuffle(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), adf_0(ARG0), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_2), lessThanOrEqual(0.01, 1.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myAnd(myOr(trueBool, falseBool), greaterThanEqual(1.0, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatAdd(myFloatIntMult(myFloatIntAdd(2.9994799536246566, 10), passBool(trueBool)), myFloatAdd(myFloatIntAdd(1.0, 1), myFloatIntDiv(0.01, 50))), myFloatIntMult(myFloatAdd(myFloatIntDiv(0.1, 55), myFloatIntAdd(10.0, 64)), lessThan(ifThenElseFloat(falseBool, 100.0, -2.2267720112368936), myFloatDiv(0.1, 100.0))))
71
SpectralClustering(HighpassFourierShift(SobelFilter(CopyStreamToTarget(ContoursAll(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myNot(greaterThan(ifThenElseFloat(trueBool, 0.1, 0.01), myFloatIntSub(100.0, 55)))), greaterThanEqual(myFloatIntSub(myFloatIntSub(myFloatSub(10.0, 10.0), equal(1.0, 0.01)), passInt(greaterThan(100.0, 0.01))), myFloatMult(myFloatIntMult(myFloatIntDiv(0.1, 32), lessThanOrEqual(1.0, 0.1)), myFloatAdd(ifThenElseFloat(falseBool, 100.0, 1.0), myFloatDiv(1.0, 0.01)))), myFloatDiv(myFloatIntAdd(myFloatIntSub(passFloat(0.01), ifThenElseBool(falseBool, falseBool, falseBool)), greaterThan(myFloatDiv(10.0, 0.01), myIntToFloat(32))), passFloat(myFloatIntMult(myFloatDiv(100.0, 0.1), myIntDiv(50, 0)))))
83
Round(ARG0, passTriState(TriState.STREAM_TO_FEATURES), Axis.AXIS_2)
5
LabelObjects(MyDiff(MatchedFiltering(mySelKBest(ARG0, TriState.FEATURES_TO_FEATURES, 150, 128), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myIntMult(3591, 10)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))))
29
FractionDouble(HighpassFourierUniform(MorphOpenRect(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 0, 3), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), ifThenElseBool(trueBool, falseBool, falseBool)), MorphGradientEllipse(CutDataLead(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 7), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), myNot(trueBool), passInt(6)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passAxis(passAxis(Axis.FULL)), passBool(greaterThanEqual(1.0, 3.723303440919034)))
46
MySnapshot(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.AXIS_2, falseBool)
8
EmadeDataDivideFloat(mySparsePCA(k_means_clustering(ARG0, falseBool), passTriState(TriState.FEATURES_TO_FEATURES), myFloatToInt(0.01), myIntToFloat(32)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), ifThenElseFloat(greaterThanEqual(0.1, 100.0), passFloat(1.0), myIntToFloat(32)))
25
EmadeDataMultiplyFloat(MultiplyTransposed(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, falseBool), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), myFloatIntDiv(0.01, 128))
13
Cv2DCT(ContourMask(Cv2iDFT(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)))
16
OtsuBinaryThreshold(WindowTurkey(StdDeviationHoleCustom(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_0, 1, 7), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myFloatIntAdd(-1.2718848843656194, 150)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myAnd(greaterThan(1.0, 0.1), greaterThan(-2.002584319607249, 100.0)))
31
ThresholdToZero(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 4.248437616340826)
5
ScalarMultiply(myPCA(ARG0, TriState.FEATURES_TO_FEATURES, 55, trueBool), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myFloatIntSub(0.1, 8))
13
ArcSine(EdgeDetectionCanny(LocalPoolingMedian(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 3395), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passBool(trueBool), myIntMult(64, 9), myOr(trueBool, trueBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)))
25
EmadeDataAddPair(ThresholdBinary(MinimumToZero(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myFloatIntMult(0.1, 9), passBool(trueBool)), Cv2TemplateMatching(MyBinaryThreshold(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 1.0), lessThan(1.0, 1.0), myNot(trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.AXIS_0)))
38
Hog(Learner(ARG0, LearnerType('DECISION_TREE', {'criterion': 0, 'splitter': 0}), EnsembleType('SINGLE', None)), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myOr(falseBool, falseBool), myIntSub(85, 128), ifThenElseBool(falseBool, falseBool, falseBool), greaterThanEqual(0.01, 10.0))
22
MorphCloseCross(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 41, 64)
6
agglomerative_clustering(mySelKBest(ARG0, TriState.STREAM_TO_STREAM, 8, 100), lessThan(0.1, 0.1))
9
WindowBackmanNuttall(Hog(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, trueBool, 100, 7, 4), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2))
13
ContourMaskMaxSolidity(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 10.0)
5
TfidfVectorizer(ARG0, trueBool, 4, 9, 2)
6
MatchedFiltering(ThresholdNLargest(Cv2AbsDiff(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), lessThanOrEqual(10.0, 2.5764281868743737)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), lessThanOrEqual(myFloatIntDiv(0.4779435682124582, 7), myFloatIntMult(0.01, falseBool)))
29
LowpassFilterUniform(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 100)
5
ThresholdBinaryInverse(WindowBlackmanHarris(MatchedFiltering2D(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 5, 0.1), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatIntSub(myFloatMult(0.1, 10.0), greaterThan(0.1, 1.0)))
25
ContourMaskRangeEquDiameter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 7, 55)
6
MorphDilateEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 9, 8, 6)
7
Sine(MorphBlackhatCross(ContourMask(CreateBBox(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_2, 0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), greaterThan(myFloatIntDiv(0.1, 50), ifThenElseFloat(trueBool, 1.7802122587595708, -2.762997359660384)), notEqual(myFloatSub(0.01, 1.0), passFloat(1.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))))
43
SetToZeroIf>Data&Factor(EmadeDataSubtractInt(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 128), ContoursMaxArea(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 6), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_2), myFloatDiv(1.0, 100.0))
22
LowpassFilterEllipsoid(MinLoc(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myAnd(trueBool, falseBool))
12
RMS2D(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 4)
5
myIfThenElse(SepDetectionWindow(WindowGaussian(ConvertToCounts(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), ifThenElseFloat(falseBool, 1.0, 1.0)), myNot(myNot(falseBool)), notEqual(myFloatIntDiv(1.0, falseBool), myFloatAdd(0.9353847326723654, -1.1692407991663014)), myFloatMult(myFloatIntAdd(-4.457970858025218, 9), ifThenElseFloat(trueBool, 0.01, 0.01))), MeanWithHole(EmadeDataNumpyMultiplyFloat(MinimumToZero(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatSub(1.0, 0.1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), lessThanOrEqual(myFloatAdd(1.0, 1.4831844220014245), myFloatMult(-3.291612748715375, 0.01)), myFloatToInt(myFloatIntDiv(0.01, 5))), WindowKaiser(ToFloatNorm(RandomShuffle(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatIntDiv(myFloatIntSub(0.01, 15), greaterThanEqual(10.0, 10.0)), falseBool), passTriState(TriState.STREAM_TO_STREAM), TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, 150)
92
ToFloat(BayesMulti(ARG0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0))
7
MeanShiftClustering(ARG0)
2
AdjustConstrastGamma(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 0.1, 100.0)
6
MorphTophatEllipse(MeanFilter(MySnapshot(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.AXIS_1, 150), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myNot(falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myOr(myAnd(falseBool, trueBool), ifThenElseBool(falseBool, trueBool, trueBool)), equal(myFloatIntDiv(0.01, falseBool), ifThenElseFloat(trueBool, 0.01, 100.0)))
38
Cv2DCT(LowpassFourierShift(NumpyDivide(ThresholdToZeroPixelFloat(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_2), Tfisf(ARG0, trueBool, 5, 5, 6), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), ifThenElseBool(notEqual(100.0, 0.01), myOr(trueBool, falseBool), lessThanOrEqual(0.1, 0.12723069712030988))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))))
48
ThresholdBinaryInverse(ThresholdBinaryInverse(MinimumToZero(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myFloatIntMult(1.0, 4)), passTriState(TriState.STREAM_TO_STREAM), Axis.AXIS_2, myFloatIntDiv(1.0, passInt(10)))
20
MyBinaryThreshold(Cv2GreaterThanOrEqual(ArcCosine(Supersampling(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 3.39836702480744, 100), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), ContourMaskMinSolidity(Cv2RMS(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 1), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), equal(1.0, 0.01)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatMult(passFloat(myFloatIntMult(100.0, 64)), myFloatSub(myFloatSub(0.1, 1.1306762020891234), myFloatIntDiv(-4.312564719857537, falseBool))))
58
LabelObjects(Tokenizer(ARG0, 7, 6189), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2))
9
mySelKBest(ARG0, TriState.FEATURES_TO_FEATURES, trueBool, 4)
5
Daisy(MorphBlackhatEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 64, 55), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatToInt(10.0), lessThan(0.1, 100.0), greaterThan(-2.625326006901383, 0.01), passBool(falseBool), greaterThan(0.1, 1.0))
24
SkiMedianFilter(MorphGradientRect(RegionalMaxima(ContoursConvexConcave(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, falseBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), ifThenElseFloat(trueBool, 100.0, -0.1922722496984548)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), lessThanOrEqual(myFloatSub(0.01, 1.0), myFloatSub(0.01, 100.0)), myAnd(lessThan(0.1, 100.0), greaterThan(100.0, 10.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), lessThanOrEqual(myFloatDiv(passFloat(4.639157203718559), myFloatMult(0.01, 100.0)), ifThenElseFloat(notEqual(-0.5172209868777138, 10.0), myFloatIntSub(0.01, 8), passFloat(10.0))))
60
mySpectralEmbedding(ARG0, TriState.STREAM_TO_STREAM, 8)
4
ThresholdBinaryFloat(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 0.1, 0.1)
6
FFT(ThresholdNLargestBinary(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 50), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1))
10
MeanShiftClustering(MorphCloseRect(WindowBartlett(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), greaterThanEqual(10.0, 10.0), myNot(falseBool)))
15
WindowBartlettHann(EqualizeAdaptHist(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 10.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1))
10
HighpassFourierGaussian(CCorrObjectFilter(ARG0, mySelFdr(ARG0, passTriState(TriState.STREAM_TO_STREAM), myAnd(lessThanOrEqual(-0.7762674365595599, 0.1), greaterThanEqual(-0.7837111049192211, 4.164487072958346)), myFloatIntMult(myFloatSub(1.0, -3.0158739521276168), equal(4.4312049661198465, 100.0))), equal(myFloatIntSub(100.0, 7), myFloatIntMult(myFloatIntSub(10.0, 10), greaterThan(10.0, 0.1))), myFloatIntSub(ifThenElseFloat(trueBool, ifThenElseFloat(trueBool, 0.1, 0.01), myFloatIntSub(100.0, -1)), myIntMult(6, myIntMult(32, 317)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), myAnd(lessThan(ifThenElseFloat(equal(100.0, 100.0), myFloatMult(10.0, 0.01), myFloatIntAdd(100.0, 0)), ifThenElseFloat(lessThanOrEqual(100.0, 0.01), myFloatDiv(0.1, 10.0), myFloatIntMult(1.0, 255))), falseBool))
80
AbsoluteValue(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL)
4
MeanFilter(MorphGradientEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, falseBool, 8), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), passBool(falseBool))
13
CornerDetectionEigen(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 150, 128, 1.0)
7
HighpassLaplacian(Cv2Transpose(MorphBlackhatEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 10, 0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myNot(equal(0.01, 10.0)), passInt(passInt(100)), myIntDiv(greaterThan(10.0, 10.0), lessThanOrEqual(100.0, 0.01)))
32
ContourMaskRangeLength(MaximumFilter(ThresholdBinaryInverseMask(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 100.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passBool(trueBool), ifThenElseFloat(trueBool, 0.01, 100.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), ifThenElseBool(greaterThan(0.01, 10.0), greaterThan(100.0, -1.6651063355966143), lessThanOrEqual(100.0, 0.01)), ifThenElseBool(greaterThan(2.7394265516025307, 100.0), greaterThan(1.0, -0.9521631199998692), greaterThan(0.01, 0.01)))
43
ContoursMaxLength(ThresholdNLargestBinary(AffinityPropagationClustering(Cv2Multiply(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_2), myIntToFloat(100)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), lessThan(myFloatMult(-0.6299447199772965, 0.01), myFloatIntAdd(0.1, 255))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myIntMult(passInt(myIntMult(255, 2)), myOr(ifThenElseBool(trueBool, falseBool, trueBool), ifThenElseBool(trueBool, trueBool, trueBool))))
47
ContourMaskRangeExtent(MorphGradientCross(Cv2DCT(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myOr(trueBool, falseBool), myIntMult(2, 55)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), passBool(greaterThanEqual(10.0, 10.0)), notEqual(myFloatDiv(10.0, -2.9418736099091114), passFloat(1.0)))
32
ThresholdBinaryMax(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 1, 100.0)
6
FilterCentroids(ContourMaskMinEquDiameter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, falseBool))
6
HighpassSobelDerivative(Prerejection(mySparsePCA(MedianFilterHole(AdjustConstrastGamma(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, -4.101416226567575, 1.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myIntAdd(3, 7), 55), passTriState(passTriState(TriState.STREAM_TO_STREAM)), greaterThan(myFloatIntAdd(1.0, 150), myFloatIntAdd(0.01, trueBool)), myFloatIntMult(myFloatAdd(0.01, 1.0), 255)), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), lessThan(myFloatAdd(myFloatMult(0.1, 0.1), passFloat(0.1)), ifThenElseFloat(passBool(falseBool), -3.9948408932836443, myFloatIntSub(0.1, -15))), myIntAdd(greaterThanEqual(100.0, myFloatIntAdd(0.01, 3)), passBool(lessThanOrEqual(10.0, 0.01))), ifThenElseFloat(falseBool, myFloatMult(myFloatIntAdd(1.114563607086816, 8), myFloatIntMult(100.0, trueBool)), myFloatIntDiv(myFloatAdd(10.0, 100.0), greaterThan(1.0, 0.1)))), TriState.STREAM_TO_FEATURES, passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), myIntDiv(ifThenElseBool(myAnd(trueBool, lessThanOrEqual(0.1, 0.01)), myOr(lessThan(2.2894660583643844, 0.01), ifThenElseBool(falseBool, falseBool, falseBool)), equal(0.01, myFloatIntSub(100.0, 1))), lessThan(myFloatIntMult(myIntToFloat(5), myFloatToInt(0.04691336717417016)), myFloatSub(myFloatIntAdd(100.0, 4), 1.0))), myIntAdd(myOr(greaterThan(myFloatMult(0.1, 1.0), myIntToFloat(falseBool)), greaterThan(myIntToFloat(100), myFloatIntSub(0.1, 0))), myIntDiv(myOr(ifThenElseBool(falseBool, falseBool, trueBool), passBool(falseBool)), 6)), myNot(myOr(lessThan(myFloatIntAdd(100.0, 6), myFloatIntAdd(10.0, 5)), equal(myIntToFloat(-8), myFloatIntDiv(1.0, 2)))), myIntDiv(myOr(greaterThanEqual(ifThenElseFloat(trueBool, 10.0, 0.1), myFloatSub(10.0, 4.016717203457642)), notEqual(myFloatSub(1.0, 0.1), myFloatAdd(1.0, 10.0))), lessThanOrEqual(myFloatAdd(myFloatAdd(0.1, 100.0), myFloatMult(0.01, 2.2918283838845745)), myIntToFloat(lessThan(100.0, 0.01)))), notEqual(myFloatIntMult(myFloatIntAdd(myFloatDiv(100.0, 0.43506167317339006), ifThenElseBool(trueBool, trueBool, trueBool)), ifThenElseBool(greaterThan(-2.0994014052525656, 100.0), greaterThan(0.1, 10.0), myNot(trueBool))), 100.0))
205
Fraction(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 4)
5
SubtractSaturate(BitwiseAnd(Cv2AbsDiff(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.FULL, Axis.AXIS_0), NormalLikelihood(ARG0, 255), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_2)), Cv2Min(ThresholdBinaryInverse(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 1.0), MorphErosionRect(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 55, 64, 5), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_0)))
53
MySnapshot(MorphOpenEllipse(ToUint8Scale(MySum(Tokenizer(ARG0, 150, 30), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2)), TriState.FEATURES_TO_FEATURES, passAxis(passAxis(Axis.AXIS_1))), TriState.STREAM_TO_STREAM, passAxis(passAxis(passAxis(Axis.FULL))), myIntAdd(myIntMult(ifThenElseBool(trueBool, trueBool, falseBool), greaterThan(0.1, 0.01)), myOr(notEqual(10.0, 0.1), trueBool)), passInt(myIntDiv(myAnd(falseBool, falseBool), greaterThan(10.0, 1.0)))), ARG0, passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(Axis.AXIS_1)), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), myIntAdd(myNot(passBool(greaterThanEqual(10.0, 1.5266903777963226))), myIntDiv(myFloatToInt(ifThenElseFloat(trueBool, 10.0, 100.0)), passInt(greaterThanEqual(0.01, 100.0)))))
77
MyDiff(ContourMaskMaxEquDiameter(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 100), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0))
10
Round(Cv2LessThan(FractionDouble(GaussianFilter(MyAutoCorr(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myFloatIntDiv(1.0, trueBool)), GaussianPeakEM(Round(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.AXIS_2)), passInt(myOr(falseBool, falseBool))), EmadeDataNumpyMultiplyPair(ConvertBW(MorphOpenEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 255, 8), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1)), ContoursAll(Stemmatizer(ARG0, 50, 3), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), passAxis(passAxis(passAxis(Axis.FULL)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))))
99
ContourMaskRangeEquDiameter(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 8, 55)
6
SetToZeroIf>Data&Factor(StandardNorm(AffinityPropagationClustering(ARG0, 100.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2)), RandomNormal(ContourMaskMinExtent(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, falseBool), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passBool(trueBool), myAnd(trueBool, trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passAxis(passAxis(Axis.FULL)), myFloatSub(myFloatIntDiv(-3.9631088180290974, 150), myFloatSub(0.1, 0.01)))
43
ContourMaskMinArea(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 10.0)
5
Select3D(ARG0, passTriState(passTriState(TriState.STREAM_TO_STREAM)), Axis.AXIS_1, ifThenElseBool(ifThenElseBool(trueBool, trueBool, trueBool), myNot(trueBool), myOr(trueBool, trueBool)), myIntMult(ifThenElseBool(trueBool, falseBool, falseBool), equal(0.01, 0.1)), myNot(trueBool), falseBool, myOr(myNot(trueBool), ifThenElseBool(trueBool, trueBool, falseBool)), myAnd(lessThanOrEqual(100.0, 0.1), lessThanOrEqual(3.189531934735939, 100.0)))
41
ContourMaskMaxSolidity(GetCentroids(ToUint8Scale(MultiplySpectrum(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(Axis.AXIS_2)), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), -2.191485714965371)
24
HighpassFourierUniform(Cv2Pow(MySum(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), lessThan(0.1, 0.01)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), 100)
20
ThresholdBinaryFloat(MeanFilter(ifThenElseDataPair(falseBool, ARG0, ARG0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), passBool(falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myFloatIntSub(myFloatIntMult(-2.9593297860650916, 2), greaterThan(10.0, 10.0)), myFloatIntMult(myFloatSub(10.0, 0.1), greaterThan(0.01, 0.01)))
32
MyAutoCorr(mySelFpr(StandardNorm(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), 3, myFloatDiv(10.0, 0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)))
18
BitwiseNOT(AccumulateWeighted(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 0.01), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2))
10
LowpassFilterGaussian(MatchedFiltering(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, trueBool), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myOr(falseBool, falseBool), lessThan(1.0, 0.01), myFloatIntMult(1.0, 4), myFloatSub(100.0, 0.1))
22
DBSCANClustering(ContourMaskMinArea(WindowLanczos(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myIntToFloat(6)), myFloatIntSub(myFloatIntAdd(0.1, 0), greaterThan(-3.0488925576405923, 10.0)), ifThenElseFloat(passBool(falseBool), myIntToFloat(8), myFloatIntSub(100.0, 5)))
27
StdDeviation(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 77)
5
ifThenElseDataPair(falseBool, ARG0, ARG0)
4
ContoursMinLength(ContourMaskMinEquDiameter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, falseBool), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), myAnd(trueBool, trueBool))
13
ContourMaskMinEnclosingCircle(ThresholdNLargest(ThresholdNLargestBinary(FFT(ScalarDivide(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 0.01), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), notEqual(myFloatSub(3.7952197136671497, 10.0), passFloat(0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myIntAdd(passBool(equal(1.0, 0.01)), myIntMult(myAnd(trueBool, trueBool), greaterThanEqual(10.0, -2.9539607246556687)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), myFloatDiv(myFloatIntAdd(myFloatDiv(myFloatSub(0.01, 10.0), ifThenElseFloat(falseBool, 10.0, 100.0)), equal(myFloatIntDiv(0.1, 4), ifThenElseFloat(falseBool, -1.4335154156459797, 10.0))), myFloatAdd(passFloat(myFloatMult(1.0, 0.1)), myFloatIntDiv(myFloatIntDiv(10.0, 150), equal(1.0, 0.1)))))
85
RandomUniform(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, -4, 150)
6
Cv2Equal(SkiMedianFilter(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 7), EmadeDataIntegerDivide(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 10.0), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0))
19
ContourMaskMinEquDiameter(ZeroOneNorm(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myOr(trueBool, trueBool))
12
AdjustConstrastGamma(HighpassFourierUniform(MorphTophatEllipse(ZeroOneNorm(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), greaterThanEqual(0.01, 10.0), lessThan(100.0, 0.1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passBool(myNot(falseBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatIntDiv(myFloatIntDiv(ifThenElseFloat(falseBool, 0.01, 1.0), myIntSub(100, 32)), myFloatToInt(ifThenElseFloat(falseBool, 0.01, 1.0))), myFloatDiv(myFloatIntMult(myFloatMult(0.1, 0.1), myIntDiv(10, 5210)), myFloatDiv(myFloatDiv(1.0, 0.007058487021426529), myFloatMult(0.01, 0.01))))
63
Round(MatchedFiltering(RMS2D(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 6), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), myOr(falseBool, falseBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)))
20
ThresholdBinary(LocalPoolingMean(LinearPredictiveCoding(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 255), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), lessThanOrEqual(0.1, 0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), ifThenElseFloat(myAnd(trueBool, trueBool), passFloat(0.1), myFloatIntAdd(0.1, 2)), myOr(myAnd(falseBool, trueBool), myOr(falseBool, trueBool)))
36
SVCMulti(ThresholdToZeroPixelFloat(InRange(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 7, 5), ContourMaskMaxExtent(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 50), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_1)))
21
ZeroOneNorm(MyNorm(Cv2RMS(ToUint8(mySparsePCA(ARG0, TriState.FEATURES_TO_FEATURES, 5, 4.769380003348955), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), greaterThanEqual(myFloatIntDiv(1.0, 12), myFloatSub(0.01, 10.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myNot(notEqual(myFloatMult(0.1, 0.1), myIntToFloat(6)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))))
51
SavitzkyGolayFilter(Cv2Divide(WindowPlanckTaper(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 100.0), SepDetectionWindow(ARG0, 32, 100, 100.0), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), equal(myFloatIntMult(100.0, 1), myFloatIntDiv(0.01, 100)), myAnd(myNot(trueBool), lessThan(-3.039105479147428, 0.01)), myAnd(greaterThanEqual(0.1, 0.01), equal(0.1, 0.01)))
46
RandomShuffle(LowpassFilterMedian(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 10), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2))
10
SetToZeroIf>Data&Factor(ContoursMaxLength(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 8), Cv2Add(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.AXIS_1), TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_0), myFloatIntSub(10.0, 4666))
22
Mutated 124 individuals
Mutating offspring (Remove Layer)
EmadeDataNumpyMultiplyPair(ARG0, AdjustConstrastLog(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 0.01), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_1))
EmadeDataNumpyMultiplyPair(ARG0, AdjustConstrastLog(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 0.01), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_1))
LowpassFilterAverage(Cv2DFTReal(HighpassFourierShift(HighpassUnsharpMask(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 1, 150, 8), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), notEqual(0.01, 0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myIntDiv(myIntDiv(myIntSub(128, 0), ifThenElseBool(falseBool, falseBool, trueBool)), myIntMult(equal(1.0, 0.01), notEqual(10.0, 10.0))))
LowpassFilterAverage(Cv2DFTReal(HighpassFourierShift(HighpassUnsharpMask(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 1, 150, 8), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), notEqual(0.01, 0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myIntDiv(myIntDiv(myIntSub(128, 0), ifThenElseBool(falseBool, falseBool, trueBool)), myIntMult(equal(1.0, 0.01), notEqual(10.0, 10.0))))
KalmanFilter(StdDeviation(ContoursConvexConcave(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, falseBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), ifThenElseBool(falseBool, falseBool, falseBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myFloatAdd(myIntToFloat(1676), myFloatSub(0.1, 1.0)), myIntToFloat(myNot(trueBool)))
KalmanFilter(StdDeviation(ContoursConvexConcave(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, falseBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), ifThenElseBool(falseBool, falseBool, falseBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myFloatAdd(myIntToFloat(1676), myFloatSub(0.1, 1.0)), myIntToFloat(myNot(trueBool)))
ScalarDivide(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, -2.920989511456935)
ScalarDivide(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, -2.920989511456935)
MaxLoc(BitwiseAnd(ContourMaskRangeLength(Round(StdDeviation(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 100), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), Axis.AXIS_0, equal(passFloat(10.0), myFloatDiv(0.01, 0.2274954885701046)), passBool(ifThenElseBool(falseBool, trueBool, falseBool))), ThresholdBinary(MyCumSum(LocalPoolingMax(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 6), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), 7), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), 100.0, myOr(greaterThanEqual(-4.171750319883218, 0.01), notEqual(10.0, 1.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), passAxis(passAxis(passAxis(Axis.AXIS_0)))), TriState.FEATURES_TO_FEATURES, passAxis(passAxis(passAxis(passAxis(Axis.FULL)))))
MaxLoc(BitwiseAnd(ContourMaskRangeLength(Round(StdDeviation(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 100), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), Axis.AXIS_0, equal(passFloat(10.0), myFloatDiv(0.01, 0.2274954885701046)), passBool(ifThenElseBool(falseBool, trueBool, falseBool))), ThresholdBinary(MyCumSum(LocalPoolingMax(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 6), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), 7), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), 100.0, myOr(greaterThanEqual(-4.171750319883218, 0.01), notEqual(10.0, 1.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), passAxis(passAxis(passAxis(Axis.AXIS_0)))), TriState.FEATURES_TO_FEATURES, passAxis(passAxis(passAxis(passAxis(Axis.FULL)))))
NNLearner(ARG0, OutputLayer(SkiMedianFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 4), Conv2DLayer(6, 100, 2, falseBool, 6, EmbeddingLayer(9, ContourMaskMaxExtentEnclosingCircle(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 100.0), randomUniformWeights, InputLayer(ARG0)))), 95)
NNLearner(ARG0, OutputLayer(SkiMedianFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 4), EmbeddingLayer(9, ContourMaskMaxExtentEnclosingCircle(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 100.0), randomUniformWeights, InputLayer(ARG0))), 95)
NNLearner(ARG0, OutputLayer(CutDataLead(Cv2Sqrt(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), TriState.FEATURES_TO_FEATURES, passAxis(Axis.AXIS_2), greaterThan(1.0, 100.0)), Conv1DLayer(128, 64, 5, falseBool, 50, EmbeddingLayer(7, ARG0, randomUniformWeights, InputLayer(ARG0)))), 0)
NNLearner(ARG0, OutputLayer(CutDataLead(Cv2Sqrt(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), TriState.FEATURES_TO_FEATURES, passAxis(Axis.AXIS_2), greaterThan(1.0, 100.0)), EmbeddingLayer(7, ARG0, randomUniformWeights, InputLayer(ARG0))), 0)
NNLearner(ARG0, OutputLayer(ARG0, ReLULayer(EmbeddingLayer(97, ARG0, randomUniformWeights, InputLayer(ARG0)))), 100)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(97, ARG0, randomUniformWeights, InputLayer(ARG0))), 100)
MinimumFilter(NNLearner(ARG0, [], 9), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), ifThenElseBool(trueBool, trueBool, falseBool), myFloatDiv(10.0, 0.01))
MinimumFilter(NNLearner(ARG0, [], 9), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), ifThenElseBool(trueBool, trueBool, falseBool), myFloatDiv(10.0, 0.01))
LabelObjects(RandomNormal(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 4, 100), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1))
LabelObjects(RandomNormal(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 4, 100), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1))
NNLearner(ARG0, OutputLayer(ARG0, ConcatenateLayer3(EmbeddingLayer(myIntMult(10, 7), ARG0, randomUniformWeights, InputLayer(ARG0)), EmbeddingLayer(myIntMult(10, 7), ARG0, randomUniformWeights, InputLayer(ARG0)), EmbeddingLayer(myIntMult(10, 7), ARG0, randomUniformWeights, InputLayer(ARG0)))), 128)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(myIntMult(10, 7), ARG0, randomUniformWeights, InputLayer(ARG0))), 128)
NNLearner(ARG0, OutputLayer(ARG0, GlobalMaxPoolingLayer2D(EmbeddingLayer(95, ContourMaskMinArea(ARG0, passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatDiv(0.4694841172690589, 0.01)), randomUniformWeights, InputLayer(ARG0)))), 100)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(95, ContourMaskMinArea(ARG0, passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatDiv(0.4694841172690589, 0.01)), randomUniformWeights, InputLayer(ARG0))), 100)
CreateBBox(LowpassFilterEllipsoid(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 50), WindowHamming(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, falseBool), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_2), myNot(falseBool))
CreateBBox(LowpassFilterEllipsoid(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 50), WindowHamming(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, falseBool), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_2), myNot(falseBool))
NNLearner(ARG0, OutputLayer(ARG0, Conv1DLayer(55, 0, 9, falseBool, falseBool, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)))), 150)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 150)
NNLearner(ARG0, OutputLayer(ARG0, ConcatenateLayer4(EmbeddingLayer(100, ARG0, gloveTwitterWeights, InputLayer(ARG0)), EmbeddingLayer(100, ARG0, gloveTwitterWeights, InputLayer(ARG0)), EmbeddingLayer(100, ARG0, gloveTwitterWeights, InputLayer(ARG0)), EmbeddingLayer(100, ARG0, gloveTwitterWeights, InputLayer(ARG0)))), 91)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, gloveTwitterWeights, InputLayer(ARG0))), 91)
NNLearner(ARG0, OutputLayer(MorphTophatEllipse(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 2, 128), GRULayer(9, 33, falseBool, trueBool, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)))), 1676)
NNLearner(ARG0, OutputLayer(MorphTophatEllipse(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 2, 128), EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 1676)
SVCMulti(ARG0)
SVCMulti(ARG0)
MatchedFiltering(ContourMask(HighpassFourierEllipsoid(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, trueBool), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), myIntAdd(ifThenElseBool(falseBool, trueBool, trueBool), myIntAdd(255, 0)))
MatchedFiltering(ContourMask(HighpassFourierEllipsoid(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, trueBool), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), myIntAdd(ifThenElseBool(falseBool, trueBool, trueBool), myIntAdd(255, 0)))
ContourMaskMinArea(ARG0, passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myFloatSub(myFloatDiv(0.1, 3.318901895439245), myFloatAdd(1.0, 0.1)))
ContourMaskMinArea(ARG0, passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myFloatSub(myFloatDiv(0.1, 3.318901895439245), myFloatAdd(1.0, 0.1)))
MySnapshot(ContourMaskConvex(Cv2Divide(Sine(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), Cv2Max(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), myNot(greaterThanEqual(100.0, 100.0))), EmadeDataAddInt(WienerFilter(ThresholdToZeroPixelFloat(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), lessThanOrEqual(myFloatIntSub(0.01, 128), passFloat(0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), passAxis(passAxis(passAxis(Axis.AXIS_2))), notEqual(ifThenElseFloat(ifThenElseBool(falseBool, trueBool, falseBool), passFloat(2.9900549360085655), ifThenElseFloat(trueBool, 0.01, -4.268745342159392)), myFloatIntDiv(myIntToFloat(255), myIntAdd(4, 128))))
MySnapshot(ContourMaskConvex(Cv2Divide(Sine(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), Cv2Max(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), myNot(greaterThanEqual(100.0, 100.0))), EmadeDataAddInt(WienerFilter(ThresholdToZeroPixelFloat(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), lessThanOrEqual(myFloatIntSub(0.01, 128), passFloat(0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), passAxis(passAxis(passAxis(Axis.AXIS_2))), notEqual(ifThenElseFloat(ifThenElseBool(falseBool, trueBool, falseBool), passFloat(2.9900549360085655), ifThenElseFloat(trueBool, 0.01, -4.268745342159392)), myFloatIntDiv(myIntToFloat(255), myIntAdd(4, 128))))
MorphBlackhatCross(agglomerative_clustering(ARG0, 7), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passBool(falseBool), falseBool)
MorphBlackhatCross(agglomerative_clustering(ARG0, 7), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passBool(falseBool), falseBool)
ThresholdBinaryMax(ARG0, TriState.STREAM_TO_FEATURES, passAxis(Axis.AXIS_2), 64, 100.0)
ThresholdBinaryMax(ARG0, TriState.STREAM_TO_FEATURES, passAxis(Axis.AXIS_2), 64, 100.0)
MorphBlackhatEllipse(WindowLanczos(CopyStreamToTarget(GetCentroids(WindowNuttal(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.STREAM_TO_STREAM), Axis.AXIS_0)), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), myIntMult(2, ifThenElseBool(myOr(equal(10.0, 0.1), ifThenElseBool(trueBool, trueBool, trueBool)), myAnd(lessThanOrEqual(10.0, 100.0), ifThenElseBool(falseBool, trueBool, falseBool)), myOr(ifThenElseBool(trueBool, trueBool, falseBool), falseBool))), equal(-1.7789343059738059, 10.0))
MorphBlackhatEllipse(WindowLanczos(CopyStreamToTarget(GetCentroids(WindowNuttal(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.STREAM_TO_STREAM), Axis.AXIS_0)), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), myIntMult(2, ifThenElseBool(myOr(equal(10.0, 0.1), ifThenElseBool(trueBool, trueBool, trueBool)), myAnd(lessThanOrEqual(10.0, 100.0), ifThenElseBool(falseBool, trueBool, falseBool)), myOr(ifThenElseBool(trueBool, trueBool, falseBool), falseBool))), equal(-1.7789343059738059, 10.0))
ScalarAdd(SEPObjectDetection(ScalarDivide(mySelFwe(WindowBartlett(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), myFloatToInt(100.0), myFloatMult(0.01, 0.1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatIntSub(myFloatDiv(100.0, 10.0), myAnd(trueBool, trueBool))), myIntAdd(lessThanOrEqual(myFloatSub(0.1, 1.0), myFloatSub(100.0, 1.0)), equal(passFloat(4.707413748836608), myFloatDiv(1.0, -0.7775053560257277))), myFloatIntSub(myIntToFloat(ifThenElseBool(trueBool, trueBool, trueBool)), myFloatToInt(myFloatIntAdd(0.01, 6))), myFloatDiv(myFloatIntSub(myFloatIntMult(0.1, 32), myIntSub(5, 77)), myFloatSub(passFloat(0.01), myIntToFloat(8)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myFloatMult(ifThenElseFloat(ifThenElseBool(lessThan(0.01, 100.0), myNot(falseBool), greaterThanEqual(0.01, 3.400231775276932)), myFloatAdd(myFloatIntSub(1.0, 64), myFloatSub(100.0, 10.0)), myFloatIntAdd(myFloatIntMult(2.8064767778458126, 64), myIntAdd(4, 10))), myFloatIntMult(passFloat(myFloatAdd(0.01, 10.0)), myIntAdd(myFloatToInt(100.0), myIntDiv(1, 6)))))
ScalarAdd(SEPObjectDetection(ScalarDivide(mySelFwe(WindowBartlett(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), myFloatToInt(100.0), myFloatMult(0.01, 0.1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatIntSub(myFloatDiv(100.0, 10.0), myAnd(trueBool, trueBool))), myIntAdd(lessThanOrEqual(myFloatSub(0.1, 1.0), myFloatSub(100.0, 1.0)), equal(passFloat(4.707413748836608), myFloatDiv(1.0, -0.7775053560257277))), myFloatIntSub(myIntToFloat(ifThenElseBool(trueBool, trueBool, trueBool)), myFloatToInt(myFloatIntAdd(0.01, 6))), myFloatDiv(myFloatIntSub(myFloatIntMult(0.1, 32), myIntSub(5, 77)), myFloatSub(passFloat(0.01), myIntToFloat(8)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myFloatMult(ifThenElseFloat(ifThenElseBool(lessThan(0.01, 100.0), myNot(falseBool), greaterThanEqual(0.01, 3.400231775276932)), myFloatAdd(myFloatIntSub(1.0, 64), myFloatSub(100.0, 10.0)), myFloatIntAdd(myFloatIntMult(2.8064767778458126, 64), myIntAdd(4, 10))), myFloatIntMult(passFloat(myFloatAdd(0.01, 10.0)), myIntAdd(myFloatToInt(100.0), myIntDiv(1, 6)))))
Cv2Min(ContoursAll(Cv2DCT(HighpassFourierUniform(DogDetection(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 100.0, 0.7245293173604006, 100.0, 100.0, 1.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), myAnd(falseBool, falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL))), TriState.FEATURES_TO_FEATURES, passAxis(passAxis(passAxis(Axis.AXIS_1)))), myPCA(MorphErosionEllipse(Prerejection(ARG0, passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passBool(trueBool), greaterThan(10.0, 1.0), passFloat(1.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myNot(ifThenElseBool(falseBool, falseBool, trueBool)), myAnd(notEqual(2.483547608190869, 0.422436862800617), trueBool), 150), passTriState(TriState.FEATURES_TO_FEATURES), greaterThanEqual(myIntToFloat(100), myFloatMult(myFloatSub(10.0, 0.01), ifThenElseFloat(trueBool, 0.1, 0.01))), equal(ifThenElseFloat(notEqual(100.0, 10.0), 10.0, myFloatIntDiv(1.0, 3)), myIntToFloat(9))), passTriState(TriState.STREAM_TO_STREAM), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))))
Cv2Min(ContoursAll(Cv2DCT(HighpassFourierUniform(DogDetection(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 100.0, 0.7245293173604006, 100.0, 100.0, 1.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), myAnd(falseBool, falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL))), TriState.FEATURES_TO_FEATURES, passAxis(passAxis(passAxis(Axis.AXIS_1)))), myPCA(MorphErosionEllipse(Prerejection(ARG0, passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passBool(trueBool), greaterThan(10.0, 1.0), passFloat(1.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myNot(ifThenElseBool(falseBool, falseBool, trueBool)), myAnd(notEqual(2.483547608190869, 0.422436862800617), trueBool), 150), passTriState(TriState.FEATURES_TO_FEATURES), greaterThanEqual(myIntToFloat(100), myFloatMult(myFloatSub(10.0, 0.01), ifThenElseFloat(trueBool, 0.1, 0.01))), equal(ifThenElseFloat(notEqual(100.0, 10.0), 10.0, myFloatIntDiv(1.0, 3)), myIntToFloat(9))), passTriState(TriState.STREAM_TO_STREAM), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))))
NNLearner(ARG0, OutputLayer(ARG0, ReLULayer(EmbeddingLayer(3722, ARG0, randomUniformWeights, InputLayer(ConvolveChannelMerge(ARG0, 2))))), 100)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(3722, ARG0, randomUniformWeights, InputLayer(ConvolveChannelMerge(ARG0, 2)))), 100)
NNLearner(EmadeDataSubtractFloat(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0.1), InputLayer(ARG0), 100)
NNLearner(EmadeDataSubtractFloat(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0.1), InputLayer(ARG0), 100)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(8, ARG0, randomUniformWeights, OutputLayer(ARG0, ELUActivationLayer(EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)))))), 93)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(8, ARG0, randomUniformWeights, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))))), 93)
NNLearner(ARG0, OutputLayer(ARG0, ConcatenateLayer3(EmbeddingLayer(1, ARG0, randomUniformWeights, InputLayer(ARG0)), EmbeddingLayer(1, ARG0, randomUniformWeights, InputLayer(ARG0)), EmbeddingLayer(1, ARG0, randomUniformWeights, InputLayer(ARG0)))), myFloatToInt(2.634959647734199))
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(1, ARG0, randomUniformWeights, InputLayer(ARG0))), myFloatToInt(2.634959647734199))
GradientMagnitude(agglomerative_clustering(LowpassFilterUniform(Sine(MatchedFiltering2D(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 100, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), lessThan(myFloatMult(-1.597816002836654, 100.0), myFloatIntDiv(0.1, 3))), passInt(myIntAdd(notEqual(1.0, 0.01), greaterThan(100.0, 100.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), lessThan(myFloatIntMult(myFloatAdd(passFloat(100.0), myFloatDiv(0.1, 1.0)), myFloatToInt(myFloatAdd(0.1, 100.0))), myFloatAdd(myFloatIntMult(myFloatIntSub(0.01, 5), notEqual(0.01, 0.1)), myFloatIntDiv(myFloatMult(100.0, 10.0), 100))))
GradientMagnitude(agglomerative_clustering(LowpassFilterUniform(Sine(MatchedFiltering2D(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 100, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), lessThan(myFloatMult(-1.597816002836654, 100.0), myFloatIntDiv(0.1, 3))), passInt(myIntAdd(notEqual(1.0, 0.01), greaterThan(100.0, 100.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), lessThan(myFloatIntMult(myFloatAdd(passFloat(100.0), myFloatDiv(0.1, 1.0)), myFloatToInt(myFloatAdd(0.1, 100.0))), myFloatAdd(myFloatIntMult(myFloatIntSub(0.01, 5), notEqual(0.01, 0.1)), myFloatIntDiv(myFloatMult(100.0, 10.0), 100))))
Sentiment(ARG0, trueBool)
Sentiment(ARG0, trueBool)
ContourMaskRangeEquDiameter(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 7, 7)
ContourMaskRangeEquDiameter(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 7, 7)
SpectralClustering(ARG0, passBool(lessThan(myFloatIntDiv(passFloat(0.01), equal(0.1, 0.01)), myFloatAdd(myFloatAdd(-4.404746095441986, 10.0), myFloatIntSub(4.3254805991726375, 100)))), myFloatAdd(myFloatIntMult(myFloatDiv(myFloatIntDiv(1.0, 50), 1.0), 6), 100.0))
SpectralClustering(ARG0, passBool(lessThan(myFloatIntDiv(passFloat(0.01), equal(0.1, 0.01)), myFloatAdd(myFloatAdd(-4.404746095441986, 10.0), myFloatIntSub(4.3254805991726375, 100)))), myFloatAdd(myFloatIntMult(myFloatDiv(myFloatIntDiv(1.0, 50), 1.0), 6), 100.0))
KalmanFilter(EmadeDataMultiplyInt(FractionDouble(RandomShuffle(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), adf_0(ARG0), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_2), lessThanOrEqual(0.01, 1.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myAnd(myOr(trueBool, falseBool), greaterThanEqual(1.0, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatAdd(myFloatIntMult(myFloatIntAdd(2.9994799536246566, 10), passBool(trueBool)), myFloatAdd(myFloatIntAdd(1.0, 1), myFloatIntDiv(0.01, 50))), myFloatIntMult(myFloatAdd(myFloatIntDiv(0.1, 55), myFloatIntAdd(10.0, 64)), lessThan(ifThenElseFloat(falseBool, 100.0, -2.2267720112368936), myFloatDiv(0.1, 100.0))))
KalmanFilter(EmadeDataMultiplyInt(FractionDouble(RandomShuffle(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), adf_0(ARG0), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_2), lessThanOrEqual(0.01, 1.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myAnd(myOr(trueBool, falseBool), greaterThanEqual(1.0, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatAdd(myFloatIntMult(myFloatIntAdd(2.9994799536246566, 10), passBool(trueBool)), myFloatAdd(myFloatIntAdd(1.0, 1), myFloatIntDiv(0.01, 50))), myFloatIntMult(myFloatAdd(myFloatIntDiv(0.1, 55), myFloatIntAdd(10.0, 64)), lessThan(ifThenElseFloat(falseBool, 100.0, -2.2267720112368936), myFloatDiv(0.1, 100.0))))
MaxLoc(ScalarAdd(ScalarMultiply(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myFloatDiv(0.01, 0.1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)))
MaxLoc(ScalarAdd(ScalarMultiply(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myFloatDiv(0.01, 0.1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)))
ContoursMaxArea(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 10)
ContoursMaxArea(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 10)
LabelObjects(MyDiff(MatchedFiltering(mySelKBest(ARG0, TriState.FEATURES_TO_FEATURES, 150, 128), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myIntMult(3591, 10)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))))
LabelObjects(MyDiff(MatchedFiltering(mySelKBest(ARG0, TriState.FEATURES_TO_FEATURES, 150, 128), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myIntMult(3591, 10)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))))
ScalarMultiply(SavitzkyGolayFilter(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 255, 0, 3), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatDiv(3.1896112054170516, 0.01))
ScalarMultiply(SavitzkyGolayFilter(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 255, 0, 3), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatDiv(3.1896112054170516, 0.01))
ContoursMinLength(DBSCANClustering(ARG0, 100.0, 10.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myOr(trueBool, trueBool))
ContoursMinLength(DBSCANClustering(ARG0, 100.0, 10.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myOr(trueBool, trueBool))
DogDetection(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 1.0, 0.01, 0.1, 1.0, 10.0)
DogDetection(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 1.0, 0.01, 0.1, 1.0, 10.0)
Cv2DCT(ContourMask(Cv2iDFT(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)))
Cv2DCT(ContourMask(Cv2iDFT(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)))
OtsuBinaryThreshold(WindowTurkey(StdDeviationHoleCustom(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_0, 1, 7), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myFloatIntAdd(-1.2718848843656194, 150)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myAnd(greaterThan(1.0, 0.1), greaterThan(-2.002584319607249, 100.0)))
OtsuBinaryThreshold(WindowTurkey(StdDeviationHoleCustom(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_0, 1, 7), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myFloatIntAdd(-1.2718848843656194, 150)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myAnd(greaterThan(1.0, 0.1), greaterThan(-2.002584319607249, 100.0)))
MeanFilter(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 0)
MeanFilter(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 0)
MyDCT(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 150, 10)
MyDCT(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 150, 10)
ScalarDivide(AdjustConstrastGamma(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 10.0, 10.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), myFloatDiv(0.1, 1.0))
ScalarDivide(AdjustConstrastGamma(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 10.0, 10.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), myFloatDiv(0.1, 1.0))
Select2D(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 0, 0, 50, 128)
Select2D(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 0, 0, 50, 128)
RichardsonLucy(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 1605)
RichardsonLucy(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 1605)
MedianFilterHole(DogDetection(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 1.0, 100.0, 4.082378169670548, 0.1, 0.1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), 5820, ifThenElseBool(falseBool, trueBool, falseBool))
MedianFilterHole(DogDetection(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 1.0, 100.0, 4.082378169670548, 0.1, 0.1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), 5820, ifThenElseBool(falseBool, trueBool, falseBool))
MorphCloseCross(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 55, 8)
MorphCloseCross(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 55, 8)
MyBinaryThreshold(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0.1)
MyBinaryThreshold(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0.1)
SubtractSaturate(WindowKaiser(ContourMaskRangeExtentEnclosingCircle(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 0, 255), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), myFloatIntSub(0.1, 614), passBool(falseBool)), HighpassLaplacian(MorphGradientEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 9076, 6), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myAnd(falseBool, trueBool), myAnd(falseBool, falseBool), greaterThan(1.0, 10.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.FULL)))
SubtractSaturate(WindowKaiser(ContourMaskRangeExtentEnclosingCircle(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 0, 255), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), myFloatIntSub(0.1, 614), passBool(falseBool)), HighpassLaplacian(MorphGradientEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 9076, 6), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myAnd(falseBool, trueBool), myAnd(falseBool, falseBool), greaterThan(1.0, 10.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.FULL)))
MorphErosionCross(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0, 4, 1)
MorphErosionCross(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0, 4, 1)
SepDetectionWindow(FractionDouble(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_1, falseBool), myIntDiv(64, 50), myIntMult(10, 19), myFloatIntAdd(0.2941064408436329, 9))
SepDetectionWindow(FractionDouble(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_1, falseBool), myIntDiv(64, 50), myIntMult(10, 19), myFloatIntAdd(0.2941064408436329, 9))
LowpassFilterUniform(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 100)
LowpassFilterUniform(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 100)
MorphDilateRect(GaussianFilter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myIntMult(6536, 2), ifThenElseBool(trueBool, trueBool, trueBool), myIntAdd(6, falseBool))
MorphDilateRect(GaussianFilter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myIntMult(6536, 2), ifThenElseBool(trueBool, trueBool, trueBool), myIntAdd(6, falseBool))
MorphOpenEllipse(ARG0, passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), greaterThan(0.1, 10.0), greaterThanEqual(1.0, 0.01))
MorphOpenEllipse(ARG0, passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), greaterThan(0.1, 10.0), greaterThanEqual(1.0, 0.01))
myVarThresh(Cv2LessThanOrEqual(myVarThresh(ARG0, TriState.FEATURES_TO_FEATURES, 100.0), MorphTophatCross(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, falseBool, 3), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), myFloatIntMult(myFloatMult(2.4033962036614254, 10.0), equal(-1.5439127885928827, 0.01)))
myVarThresh(Cv2LessThanOrEqual(myVarThresh(ARG0, TriState.FEATURES_TO_FEATURES, 100.0), MorphTophatCross(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, falseBool, 3), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), myFloatIntMult(myFloatMult(2.4033962036614254, 10.0), equal(-1.5439127885928827, 0.01)))
HighpassFourierEllipsoid(BitwiseNOT(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myIntAdd(100, trueBool))
HighpassFourierEllipsoid(BitwiseNOT(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myIntAdd(100, trueBool))
MySnapshot(ToUint8(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1), LinearPredictiveCoding(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 9), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_1), greaterThan(100.0, -0.26061250946157344))
MySnapshot(ToUint8(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1), LinearPredictiveCoding(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 9), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_1), greaterThan(100.0, -0.26061250946157344))
LowpassFilterEllipsoid(MinLoc(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myAnd(trueBool, falseBool))
LowpassFilterEllipsoid(MinLoc(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myAnd(trueBool, falseBool))
SubtractSaturate(agglomerative_clustering(ContourMaskRangeSolidity(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 0.1, 0.1), greaterThan(0.1, 1.0)), MorphDilateEllipse(WindowGaussian(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 10.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), ifThenElseBool(trueBool, trueBool, trueBool), myIntMult(55, 128), myAnd(trueBool, trueBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), passAxis(passAxis(Axis.AXIS_1)))
SubtractSaturate(agglomerative_clustering(ContourMaskRangeSolidity(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 0.1, 0.1), greaterThan(0.1, 1.0)), MorphDilateEllipse(WindowGaussian(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 10.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), ifThenElseBool(trueBool, trueBool, trueBool), myIntMult(55, 128), myAnd(trueBool, trueBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), passAxis(passAxis(Axis.AXIS_1)))
SepDetectionWindow(NumNamedEntities(WindowTriangular(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2)), greaterThanEqual(myFloatAdd(0.1, 0.1), myFloatAdd(0.01, 1.0)), lessThan(myFloatIntDiv(4.235158959516594, 3), myFloatDiv(10.0, 1.0)), myFloatIntSub(myFloatIntMult(-2.6341564729661773, 64), myAnd(trueBool, falseBool)))
SepDetectionWindow(NumNamedEntities(WindowTriangular(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2)), greaterThanEqual(myFloatAdd(0.1, 0.1), myFloatAdd(0.01, 1.0)), lessThan(myFloatIntDiv(4.235158959516594, 3), myFloatDiv(10.0, 1.0)), myFloatIntSub(myFloatIntMult(-2.6341564729661773, 64), myAnd(trueBool, falseBool)))
MorphOpenRect(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 7, 1)
MorphOpenRect(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 7, 1)
ContourMaskRangeAspectRatio(HighpassFourierEllipsoid(ARG0, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), 4), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myIntAdd(lessThanOrEqual(0.1, 0.1), lessThanOrEqual(0.1, 100.0)), greaterThanEqual(myFloatIntAdd(0.1, 3), myFloatIntAdd(-0.5209122717662718, 61)))
ContourMaskRangeAspectRatio(HighpassFourierEllipsoid(ARG0, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), 4), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myIntAdd(lessThanOrEqual(0.1, 0.1), lessThanOrEqual(0.1, 100.0)), greaterThanEqual(myFloatIntAdd(0.1, 3), myFloatIntAdd(-0.5209122717662718, 61)))
MeanShiftClustering(ARG0)
MeanShiftClustering(ARG0)
ContourMaskMinAspectRatio(EmadeDataDividePair(ContoursMinLength(GradientWeighted(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 128, 10.0, 10.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatToInt(100.0)), LowpassFilterMedian(BitwiseAnd(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), Axis.AXIS_2, 8), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), Axis.AXIS_0, passAxis(passAxis(Axis.AXIS_2))), passTriState(TriState.STREAM_TO_FEATURES), passAxis(passAxis(passAxis(Axis.AXIS_1))), passFloat(myFloatAdd(myFloatIntAdd(0.01, 9), myFloatDiv(0.1, 10.0))))
ContourMaskMinAspectRatio(EmadeDataDividePair(ContoursMinLength(GradientWeighted(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 128, 10.0, 10.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatToInt(100.0)), LowpassFilterMedian(BitwiseAnd(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), Axis.AXIS_2, 8), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), Axis.AXIS_0, passAxis(passAxis(Axis.AXIS_2))), passTriState(TriState.STREAM_TO_FEATURES), passAxis(passAxis(passAxis(Axis.AXIS_1))), passFloat(myFloatAdd(myFloatIntAdd(0.01, 9), myFloatDiv(0.1, 10.0))))
mySelKBest(MorphGradientEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 4, 6), passTriState(TriState.FEATURES_TO_FEATURES), greaterThan(0.1, 100.0), lessThanOrEqual(100.0, 100.0))
mySelKBest(MorphGradientEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 4, 6), passTriState(TriState.FEATURES_TO_FEATURES), greaterThan(0.1, 100.0), lessThanOrEqual(100.0, 100.0))
AdjustConstrastGamma(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 100.0, 0.1)
AdjustConstrastGamma(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 100.0, 0.1)
mySelFdr(myIfThenElse(HighpassSobelDerivative(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 4, 100, 8, 4, 64), ContourMaskRangeExtent(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, falseBool, 3), EqualizeDisk(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 1), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passBool(falseBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), equal(myFloatIntSub(0.1, 4), ifThenElseFloat(trueBool, 0.7532466300299232, 0.01)), myFloatMult(myFloatIntAdd(0.01, 80), myFloatIntAdd(1.0, 10)))
mySelFdr(myIfThenElse(HighpassSobelDerivative(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 4, 100, 8, 4, 64), ContourMaskRangeExtent(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, falseBool, 3), EqualizeDisk(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 1), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passBool(falseBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), equal(myFloatIntSub(0.1, 4), ifThenElseFloat(trueBool, 0.7532466300299232, 0.01)), myFloatMult(myFloatIntAdd(0.01, 80), myFloatIntAdd(1.0, 10)))
MyBinaryThreshold(Cv2GreaterThanOrEqual(ArcCosine(Supersampling(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 3.39836702480744, 100), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), ContourMaskMinSolidity(Cv2RMS(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 1), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), equal(1.0, 0.01)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatMult(passFloat(myFloatIntMult(100.0, 64)), myFloatSub(myFloatSub(0.1, 1.1306762020891234), myFloatIntDiv(-4.312564719857537, falseBool))))
MyBinaryThreshold(Cv2GreaterThanOrEqual(ArcCosine(Supersampling(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 3.39836702480744, 100), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), ContourMaskMinSolidity(Cv2RMS(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 1), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), equal(1.0, 0.01)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatMult(passFloat(myFloatIntMult(100.0, 64)), myFloatSub(myFloatSub(0.1, 1.1306762020891234), myFloatIntDiv(-4.312564719857537, falseBool))))
MyCumProd(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 32)
MyCumProd(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 32)
ContourMaskMinExtentEnclosingCircle(MyNorm(AdjustConstrastLog(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 100.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myOr(falseBool, falseBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passFloat(myFloatIntAdd(100.0, 7)))
ContourMaskMinExtentEnclosingCircle(MyNorm(AdjustConstrastLog(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 100.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myOr(falseBool, falseBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passFloat(myFloatIntAdd(100.0, 7)))
ConvertToCounts(StdDeviation(mySubSampleData(ARG0, 4, 65), passTriState(TriState.STREAM_TO_FEATURES), Axis.AXIS_0, greaterThan(1.0, 10.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)))
ConvertToCounts(StdDeviation(mySubSampleData(ARG0, 4, 65), passTriState(TriState.STREAM_TO_FEATURES), Axis.AXIS_0, greaterThan(1.0, 10.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)))
SkiMedianFilter(MorphGradientRect(RegionalMaxima(ContoursConvexConcave(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, falseBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), ifThenElseFloat(trueBool, 100.0, -0.1922722496984548)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), lessThanOrEqual(myFloatSub(0.01, 1.0), myFloatSub(0.01, 100.0)), myAnd(lessThan(0.1, 100.0), greaterThan(100.0, 10.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), lessThanOrEqual(myFloatDiv(passFloat(4.639157203718559), myFloatMult(0.01, 100.0)), ifThenElseFloat(notEqual(-0.5172209868777138, 10.0), myFloatIntSub(0.01, 8), passFloat(10.0))))
SkiMedianFilter(MorphGradientRect(RegionalMaxima(ContoursConvexConcave(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, falseBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), ifThenElseFloat(trueBool, 100.0, -0.1922722496984548)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), lessThanOrEqual(myFloatSub(0.01, 1.0), myFloatSub(0.01, 100.0)), myAnd(lessThan(0.1, 100.0), greaterThan(100.0, 10.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), lessThanOrEqual(myFloatDiv(passFloat(4.639157203718559), myFloatMult(0.01, 100.0)), ifThenElseFloat(notEqual(-0.5172209868777138, 10.0), myFloatIntSub(0.01, 8), passFloat(10.0))))
RMS2D(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 55)
RMS2D(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 55)
Cv2Divide(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_2)
Cv2Divide(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_2)
FFT(ThresholdNLargestBinary(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 50), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1))
FFT(ThresholdNLargestBinary(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 50), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1))
HashingVectorizer(LogDetection(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 1.0, 0.1, 3, 10.0, 0.01), greaterThanEqual(0.01, 100.0), greaterThanEqual(10.0, 0.1), myFloatToInt(4.715511195689581), myNot(trueBool))
HashingVectorizer(LogDetection(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 1.0, 0.1, 3, 10.0, 0.01), greaterThanEqual(0.01, 100.0), greaterThanEqual(10.0, 0.1), myFloatToInt(4.715511195689581), myNot(trueBool))
MorphTophatCross(ARG0, passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myIntAdd(myIntSub(5, 29), passInt(1)), greaterThanEqual(myFloatIntAdd(1.0, 9), myFloatDiv(1.0, -1.8274707763944087)))
MorphTophatCross(ARG0, passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myIntAdd(myIntSub(5, 29), passInt(1)), greaterThanEqual(myFloatIntAdd(1.0, 9), myFloatDiv(1.0, -1.8274707763944087)))
ThresholdToZero(ContourMaskMaxExtent(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 150), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatIntAdd(100.0, 5))
ThresholdToZero(ContourMaskMaxExtent(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 150), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatIntAdd(100.0, 5))
AbsoluteValue(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL)
AbsoluteValue(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL)
MeanFilter(MorphGradientEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, falseBool, 8), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), passBool(falseBool))
MeanFilter(MorphGradientEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, falseBool, 8), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), passBool(falseBool))
ContourMask(ARG0, TriState.FEATURES_TO_FEATURES, passAxis(passAxis(Axis.FULL)))
ContourMask(ARG0, TriState.FEATURES_TO_FEATURES, passAxis(passAxis(Axis.FULL)))
WindowCosine(ThresholdToZero(myPCA(ContourMask(Select3D(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 0, 1002, 7, 10, 4, 9), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passInt(notEqual(10.0, 0.01)), greaterThanEqual(myIntToFloat(6), myIntToFloat(trueBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myFloatMult(myFloatIntMult(ifThenElseFloat(trueBool, 10.0, 0.1), myAnd(falseBool, falseBool)), myFloatSub(myIntToFloat(150), myFloatDiv(100.0, -0.2193816702640552)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))))
WindowCosine(ThresholdToZero(myPCA(ContourMask(Select3D(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 0, 1002, 7, 10, 4, 9), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passInt(notEqual(10.0, 0.01)), greaterThanEqual(myIntToFloat(6), myIntToFloat(trueBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myFloatMult(myFloatIntMult(ifThenElseFloat(trueBool, 10.0, 0.1), myAnd(falseBool, falseBool)), myFloatSub(myIntToFloat(150), myFloatDiv(100.0, -0.2193816702640552)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))))
Cv2RMS(EmadeDataDividePair(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myAnd(trueBool, trueBool))
Cv2RMS(EmadeDataDividePair(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myAnd(trueBool, trueBool))
Hog(EmadeDataAddInt(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 32), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), myAnd(trueBool, falseBool), equal(-3.0637399130816254, 10.0), myOr(falseBool, trueBool), ifThenElseBool(trueBool, falseBool, trueBool))
Hog(EmadeDataAddInt(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 32), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), myAnd(trueBool, falseBool), equal(-3.0637399130816254, 10.0), myOr(falseBool, trueBool), ifThenElseBool(trueBool, falseBool, trueBool))
EqualizeDisk(ARG0, passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myIntDiv(passInt(-1), myIntSub(50, 5)))
EqualizeDisk(ARG0, passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myIntDiv(passInt(-1), myIntSub(50, 5)))
FilterCentroids(ContourMaskMinEquDiameter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, falseBool))
FilterCentroids(ContourMaskMinEquDiameter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, falseBool))
MyInformedSearch(WindowHamming(ArcSine(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), lessThanOrEqual(0.01, 0.01)), WindowHamming(GradientWeighted(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 10, 0.1, 0.1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), lessThanOrEqual(100.0, 0.1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_0)), passBool(greaterThan(10.0, -2.319834567682083)), myFloatMult(myFloatMult(0.01, 100.0), myFloatIntDiv(0.01, 6)))
MyInformedSearch(WindowHamming(ArcSine(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), lessThanOrEqual(0.01, 0.01)), WindowHamming(GradientWeighted(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 10, 0.1, 0.1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), lessThanOrEqual(100.0, 0.1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_0)), passBool(greaterThan(10.0, -2.319834567682083)), myFloatMult(myFloatMult(0.01, 100.0), myFloatIntDiv(0.01, 6)))
Fraction(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 4)
Fraction(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 4)
SubtractSaturate(BitwiseAnd(Cv2AbsDiff(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.FULL, Axis.AXIS_0), NormalLikelihood(ARG0, 255), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_2)), Cv2Min(ThresholdBinaryInverse(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 1.0), MorphErosionRect(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 55, 64, 5), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_0)))
SubtractSaturate(BitwiseAnd(Cv2AbsDiff(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.FULL, Axis.AXIS_0), NormalLikelihood(ARG0, 255), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_2)), Cv2Min(ThresholdBinaryInverse(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 1.0), MorphErosionRect(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 55, 64, 5), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_0)))
LowpassFilterBilateral(LowpassFilterEllipsoid(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), equal(-3.0843514725905417, 1.0), myIntMult(255, 7), lessThan(0.01, 10.0))
LowpassFilterBilateral(LowpassFilterEllipsoid(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), equal(-3.0843514725905417, 1.0), myIntMult(255, 7), lessThan(0.01, 10.0))
ThresholdBinaryMax(MultiplySpectrum(MorphErosionEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 5, 255, 3), Cv2Pow(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 50), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), notEqual(myFloatIntSub(0.01, 3), ifThenElseFloat(trueBool, 10.0, 3.334664941889473)), myFloatIntAdd(myIntToFloat(3), passInt(6)))
ThresholdBinaryMax(MultiplySpectrum(MorphErosionEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 5, 255, 3), Cv2Pow(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 50), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), notEqual(myFloatIntSub(0.01, 3), ifThenElseFloat(trueBool, 10.0, 3.334664941889473)), myFloatIntAdd(myIntToFloat(3), passInt(6)))
MyDiff(MyNorm(Rebase(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myNot(trueBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)))
MyDiff(MyNorm(Rebase(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myNot(trueBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)))
MorphErosionCross(WindowLanczos(MeanWithHole(SkiMedianFilter(SEPObjectDetection(ARG0, 64, 10.0, 1.3907739214601715), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passBool(falseBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), 2, ifThenElseBool(myNot(falseBool), myAnd(trueBool, falseBool), greaterThan(1.0, 10.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1)))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myIntSub(greaterThanEqual(passFloat(myFloatIntMult(1.0, 3365)), 0.1), equal(ifThenElseFloat(myNot(falseBool), myFloatIntAdd(1.9621240081754996, 100), myFloatSub(1.0, 1.0)), myFloatIntAdd(myFloatIntAdd(100.0, 8), myIntAdd(50, trueBool)))), passInt(myIntSub(myIntSub(ifThenElseBool(falseBool, falseBool, trueBool), notEqual(0.01, 100.0)), myAnd(trueBool, lessThan(0.01, 10.0)))), 5)
MorphErosionCross(WindowLanczos(MeanWithHole(SkiMedianFilter(SEPObjectDetection(ARG0, 64, 10.0, 1.3907739214601715), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passBool(falseBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), 2, ifThenElseBool(myNot(falseBool), myAnd(trueBool, falseBool), greaterThan(1.0, 10.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1)))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myIntSub(greaterThanEqual(passFloat(myFloatIntMult(1.0, 3365)), 0.1), equal(ifThenElseFloat(myNot(falseBool), myFloatIntAdd(1.9621240081754996, 100), myFloatSub(1.0, 1.0)), myFloatIntAdd(myFloatIntAdd(100.0, 8), myIntAdd(50, trueBool)))), passInt(myIntSub(myIntSub(ifThenElseBool(falseBool, falseBool, trueBool), notEqual(0.01, 100.0)), myAnd(trueBool, lessThan(0.01, 10.0)))), 5)
MorphTophatRect(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 61, 6)
MorphTophatRect(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 61, 6)
birch_clustering(WindowBlackman(ArcTangent(EmadeDataMultiplyInt(MyDWT(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 61), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), greaterThan(0.01, 0.1)), TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myFloatAdd(ifThenElseFloat(greaterThanEqual(10.0, 100.0), myFloatMult(0.1, 1.0), myFloatSub(0.1, 0.1)), myFloatSub(myFloatDiv(0.1, 0.1), myIntToFloat(6)))), myFloatDiv(myIntToFloat(greaterThanEqual(myFloatDiv(0.1, 1.0), passFloat(0.01))), myFloatIntSub(myFloatIntMult(myIntToFloat(6), lessThanOrEqual(-0.051486290484572095, -1.769474421690055)), myFloatToInt(myIntToFloat(55)))), myOr(trueBool, myOr(greaterThan(myFloatIntMult(1.0, 6), myFloatIntSub(0.01, 1)), lessThan(myFloatSub(0.1, 0.01), myFloatIntMult(0.1, 8)))), passInt(passInt(greaterThanEqual(100.0, myFloatSub(1.0, 0.01)))))
birch_clustering(WindowBlackman(ArcTangent(EmadeDataMultiplyInt(MyDWT(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 61), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), greaterThan(0.01, 0.1)), TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myFloatAdd(ifThenElseFloat(greaterThanEqual(10.0, 100.0), myFloatMult(0.1, 1.0), myFloatSub(0.1, 0.1)), myFloatSub(myFloatDiv(0.1, 0.1), myIntToFloat(6)))), myFloatDiv(myIntToFloat(greaterThanEqual(myFloatDiv(0.1, 1.0), passFloat(0.01))), myFloatIntSub(myFloatIntMult(myIntToFloat(6), lessThanOrEqual(-0.051486290484572095, -1.769474421690055)), myFloatToInt(myIntToFloat(55)))), myOr(trueBool, myOr(greaterThan(myFloatIntMult(1.0, 6), myFloatIntSub(0.01, 1)), lessThan(myFloatSub(0.1, 0.01), myFloatIntMult(0.1, 8)))), passInt(passInt(greaterThanEqual(100.0, myFloatSub(1.0, 0.01)))))
Select3D(ARG0, passTriState(passTriState(TriState.STREAM_TO_STREAM)), Axis.AXIS_1, ifThenElseBool(ifThenElseBool(trueBool, trueBool, trueBool), myNot(trueBool), myOr(trueBool, trueBool)), myIntMult(ifThenElseBool(trueBool, falseBool, falseBool), equal(0.01, 0.1)), myNot(trueBool), falseBool, myOr(myNot(trueBool), ifThenElseBool(trueBool, trueBool, falseBool)), myAnd(lessThanOrEqual(100.0, 0.1), lessThanOrEqual(3.189531934735939, 100.0)))
Select3D(ARG0, passTriState(passTriState(TriState.STREAM_TO_STREAM)), Axis.AXIS_1, ifThenElseBool(ifThenElseBool(trueBool, trueBool, trueBool), myNot(trueBool), myOr(trueBool, trueBool)), myIntMult(ifThenElseBool(trueBool, falseBool, falseBool), equal(0.01, 0.1)), myNot(trueBool), falseBool, myOr(myNot(trueBool), ifThenElseBool(trueBool, trueBool, falseBool)), myAnd(lessThanOrEqual(100.0, 0.1), lessThanOrEqual(3.189531934735939, 100.0)))
ArcTangent(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL)
ArcTangent(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL)
WindowPlanckTaper(mySparsePCA(ARG0, TriState.STREAM_TO_FEATURES, -9, 100.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myFloatDiv(0.1, 0.1))
WindowPlanckTaper(mySparsePCA(ARG0, TriState.STREAM_TO_FEATURES, -9, 100.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myFloatDiv(0.1, 0.1))
ThresholdBinaryFloat(MeanFilter(ifThenElseDataPair(falseBool, ARG0, ARG0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), passBool(falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myFloatIntSub(myFloatIntMult(-2.9593297860650916, 2), greaterThan(10.0, 10.0)), myFloatIntMult(myFloatSub(10.0, 0.1), greaterThan(0.01, 0.01)))
ThresholdBinaryFloat(MeanFilter(ifThenElseDataPair(falseBool, ARG0, ARG0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), passBool(falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myFloatIntSub(myFloatIntMult(-2.9593297860650916, 2), greaterThan(10.0, 10.0)), myFloatIntMult(myFloatSub(10.0, 0.1), greaterThan(0.01, 0.01)))
MyAutoCorr(mySelFpr(StandardNorm(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), 3, myFloatDiv(10.0, 0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)))
MyAutoCorr(mySelFpr(StandardNorm(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), 3, myFloatDiv(10.0, 0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)))
BitwiseNOT(AccumulateWeighted(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 0.01), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2))
BitwiseNOT(AccumulateWeighted(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 0.01), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2))
EmadeDataMultiplyPair(MorphDilateEllipse(SavitzkyGolayFilter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 10, 8, 8), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myOr(trueBool, trueBool), myIntSub(100, 1), notEqual(0.01, 0.1)), EmadeDataAddPairTriple(WindowBlackman(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 10.0), RandomShuffle(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), AdjustConstrastLog(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, -4.349206158163597), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_1), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), passAxis(passAxis(Axis.AXIS_2)))
EmadeDataMultiplyPair(MorphDilateEllipse(SavitzkyGolayFilter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 10, 8, 8), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myOr(trueBool, trueBool), myIntSub(100, 1), notEqual(0.01, 0.1)), EmadeDataAddPairTriple(WindowBlackman(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 10.0), RandomShuffle(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), AdjustConstrastLog(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, -4.349206158163597), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_1), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), passAxis(passAxis(Axis.AXIS_2)))
WindowBlackman(Cv2GreaterThan(MyAverager(MyAutoCorr(Hog(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, falseBool, 100, 255, 27), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), passBool(greaterThan(10.0, 2.114353493716856))), MyNorm(LognormalLM(MultiplySpectrum(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myFloatToInt(myFloatAdd(100.0, 10.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2))), passAxis(passAxis(passAxis(Axis.AXIS_1)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), myFloatAdd(ifThenElseFloat(myOr(greaterThanEqual(0.01, -2.698856169925765), myNot(falseBool)), myFloatIntSub(myIntToFloat(8145), myIntDiv(0, 50)), myFloatSub(ifThenElseFloat(trueBool, 100.0, 100.0), myFloatIntAdd(-0.9658259679513304, 5))), myFloatSub(ifThenElseFloat(notEqual(10.0, -3.3625993423487346), myFloatIntAdd(0.1, 5), myFloatAdd(1.0, 100.0)), myFloatSub(myFloatDiv(10.0, 0.1), ifThenElseFloat(trueBool, 0.01, 10.0)))))
WindowBlackman(Cv2GreaterThan(MyAverager(MyAutoCorr(Hog(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, falseBool, 100, 255, 27), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), passBool(greaterThan(10.0, 2.114353493716856))), MyNorm(LognormalLM(MultiplySpectrum(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myFloatToInt(myFloatAdd(100.0, 10.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2))), passAxis(passAxis(passAxis(Axis.AXIS_1)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), myFloatAdd(ifThenElseFloat(myOr(greaterThanEqual(0.01, -2.698856169925765), myNot(falseBool)), myFloatIntSub(myIntToFloat(8145), myIntDiv(0, 50)), myFloatSub(ifThenElseFloat(trueBool, 100.0, 100.0), myFloatIntAdd(-0.9658259679513304, 5))), myFloatSub(ifThenElseFloat(notEqual(10.0, -3.3625993423487346), myFloatIntAdd(0.1, 5), myFloatAdd(1.0, 100.0)), myFloatSub(myFloatDiv(10.0, 0.1), ifThenElseFloat(trueBool, 0.01, 10.0)))))
FractionTriple(RandomUniform(ConvertBW(Learner(SetToZeroIf<Data&Factor(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_1, 255), ModifyLearnerFloat(LearnerType('KNN', {'K': 3, 'weights': 0}), 0.01, falseBool), ModifyEnsembleInt(EnsembleType('GRID', None), 255, 2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myNot(lessThan(myFloatSub(100.0, 10.0), ifThenElseFloat(trueBool, 1.0, 0.01))), notEqual(myFloatIntSub(myFloatAdd(100.0, 1.0), myIntSub(9, 6)), myFloatMult(myFloatSub(0.1, 0.1), myFloatIntMult(0.01, 100)))), EmadeDataNumpyMultiplyFloat(MyBinaryThreshold(BitwiseOr(AdjustConstrastLog(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 100.0), GradientWeighted(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 1, 1.0, 100.0), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatSub(myIntToFloat(97), myFloatIntAdd(100.0, 29))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatIntAdd(myIntToFloat(greaterThan(0.01, 100.0)), passInt(myIntMult(11, 150)))), StdDeviationHole(MorphOpenCross(MorphCloseCross(MorphBlackhatRect(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 50, 10), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), greaterThanEqual(0.1, 0.1), myFloatToInt(-1.0399429945978267)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passBool(greaterThanEqual(1.8066201072486088, 100.0)), passBool(equal(10.0, -4.261701765953674))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myAnd(lessThan(myFloatIntDiv(-4.845624744776469, 10), myIntToFloat(3)), myNot(greaterThanEqual(0.1, 0.01))), myIntSub(greaterThanEqual(myFloatIntMult(1.5849853581349578, 8), myFloatMult(0.1, 0.01)), myAnd(passBool(falseBool), notEqual(0.01, 10.0)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), myIntAdd(myOr(lessThan(ifThenElseFloat(trueBool, -4.885915295047991, 100.0), myFloatIntSub(100.0, 10)), myAnd(myOr(falseBool, falseBool), myAnd(falseBool, trueBool))), myIntDiv(myAnd(equal(10.0, 0.9737817647001012), notEqual(10.0, 0.01)), myFloatToInt(myFloatAdd(1.0, 0.13351988622046562)))))
FractionTriple(RandomUniform(ConvertBW(Learner(SetToZeroIf<Data&Factor(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_1, 255), ModifyLearnerFloat(LearnerType('KNN', {'K': 3, 'weights': 0}), 0.01, falseBool), ModifyEnsembleInt(EnsembleType('GRID', None), 255, 2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myNot(lessThan(myFloatSub(100.0, 10.0), ifThenElseFloat(trueBool, 1.0, 0.01))), notEqual(myFloatIntSub(myFloatAdd(100.0, 1.0), myIntSub(9, 6)), myFloatMult(myFloatSub(0.1, 0.1), myFloatIntMult(0.01, 100)))), EmadeDataNumpyMultiplyFloat(MyBinaryThreshold(BitwiseOr(AdjustConstrastLog(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 100.0), GradientWeighted(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 1, 1.0, 100.0), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatSub(myIntToFloat(97), myFloatIntAdd(100.0, 29))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatIntAdd(myIntToFloat(greaterThan(0.01, 100.0)), passInt(myIntMult(11, 150)))), StdDeviationHole(MorphOpenCross(MorphCloseCross(MorphBlackhatRect(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 50, 10), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), greaterThanEqual(0.1, 0.1), myFloatToInt(-1.0399429945978267)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passBool(greaterThanEqual(1.8066201072486088, 100.0)), passBool(equal(10.0, -4.261701765953674))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myAnd(lessThan(myFloatIntDiv(-4.845624744776469, 10), myIntToFloat(3)), myNot(greaterThanEqual(0.1, 0.01))), myIntSub(greaterThanEqual(myFloatIntMult(1.5849853581349578, 8), myFloatMult(0.1, 0.01)), myAnd(passBool(falseBool), notEqual(0.01, 10.0)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), myIntAdd(myOr(lessThan(ifThenElseFloat(trueBool, -4.885915295047991, 100.0), myFloatIntSub(100.0, 10)), myAnd(myOr(falseBool, falseBool), myAnd(falseBool, trueBool))), myIntDiv(myAnd(equal(10.0, 0.9737817647001012), notEqual(10.0, 0.01)), myFloatToInt(myFloatAdd(1.0, 0.13351988622046562)))))
ToFloat(LabelByCenterOfMass(Cv2LessThanOrEqual(MaximumWindow(Cv2Pow(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 10), lessThanOrEqual(4.414045886095607, 0.1), equal(1.0, 3.6560382364737993), passFloat(1.0)), SpectralFilter(MorphErosionCross(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, trueBool, 8, 100), BitwiseOr(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.FULL), NumNamedEntities(ARG0), SelectRange(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 91, 5), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_1), passAxis(Axis.FULL), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.AXIS_1))), RXAnomalyDetector(Select3D(SetToZeroIf<Data&Factor(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.FULL, Axis.FULL, trueBool), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myIntMult(5, 255), myOr(trueBool, trueBool), myFloatToInt(10.0), passBool(trueBool), myIntMult(3, 2), greaterThanEqual(10.0, -1.3940504926993191)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myFloatIntMult(myFloatDiv(0.1, -1.4302727964896533), equal(0.01, 10.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), passAxis(passAxis(passAxis(Axis.FULL)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))))
ToFloat(LabelByCenterOfMass(Cv2LessThanOrEqual(MaximumWindow(Cv2Pow(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 10), lessThanOrEqual(4.414045886095607, 0.1), equal(1.0, 3.6560382364737993), passFloat(1.0)), SpectralFilter(MorphErosionCross(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, trueBool, 8, 100), BitwiseOr(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.FULL), NumNamedEntities(ARG0), SelectRange(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 91, 5), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_1), passAxis(Axis.FULL), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.AXIS_1))), RXAnomalyDetector(Select3D(SetToZeroIf<Data&Factor(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.FULL, Axis.FULL, trueBool), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myIntMult(5, 255), myOr(trueBool, trueBool), myFloatToInt(10.0), passBool(trueBool), myIntMult(3, 2), greaterThanEqual(10.0, -1.3940504926993191)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myFloatIntMult(myFloatDiv(0.1, -1.4302727964896533), equal(0.01, 10.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), passAxis(passAxis(passAxis(Axis.FULL)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))))
ArcCosine(EmadeDataNumpyMultiplyPair(RandomShuffle(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), ARG0, passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_1)), TriState.STREAM_TO_STREAM, passAxis(passAxis(Axis.AXIS_2)))
ArcCosine(EmadeDataNumpyMultiplyPair(RandomShuffle(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), ARG0, passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_1)), TriState.STREAM_TO_STREAM, passAxis(passAxis(Axis.AXIS_2)))
RandomUniform(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, -4, 150)
RandomUniform(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, -4, 150)
Cv2Multiply(ARG0, MaximumWindow(SEPObjectDetection(ThresholdBinary(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 100.0, 50), passInt(6), myFloatIntDiv(1.0, 10), myFloatIntAdd(0.1, 6)), myFloatToInt(myFloatIntAdd(0.1, 32)), lessThanOrEqual(passFloat(10.0), myFloatIntSub(10.0, 150)), myFloatIntDiv(0.01, myOr(trueBool, trueBool))), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL))), passAxis(passAxis(passAxis(Axis.AXIS_1))))
Cv2Multiply(ARG0, MaximumWindow(SEPObjectDetection(ThresholdBinary(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 100.0, 50), passInt(6), myFloatIntDiv(1.0, 10), myFloatIntAdd(0.1, 6)), myFloatToInt(myFloatIntAdd(0.1, 32)), lessThanOrEqual(passFloat(10.0), myFloatIntSub(10.0, 150)), myFloatIntDiv(0.01, myOr(trueBool, trueBool))), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL))), passAxis(passAxis(passAxis(Axis.AXIS_1))))
ContourMaskMinEquDiameter(ZeroOneNorm(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myOr(trueBool, trueBool))
ContourMaskMinEquDiameter(ZeroOneNorm(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myOr(trueBool, trueBool))
ZeroOneNorm(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1)
ZeroOneNorm(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1)
MedianFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 32)
MedianFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 32)
myICA(ContourMaskMinArea(GradientMagnitude(Tokenizer(ARG0, 7, 518), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), lessThanOrEqual(0.1, 1.6548537041261326)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatIntMult(myFloatIntMult(0.01, 5), myIntMult(5, 1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), lessThan(myFloatIntSub(myFloatMult(0.1, 0.1), greaterThanEqual(-1.62545880996786, 0.01)), myFloatIntMult(myFloatIntAdd(100.0, 50), notEqual(0.01, 0.01))), lessThan(myFloatDiv(ifThenElseFloat(falseBool, 100.0, 0.1), myFloatIntDiv(10.0, 6)), myFloatMult(myFloatSub(10.0, 0.01), myFloatSub(0.01, 0.1))))
myICA(ContourMaskMinArea(GradientMagnitude(Tokenizer(ARG0, 7, 518), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), lessThanOrEqual(0.1, 1.6548537041261326)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatIntMult(myFloatIntMult(0.01, 5), myIntMult(5, 1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), lessThan(myFloatIntSub(myFloatMult(0.1, 0.1), greaterThanEqual(-1.62545880996786, 0.01)), myFloatIntMult(myFloatIntAdd(100.0, 50), notEqual(0.01, 0.01))), lessThan(myFloatDiv(ifThenElseFloat(falseBool, 100.0, 0.1), myFloatIntDiv(10.0, 6)), myFloatMult(myFloatSub(10.0, 0.01), myFloatSub(0.01, 0.1))))
SVCMulti(ThresholdToZeroPixelFloat(InRange(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 7, 5), ContourMaskMaxExtent(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 50), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_1)))
SVCMulti(ThresholdToZeroPixelFloat(InRange(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 7, 5), ContourMaskMaxExtent(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 50), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_1)))
GradientWeighted(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 7, 0.1, 10.0)
GradientWeighted(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 7, 0.1, 10.0)
SpectralClustering(ThresholdBinaryMax(MaximumFilter(ImagePeakFinder(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passBool(falseBool), myFloatMult(0.01, 1.0)), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(passAxis(Axis.FULL)), greaterThanEqual(myFloatIntDiv(0.01, 255), myFloatIntMult(10.0, -15)), myFloatDiv(myIntToFloat(7), myFloatIntAdd(0.01, 8))), passBool(greaterThanEqual(0.01, myFloatAdd(1.0, 0.1))), -4.803354050518086)
SpectralClustering(ThresholdBinaryMax(MaximumFilter(ImagePeakFinder(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passBool(falseBool), myFloatMult(0.01, 1.0)), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(passAxis(Axis.FULL)), greaterThanEqual(myFloatIntDiv(0.01, 255), myFloatIntMult(10.0, -15)), myFloatDiv(myIntToFloat(7), myFloatIntAdd(0.01, 8))), passBool(greaterThanEqual(0.01, myFloatAdd(1.0, 0.1))), -4.803354050518086)
SetToZeroIf>Data&Factor(ContoursMaxLength(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 8), Cv2Add(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.AXIS_1), TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_0), myFloatIntSub(10.0, 4666))
SetToZeroIf>Data&Factor(ContoursMaxLength(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 8), Cv2Add(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.AXIS_1), TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_0), myFloatIntSub(10.0, 4666))
Mutated 118 individuals
Mutating offspring (Swap Layer)
EmadeDataNumpyMultiplyPair(ARG0, AdjustConstrastLog(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 0.01), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_1))
EmadeDataNumpyMultiplyPair(ARG0, AdjustConstrastLog(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 0.01), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_1))
LowpassFilterAverage(Cv2DFTReal(HighpassFourierShift(HighpassUnsharpMask(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 1, 150, 8), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), notEqual(0.01, 0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myIntDiv(myIntDiv(myIntSub(128, 0), ifThenElseBool(falseBool, falseBool, trueBool)), myIntMult(equal(1.0, 0.01), notEqual(10.0, 10.0))))
LowpassFilterAverage(Cv2DFTReal(HighpassFourierShift(HighpassUnsharpMask(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 1, 150, 8), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), notEqual(0.01, 0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myIntDiv(myIntDiv(myIntSub(128, 0), ifThenElseBool(falseBool, falseBool, trueBool)), myIntMult(equal(1.0, 0.01), notEqual(10.0, 10.0))))
KalmanFilter(StdDeviation(ContoursConvexConcave(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, falseBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), ifThenElseBool(falseBool, falseBool, falseBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myFloatAdd(myIntToFloat(1676), myFloatSub(0.1, 1.0)), myIntToFloat(myNot(trueBool)))
KalmanFilter(StdDeviation(ContoursConvexConcave(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, falseBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), ifThenElseBool(falseBool, falseBool, falseBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myFloatAdd(myIntToFloat(1676), myFloatSub(0.1, 1.0)), myIntToFloat(myNot(trueBool)))
ScalarDivide(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, -2.920989511456935)
ScalarDivide(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, -2.920989511456935)
MyDCT(ARG0, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myIntSub(5, 5), greaterThan(1.0, 1.0))
MyDCT(ARG0, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myIntSub(5, 5), greaterThan(1.0, 1.0))
NNLearner(ARG0, OutputLayer(SkiMedianFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 4), EmbeddingLayer(9, ContourMaskMaxExtentEnclosingCircle(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 100.0), randomUniformWeights, InputLayer(ARG0))), 95)
NNLearner(ARG0, OutputLayer(SkiMedianFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 4), EmbeddingLayer(9, ContourMaskMaxExtentEnclosingCircle(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 100.0), randomUniformWeights, InputLayer(ARG0))), 95)
NNLearner(ARG0, OutputLayer(CutDataLead(Cv2Sqrt(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), TriState.FEATURES_TO_FEATURES, passAxis(Axis.AXIS_2), greaterThan(1.0, 100.0)), EmbeddingLayer(7, ARG0, randomUniformWeights, InputLayer(ARG0))), 0)
NNLearner(ARG0, OutputLayer(CutDataLead(Cv2Sqrt(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), TriState.FEATURES_TO_FEATURES, passAxis(Axis.AXIS_2), greaterThan(1.0, 100.0)), EmbeddingLayer(7, ARG0, randomUniformWeights, InputLayer(ARG0))), 0)
MyDiff(ARG0, passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)))
MyDiff(ARG0, passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)))
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(97, ARG0, randomUniformWeights, InputLayer(ARG0))), 100)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(97, ARG0, randomUniformWeights, InputLayer(ARG0))), 100)
FFT(MorphDilateEllipse(EmadeDataMultiplyFloat(RandomNormal(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 128, 7), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatIntDiv(100.0, 55)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myOr(ifThenElseBool(falseBool, trueBool, trueBool), ifThenElseBool(falseBool, falseBool, falseBool)), myNot(equal(0.1, 4.626238182777421)), passBool(myNot(falseBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_0))))
FFT(MorphDilateEllipse(EmadeDataMultiplyFloat(RandomNormal(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 128, 7), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatIntDiv(100.0, 55)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myOr(ifThenElseBool(falseBool, trueBool, trueBool), ifThenElseBool(falseBool, falseBool, falseBool)), myNot(equal(0.1, 4.626238182777421)), passBool(myNot(falseBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_0))))
EmadeDataAddInt(rmsHole(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 10, 8), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myAnd(falseBool, falseBool))
EmadeDataAddInt(rmsHole(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 10, 8), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myAnd(falseBool, falseBool))
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(myIntMult(10, 7), ARG0, randomUniformWeights, InputLayer(ARG0))), 128)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(myIntMult(10, 7), ARG0, randomUniformWeights, InputLayer(ARG0))), 128)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(95, ContourMaskMinArea(ARG0, passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatDiv(0.4694841172690589, 0.01)), randomUniformWeights, InputLayer(ARG0))), 100)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(95, ContourMaskMinArea(ARG0, passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatDiv(0.4694841172690589, 0.01)), randomUniformWeights, InputLayer(ARG0))), 100)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 150)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 150)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, gloveTwitterWeights, InputLayer(ARG0))), 91)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, gloveTwitterWeights, InputLayer(ARG0))), 91)
NNLearner(ARG0, OutputLayer(MorphTophatEllipse(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 2, 128), EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 1676)
NNLearner(ARG0, OutputLayer(MorphTophatEllipse(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 2, 128), EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 1676)
SVCMulti(ARG0)
SVCMulti(ARG0)
WindowCosine(AbsDiff(WindowBackmanNuttall(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2), MorphCloseCross(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, trueBool, 64), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)))
WindowCosine(AbsDiff(WindowBackmanNuttall(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2), MorphCloseCross(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, trueBool, 64), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)))
Correlation(Exponetial(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), MedianFilterHole(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, myFloatToInt(3.090550872981341), 255), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.FULL))
Correlation(Exponetial(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), MedianFilterHole(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, myFloatToInt(3.090550872981341), 255), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.FULL))
MySnapshot(ContourMaskConvex(Cv2Divide(Sine(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), Cv2Max(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), myNot(greaterThanEqual(100.0, 100.0))), EmadeDataAddInt(WienerFilter(ThresholdToZeroPixelFloat(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), lessThanOrEqual(myFloatIntSub(0.01, 128), passFloat(0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), passAxis(passAxis(passAxis(Axis.AXIS_2))), notEqual(ifThenElseFloat(ifThenElseBool(falseBool, trueBool, falseBool), passFloat(2.9900549360085655), ifThenElseFloat(trueBool, 0.01, -4.268745342159392)), myFloatIntDiv(myIntToFloat(255), myIntAdd(4, 128))))
MySnapshot(ContourMaskConvex(Cv2Divide(Sine(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), Cv2Max(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), myNot(greaterThanEqual(100.0, 100.0))), EmadeDataAddInt(WienerFilter(ThresholdToZeroPixelFloat(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), lessThanOrEqual(myFloatIntSub(0.01, 128), passFloat(0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), passAxis(passAxis(passAxis(Axis.AXIS_2))), notEqual(ifThenElseFloat(ifThenElseBool(falseBool, trueBool, falseBool), passFloat(2.9900549360085655), ifThenElseFloat(trueBool, 0.01, -4.268745342159392)), myFloatIntDiv(myIntToFloat(255), myIntAdd(4, 128))))
MyDiff(CutDataLead(Cv2Sqrt(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passBool(trueBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)))
MyDiff(CutDataLead(Cv2Sqrt(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passBool(trueBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)))
ThresholdToZeroFloat(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 0.8206458690020755)
ThresholdToZeroFloat(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 0.8206458690020755)
MorphBlackhatEllipse(WindowLanczos(CopyStreamToTarget(GetCentroids(WindowNuttal(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.STREAM_TO_STREAM), Axis.AXIS_0)), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), myIntMult(2, ifThenElseBool(myOr(equal(10.0, 0.1), ifThenElseBool(trueBool, trueBool, trueBool)), myAnd(lessThanOrEqual(10.0, 100.0), ifThenElseBool(falseBool, trueBool, falseBool)), myOr(ifThenElseBool(trueBool, trueBool, falseBool), falseBool))), equal(-1.7789343059738059, 10.0))
MorphBlackhatEllipse(WindowLanczos(CopyStreamToTarget(GetCentroids(WindowNuttal(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.STREAM_TO_STREAM), Axis.AXIS_0)), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), myIntMult(2, ifThenElseBool(myOr(equal(10.0, 0.1), ifThenElseBool(trueBool, trueBool, trueBool)), myAnd(lessThanOrEqual(10.0, 100.0), ifThenElseBool(falseBool, trueBool, falseBool)), myOr(ifThenElseBool(trueBool, trueBool, falseBool), falseBool))), equal(-1.7789343059738059, 10.0))
ScalarAdd(SEPObjectDetection(ScalarDivide(mySelFwe(WindowBartlett(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), myFloatToInt(100.0), myFloatMult(0.01, 0.1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatIntSub(myFloatDiv(100.0, 10.0), myAnd(trueBool, trueBool))), myIntAdd(lessThanOrEqual(myFloatSub(0.1, 1.0), myFloatSub(100.0, 1.0)), equal(passFloat(4.707413748836608), myFloatDiv(1.0, -0.7775053560257277))), myFloatIntSub(myIntToFloat(ifThenElseBool(trueBool, trueBool, trueBool)), myFloatToInt(myFloatIntAdd(0.01, 6))), myFloatDiv(myFloatIntSub(myFloatIntMult(0.1, 32), myIntSub(5, 77)), myFloatSub(passFloat(0.01), myIntToFloat(8)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myFloatMult(ifThenElseFloat(ifThenElseBool(lessThan(0.01, 100.0), myNot(falseBool), greaterThanEqual(0.01, 3.400231775276932)), myFloatAdd(myFloatIntSub(1.0, 64), myFloatSub(100.0, 10.0)), myFloatIntAdd(myFloatIntMult(2.8064767778458126, 64), myIntAdd(4, 10))), myFloatIntMult(passFloat(myFloatAdd(0.01, 10.0)), myIntAdd(myFloatToInt(100.0), myIntDiv(1, 6)))))
ScalarAdd(SEPObjectDetection(ScalarDivide(mySelFwe(WindowBartlett(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), myFloatToInt(100.0), myFloatMult(0.01, 0.1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatIntSub(myFloatDiv(100.0, 10.0), myAnd(trueBool, trueBool))), myIntAdd(lessThanOrEqual(myFloatSub(0.1, 1.0), myFloatSub(100.0, 1.0)), equal(passFloat(4.707413748836608), myFloatDiv(1.0, -0.7775053560257277))), myFloatIntSub(myIntToFloat(ifThenElseBool(trueBool, trueBool, trueBool)), myFloatToInt(myFloatIntAdd(0.01, 6))), myFloatDiv(myFloatIntSub(myFloatIntMult(0.1, 32), myIntSub(5, 77)), myFloatSub(passFloat(0.01), myIntToFloat(8)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myFloatMult(ifThenElseFloat(ifThenElseBool(lessThan(0.01, 100.0), myNot(falseBool), greaterThanEqual(0.01, 3.400231775276932)), myFloatAdd(myFloatIntSub(1.0, 64), myFloatSub(100.0, 10.0)), myFloatIntAdd(myFloatIntMult(2.8064767778458126, 64), myIntAdd(4, 10))), myFloatIntMult(passFloat(myFloatAdd(0.01, 10.0)), myIntAdd(myFloatToInt(100.0), myIntDiv(1, 6)))))
MorphBlackhatCross(MorphOpenRect(MyProd(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), equal(0.1, -2.637537782037951), myIntSub(97, 150)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), passBool(passBool(trueBool)), myOr(greaterThanEqual(-4.642923599793463, 4.988814147509068), lessThanOrEqual(1.0, 0.1)))
MorphBlackhatCross(MorphOpenRect(MyProd(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), equal(0.1, -2.637537782037951), myIntSub(97, 150)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), passBool(passBool(trueBool)), myOr(greaterThanEqual(-4.642923599793463, 4.988814147509068), lessThanOrEqual(1.0, 0.1)))
NNLearner(EmadeDataSubtractFloat(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0.1), InputLayer(ARG0), 100)
NNLearner(EmadeDataSubtractFloat(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0.1), InputLayer(ARG0), 100)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(8, ARG0, randomUniformWeights, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))))), 93)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(8, ARG0, randomUniformWeights, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))))), 93)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(1, ARG0, randomUniformWeights, InputLayer(ARG0))), myFloatToInt(2.634959647734199))
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(1, ARG0, randomUniformWeights, InputLayer(ARG0))), myFloatToInt(2.634959647734199))
GradientMagnitude(agglomerative_clustering(LowpassFilterUniform(Sine(MatchedFiltering2D(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 100, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), lessThan(myFloatMult(-1.597816002836654, 100.0), myFloatIntDiv(0.1, 3))), passInt(myIntAdd(notEqual(1.0, 0.01), greaterThan(100.0, 100.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), lessThan(myFloatIntMult(myFloatAdd(passFloat(100.0), myFloatDiv(0.1, 1.0)), myFloatToInt(myFloatAdd(0.1, 100.0))), myFloatAdd(myFloatIntMult(myFloatIntSub(0.01, 5), notEqual(0.01, 0.1)), myFloatIntDiv(myFloatMult(100.0, 10.0), 100))))
GradientMagnitude(agglomerative_clustering(LowpassFilterUniform(Sine(MatchedFiltering2D(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 100, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), lessThan(myFloatMult(-1.597816002836654, 100.0), myFloatIntDiv(0.1, 3))), passInt(myIntAdd(notEqual(1.0, 0.01), greaterThan(100.0, 100.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), lessThan(myFloatIntMult(myFloatAdd(passFloat(100.0), myFloatDiv(0.1, 1.0)), myFloatToInt(myFloatAdd(0.1, 100.0))), myFloatAdd(myFloatIntMult(myFloatIntSub(0.01, 5), notEqual(0.01, 0.1)), myFloatIntDiv(myFloatMult(100.0, 10.0), 100))))
MaxLoc(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0)
MaxLoc(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0)
ToFloat(EmadeDataSubtractFloat(ThresholdBinaryMax(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, falseBool, 0.1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myFloatAdd(0.1, 100.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)))
ToFloat(EmadeDataSubtractFloat(ThresholdBinaryMax(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, falseBool, 0.1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myFloatAdd(0.1, 100.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)))
OtsuBinaryThreshold(MorphErosionCross(MorphCloseEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 50, 64), TriState.FEATURES_TO_FEATURES, passAxis(Axis.FULL), myNot(falseBool), myIntDiv(55, 2), notEqual(0.1, 1.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myOr(lessThan(10.0, 0.1), equal(100.0, 0.1)))
OtsuBinaryThreshold(MorphErosionCross(MorphCloseEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 50, 64), TriState.FEATURES_TO_FEATURES, passAxis(Axis.FULL), myNot(falseBool), myIntDiv(55, 2), notEqual(0.1, 1.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myOr(lessThan(10.0, 0.1), equal(100.0, 0.1)))
ConvertToCounts(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL)
ConvertToCounts(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL)
LabelObjects(ContourMaskRangeEnclosingCircle(StdDeviationHoleCustom(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.AXIS_0, 2, 100), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myAnd(falseBool, trueBool), equal(4.1147400477222185, 10.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)))
LabelObjects(ContourMaskRangeEnclosingCircle(StdDeviationHoleCustom(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.AXIS_0, 2, 100), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myAnd(falseBool, trueBool), equal(4.1147400477222185, 10.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)))
MaxLoc(ScalarAdd(ScalarMultiply(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myFloatDiv(0.01, 0.1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)))
MaxLoc(ScalarAdd(ScalarMultiply(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myFloatDiv(0.01, 0.1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)))
MyAutoCorr(Cv2LessThan(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.FULL, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0))
MyAutoCorr(Cv2LessThan(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.FULL, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0))
EmadeDataDivideInt(LinearPredictiveCoding(LocalPoolingMax(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 3001), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myIntMult(33, 10)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), myIntSub(greaterThanEqual(10.0, 2.8006264467555315), notEqual(-4.44963090831692, 1.0)))
EmadeDataDivideInt(LinearPredictiveCoding(LocalPoolingMax(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 3001), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myIntMult(33, 10)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), myIntSub(greaterThanEqual(10.0, 2.8006264467555315), notEqual(-4.44963090831692, 1.0)))
MySnapshot(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.AXIS_2, falseBool)
MySnapshot(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.AXIS_2, falseBool)
ContoursMinLength(DBSCANClustering(ARG0, 100.0, 10.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myOr(trueBool, trueBool))
ContoursMinLength(DBSCANClustering(ARG0, 100.0, 10.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myOr(trueBool, trueBool))
EmadeDataMultiplyFloat(MultiplyTransposed(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, falseBool), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), myFloatIntDiv(0.01, 128))
EmadeDataMultiplyFloat(MultiplyTransposed(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, falseBool), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), myFloatIntDiv(0.01, 128))
WindowBlackman(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0.01)
WindowBlackman(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0.01)
SavitzkyGolayFilter(SetToZeroIf>Data&Factor(SkiMedianFilter(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 1), ContourMaskMaxExtent(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 3), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0), myFloatSub(1.885127610875558, 1.1655546080048769)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), greaterThanEqual(passFloat(0.01), myFloatSub(100.0, 100.0)), passInt(equal(0.1, 0.01)), passBool(lessThan(0.01, 10.0)))
SavitzkyGolayFilter(SetToZeroIf>Data&Factor(SkiMedianFilter(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 1), ContourMaskMaxExtent(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 3), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0), myFloatSub(1.885127610875558, 1.1655546080048769)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), greaterThanEqual(passFloat(0.01), myFloatSub(100.0, 100.0)), passInt(equal(0.1, 0.01)), passBool(lessThan(0.01, 10.0)))
WindowLanczos(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0)
WindowLanczos(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0)
ScalarMultiply(myPCA(ARG0, TriState.FEATURES_TO_FEATURES, 55, trueBool), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myFloatIntSub(0.1, 8))
ScalarMultiply(myPCA(ARG0, TriState.FEATURES_TO_FEATURES, 55, trueBool), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myFloatIntSub(0.1, 8))
MyNorm(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 3)
MyNorm(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 3)
Hog(Learner(ARG0, LearnerType('DECISION_TREE', {'criterion': 0, 'splitter': 0}), EnsembleType('SINGLE', None)), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myOr(falseBool, falseBool), myIntSub(85, 128), ifThenElseBool(falseBool, falseBool, falseBool), greaterThanEqual(0.01, 10.0))
Hog(Learner(ARG0, LearnerType('DECISION_TREE', {'criterion': 0, 'splitter': 0}), EnsembleType('SINGLE', None)), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myOr(falseBool, falseBool), myIntSub(85, 128), ifThenElseBool(falseBool, falseBool, falseBool), greaterThanEqual(0.01, 10.0))
MorphCloseCross(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 41, 64)
MorphCloseCross(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 41, 64)
WindowTriangular(Cv2Subtract(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2))
WindowTriangular(Cv2Subtract(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2))
mySelPercentile(WindowBartlett(ToFloatNorm(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), myIntAdd(myIntSub(8, trueBool), myNot(falseBool)), equal(myFloatIntMult(10.0, 7), myFloatSub(1.0, 100.0)))
mySelPercentile(WindowBartlett(ToFloatNorm(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), myIntAdd(myIntSub(8, trueBool), myNot(falseBool)), equal(myFloatIntMult(10.0, 7), myFloatSub(1.0, 100.0)))
ContourMaskMaxSolidity(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 10.0)
ContourMaskMaxSolidity(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 10.0)
MorphErosionCross(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0, 4, 1)
MorphErosionCross(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0, 4, 1)
MatchedFiltering(ThresholdNLargest(Cv2AbsDiff(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), lessThanOrEqual(10.0, 2.5764281868743737)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), lessThanOrEqual(myFloatIntDiv(0.4779435682124582, 7), myFloatIntMult(0.01, falseBool)))
MatchedFiltering(ThresholdNLargest(Cv2AbsDiff(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), lessThanOrEqual(10.0, 2.5764281868743737)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), lessThanOrEqual(myFloatIntDiv(0.4779435682124582, 7), myFloatIntMult(0.01, falseBool)))
mySelFpr(EmadeDataDivideInt(ContourMaskMaxLength(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 0.01), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myOr(trueBool, falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passBool(passBool(trueBool)), myFloatIntMult(passFloat(0.1), myFloatToInt(100.0)))
mySelFpr(EmadeDataDivideInt(ContourMaskMaxLength(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 0.01), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myOr(trueBool, falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passBool(passBool(trueBool)), myFloatIntMult(passFloat(0.1), myFloatToInt(100.0)))
RXAnomalyDetector(mySelFwe(ARG0, TriState.FEATURES_TO_FEATURES, 33, 10.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), ifThenElseFloat(trueBool, 1.0, 100.0))
RXAnomalyDetector(mySelFwe(ARG0, TriState.FEATURES_TO_FEATURES, 33, 10.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), ifThenElseFloat(trueBool, 1.0, 100.0))
RemoveFeature(ThresholdBinaryInverse(ContourMaskMinSolidity(ContoursMaxArea(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myIntMult(32, 43)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), myFloatAdd(myFloatIntMult(0.01, 4684), myFloatDiv(100.0, 0.1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(Axis.AXIS_0), notEqual(myFloatMult(myFloatIntSub(0.01, 55), myFloatMult(-1.2501876193811476, 1.0)), myFloatSub(myFloatSub(1.0, 0.1), myFloatMult(100.0, 0.1))))
RemoveFeature(ThresholdBinaryInverse(ContourMaskMinSolidity(ContoursMaxArea(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myIntMult(32, 43)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), myFloatAdd(myFloatIntMult(0.01, 4684), myFloatDiv(100.0, 0.1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(Axis.AXIS_0), notEqual(myFloatMult(myFloatIntSub(0.01, 55), myFloatMult(-1.2501876193811476, 1.0)), myFloatSub(myFloatSub(1.0, 0.1), myFloatMult(100.0, 0.1))))
LinearPredictiveCoding(ContourMaskMaxExtentEnclosingCircle(Cv2Sqrt(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), ifThenElseFloat(trueBool, -0.9281117867906712, 100.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), ifThenElseBool(myNot(falseBool), greaterThanEqual(100.0, 100.0), lessThanOrEqual(1.2315595898088718, 1.0)))
LinearPredictiveCoding(ContourMaskMaxExtentEnclosingCircle(Cv2Sqrt(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), ifThenElseFloat(trueBool, -0.9281117867906712, 100.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), ifThenElseBool(myNot(falseBool), greaterThanEqual(100.0, 100.0), lessThanOrEqual(1.2315595898088718, 1.0)))
MorphDilateEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 9, 8, 6)
MorphDilateEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 9, 8, 6)
Sine(MorphBlackhatCross(ContourMask(CreateBBox(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_2, 0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), greaterThan(myFloatIntDiv(0.1, 50), ifThenElseFloat(trueBool, 1.7802122587595708, -2.762997359660384)), notEqual(myFloatSub(0.01, 1.0), passFloat(1.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))))
Sine(MorphBlackhatCross(ContourMask(CreateBBox(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_2, 0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), greaterThan(myFloatIntDiv(0.1, 50), ifThenElseFloat(trueBool, 1.7802122587595708, -2.762997359660384)), notEqual(myFloatSub(0.01, 1.0), passFloat(1.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))))
SetToZeroIf>Data&Factor(EmadeDataSubtractInt(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 128), ContoursMaxArea(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 6), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_2), myFloatDiv(1.0, 100.0))
SetToZeroIf>Data&Factor(EmadeDataSubtractInt(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 128), ContoursMaxArea(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 6), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_2), myFloatDiv(1.0, 100.0))
SubtractSaturate(agglomerative_clustering(ContourMaskRangeSolidity(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 0.1, 0.1), greaterThan(0.1, 1.0)), MorphDilateEllipse(WindowGaussian(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 10.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), ifThenElseBool(trueBool, trueBool, trueBool), myIntMult(55, 128), myAnd(trueBool, trueBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), passAxis(passAxis(Axis.AXIS_1)))
SubtractSaturate(agglomerative_clustering(ContourMaskRangeSolidity(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 0.1, 0.1), greaterThan(0.1, 1.0)), MorphDilateEllipse(WindowGaussian(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 10.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), ifThenElseBool(trueBool, trueBool, trueBool), myIntMult(55, 128), myAnd(trueBool, trueBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), passAxis(passAxis(Axis.AXIS_1)))
SepDetectionWindow(NumNamedEntities(WindowTriangular(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2)), greaterThanEqual(myFloatAdd(0.1, 0.1), myFloatAdd(0.01, 1.0)), lessThan(myFloatIntDiv(4.235158959516594, 3), myFloatDiv(10.0, 1.0)), myFloatIntSub(myFloatIntMult(-2.6341564729661773, 64), myAnd(trueBool, falseBool)))
SepDetectionWindow(NumNamedEntities(WindowTriangular(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2)), greaterThanEqual(myFloatAdd(0.1, 0.1), myFloatAdd(0.01, 1.0)), lessThan(myFloatIntDiv(4.235158959516594, 3), myFloatDiv(10.0, 1.0)), myFloatIntSub(myFloatIntMult(-2.6341564729661773, 64), myAnd(trueBool, falseBool)))
MorphOpenRect(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 7, 1)
MorphOpenRect(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 7, 1)
ToFloat(BayesMulti(ARG0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0))
ToFloat(BayesMulti(ARG0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0))
Cv2AddWeighted(Exponetial(MorphDilateEllipse(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 2347, 1649, 8307), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0)), ConvertBW(MyAverager(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 2), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passAxis(passAxis(Axis.AXIS_0)), myAnd(myOr(falseBool, trueBool), greaterThanEqual(-2.4928735414124557, 0.01)), greaterThanEqual(passFloat(4.561744318161821), myFloatIntMult(10.0, 10)))
Cv2AddWeighted(Exponetial(MorphDilateEllipse(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 2347, 1649, 8307), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0)), ConvertBW(MyAverager(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 2), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passAxis(passAxis(Axis.AXIS_0)), myAnd(myOr(falseBool, trueBool), greaterThanEqual(-2.4928735414124557, 0.01)), greaterThanEqual(passFloat(4.561744318161821), myFloatIntMult(10.0, 10)))
AdjustConstrastGamma(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 0.1, 100.0)
AdjustConstrastGamma(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 0.1, 100.0)
MorphBlackhatEllipse(MySum(ThresholdNLargest(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 50), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myIntAdd(greaterThanEqual(10.0, 100.0), lessThanOrEqual(10.0, 0.1)), myIntSub(myFloatToInt(0.01), myIntMult(1, 7)))
MorphBlackhatEllipse(MySum(ThresholdNLargest(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 50), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myIntAdd(greaterThanEqual(10.0, 100.0), lessThanOrEqual(10.0, 0.1)), myIntSub(myFloatToInt(0.01), myIntMult(1, 7)))
AdjustConstrastGamma(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 100.0, 0.1)
AdjustConstrastGamma(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 100.0, 0.1)
ThresholdBinaryInverse(ThresholdBinaryInverse(MinimumToZero(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myFloatIntMult(1.0, 4)), passTriState(TriState.STREAM_TO_STREAM), Axis.AXIS_2, myFloatIntDiv(1.0, passInt(10)))
ThresholdBinaryInverse(ThresholdBinaryInverse(MinimumToZero(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myFloatIntMult(1.0, 4)), passTriState(TriState.STREAM_TO_STREAM), Axis.AXIS_2, myFloatIntDiv(1.0, passInt(10)))
MyBinaryThreshold(Cv2GreaterThanOrEqual(ArcCosine(Supersampling(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 3.39836702480744, 100), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), ContourMaskMinSolidity(Cv2RMS(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 1), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), equal(1.0, 0.01)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatMult(passFloat(myFloatIntMult(100.0, 64)), myFloatSub(myFloatSub(0.1, 1.1306762020891234), myFloatIntDiv(-4.312564719857537, falseBool))))
MyBinaryThreshold(Cv2GreaterThanOrEqual(ArcCosine(Supersampling(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 3.39836702480744, 100), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), ContourMaskMinSolidity(Cv2RMS(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 1), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), equal(1.0, 0.01)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatMult(passFloat(myFloatIntMult(100.0, 64)), myFloatSub(myFloatSub(0.1, 1.1306762020891234), myFloatIntDiv(-4.312564719857537, falseBool))))
GetCentroids(FilterCentroids(EdgeDetectionCanny(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 100, 7, 6)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)))
GetCentroids(FilterCentroids(EdgeDetectionCanny(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 100, 7, 6)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)))
mySelKBest(ARG0, TriState.FEATURES_TO_FEATURES, trueBool, 4)
mySelKBest(ARG0, TriState.FEATURES_TO_FEATURES, trueBool, 4)
SVCMulti(MorphDilateRect(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 255, 1235, 11))
SVCMulti(MorphDilateRect(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 255, 1235, 11))
Select1D(mySelFpr(ARG0, TriState.FEATURES_TO_FEATURES, 100, 100.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passBool(trueBool), lessThanOrEqual(100.0, 100.0))
Select1D(mySelFpr(ARG0, TriState.FEATURES_TO_FEATURES, 100, 100.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passBool(trueBool), lessThanOrEqual(100.0, 100.0))
RMS2D(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 55)
RMS2D(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 55)
FFT(ThresholdNLargestBinary(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 50), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1))
FFT(ThresholdNLargestBinary(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 50), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1))
b-spline(MultiplyTransposed(NNLearner(MorphOpenRect(ContourMaskMinArea(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, -4.155279944753118), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), lessThan(10.0, 2.032969916928846), greaterThan(0.1, 4.7530838391306105)), DropoutLayer(myFloatMult(0.01, 10.0), DenseLayer(100, 50, EmbeddingLayer(7, ARG0, heWeights, InputLayer(ARG0)))), lessThan(myFloatDiv(0.1, 0.01), myFloatDiv(0.1, 100.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_0))), lessThanOrEqual(passFloat(myFloatIntMult(100.0, 8)), myFloatSub(myFloatIntAdd(-3.011508015127957, 6), myFloatDiv(0.01, 10.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))))
new node
FlattenLayer
b-spline(MultiplyTransposed(NNLearner(MorphOpenRect(ContourMaskMinArea(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, -4.155279944753118), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), lessThan(10.0, 2.032969916928846), greaterThan(0.1, 4.7530838391306105)), DropoutLayer(myFloatMult(0.01, 10.0), FlattenLayer(EmbeddingLayer(7, ARG0, heWeights, InputLayer(ARG0)))), lessThan(myFloatDiv(0.1, 0.01), myFloatDiv(0.1, 100.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_0))), lessThanOrEqual(passFloat(myFloatIntMult(100.0, 8)), myFloatSub(myFloatIntAdd(-3.011508015127957, 6), myFloatDiv(0.01, 10.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))))
WindowBartlettHann(EqualizeAdaptHist(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 10.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1))
WindowBartlettHann(EqualizeAdaptHist(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 10.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1))
Cv2GreaterThan(NumpyDivide(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_2, Axis.AXIS_2), MorphGradientEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 4, 25), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_1))
Cv2GreaterThan(NumpyDivide(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_2, Axis.AXIS_2), MorphGradientEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 4, 25), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_1))
MeanFilter(MorphGradientEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, falseBool, 8), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), passBool(falseBool))
MeanFilter(MorphGradientEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, falseBool, 8), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), passBool(falseBool))
MorphTophatEllipse(EqualizeHist(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), notEqual(0.8948654495074706, 0.01), ifThenElseBool(trueBool, trueBool, trueBool))
MorphTophatEllipse(EqualizeHist(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), notEqual(0.8948654495074706, 0.01), ifThenElseBool(trueBool, trueBool, trueBool))
WindowCosine(ThresholdToZero(myPCA(ContourMask(Select3D(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 0, 1002, 7, 10, 4, 9), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passInt(notEqual(10.0, 0.01)), greaterThanEqual(myIntToFloat(6), myIntToFloat(trueBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myFloatMult(myFloatIntMult(ifThenElseFloat(trueBool, 10.0, 0.1), myAnd(falseBool, falseBool)), myFloatSub(myIntToFloat(150), myFloatDiv(100.0, -0.2193816702640552)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))))
WindowCosine(ThresholdToZero(myPCA(ContourMask(Select3D(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 0, 1002, 7, 10, 4, 9), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passInt(notEqual(10.0, 0.01)), greaterThanEqual(myIntToFloat(6), myIntToFloat(trueBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myFloatMult(myFloatIntMult(ifThenElseFloat(trueBool, 10.0, 0.1), myAnd(falseBool, falseBool)), myFloatSub(myIntToFloat(150), myFloatDiv(100.0, -0.2193816702640552)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))))
ConvertBW(WindowBackmanNuttall(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2))
ConvertBW(WindowBackmanNuttall(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2))
EmadeDataNumpyMultiplyInt(WindowBackmanNuttall(Cv2Subtract(MyCumProd(Cv2Min(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), greaterThanEqual(100.0, 100.0)), CountVectorizer(myVarThresh(ARG0, TriState.STREAM_TO_FEATURES, 100.0), ifThenElseBool(trueBool, trueBool, trueBool), myIntAdd(9, 1), passBool(falseBool), equal(100.0, 0.1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), notEqual(myFloatAdd(myFloatAdd(myFloatIntSub(1.0, 1), myFloatSub(1.0, 1.0)), myFloatIntDiv(myFloatIntDiv(10.0, 775), myIntDiv(6, 0))), myFloatMult(myFloatAdd(myFloatSub(1.0, 0.01), myFloatIntMult(0.01, 150)), myFloatIntAdd(myIntToFloat(4), myAnd(trueBool, trueBool)))))
EmadeDataNumpyMultiplyInt(WindowBackmanNuttall(Cv2Subtract(MyCumProd(Cv2Min(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), greaterThanEqual(100.0, 100.0)), CountVectorizer(myVarThresh(ARG0, TriState.STREAM_TO_FEATURES, 100.0), ifThenElseBool(trueBool, trueBool, trueBool), myIntAdd(9, 1), passBool(falseBool), equal(100.0, 0.1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), notEqual(myFloatAdd(myFloatAdd(myFloatIntSub(1.0, 1), myFloatSub(1.0, 1.0)), myFloatIntDiv(myFloatIntDiv(10.0, 775), myIntDiv(6, 0))), myFloatMult(myFloatAdd(myFloatSub(1.0, 0.01), myFloatIntMult(0.01, 150)), myFloatIntAdd(myIntToFloat(4), myAnd(trueBool, trueBool)))))
ContoursMaxLength(ThresholdNLargestBinary(AffinityPropagationClustering(Cv2Multiply(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_2), myIntToFloat(100)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), lessThan(myFloatMult(-0.6299447199772965, 0.01), myFloatIntAdd(0.1, 255))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myIntMult(passInt(myIntMult(255, 2)), myOr(ifThenElseBool(trueBool, falseBool, trueBool), ifThenElseBool(trueBool, trueBool, trueBool))))
ContoursMaxLength(ThresholdNLargestBinary(AffinityPropagationClustering(Cv2Multiply(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_2), myIntToFloat(100)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), lessThan(myFloatMult(-0.6299447199772965, 0.01), myFloatIntAdd(0.1, 255))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myIntMult(passInt(myIntMult(255, 2)), myOr(ifThenElseBool(trueBool, falseBool, trueBool), ifThenElseBool(trueBool, trueBool, trueBool))))
Hog(EmadeDataAddInt(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 32), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), myAnd(trueBool, falseBool), equal(-3.0637399130816254, 10.0), myOr(falseBool, trueBool), ifThenElseBool(trueBool, falseBool, trueBool))
Hog(EmadeDataAddInt(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 32), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), myAnd(trueBool, falseBool), equal(-3.0637399130816254, 10.0), myOr(falseBool, trueBool), ifThenElseBool(trueBool, falseBool, trueBool))
EqualizeDisk(ARG0, passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myIntDiv(passInt(-1), myIntSub(50, 5)))
EqualizeDisk(ARG0, passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myIntDiv(passInt(-1), myIntSub(50, 5)))
FilterCentroids(ContourMaskMinEquDiameter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, falseBool))
FilterCentroids(ContourMaskMinEquDiameter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, falseBool))
DohDetection(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 0.1, 0.1, 150, 2.6768846072222026, 1.6931563141840966)
DohDetection(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 0.1, 0.1, 150, 2.6768846072222026, 1.6931563141840966)
ZeroOneNorm(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1)
ZeroOneNorm(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1)
EmadeDataMultiplyPair(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_0)
EmadeDataMultiplyPair(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_0)
MinLoc(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2)
MinLoc(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2)
Select3D(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 59, falseBool, 150, 128, 32, 8)
Select3D(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 59, falseBool, 150, 128, 32, 8)
MorphErosionCross(WindowLanczos(MeanWithHole(SkiMedianFilter(SEPObjectDetection(ARG0, 64, 10.0, 1.3907739214601715), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passBool(falseBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), 2, ifThenElseBool(myNot(falseBool), myAnd(trueBool, falseBool), greaterThan(1.0, 10.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1)))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myIntSub(greaterThanEqual(passFloat(myFloatIntMult(1.0, 3365)), 0.1), equal(ifThenElseFloat(myNot(falseBool), myFloatIntAdd(1.9621240081754996, 100), myFloatSub(1.0, 1.0)), myFloatIntAdd(myFloatIntAdd(100.0, 8), myIntAdd(50, trueBool)))), passInt(myIntSub(myIntSub(ifThenElseBool(falseBool, falseBool, trueBool), notEqual(0.01, 100.0)), myAnd(trueBool, lessThan(0.01, 10.0)))), 5)
MorphErosionCross(WindowLanczos(MeanWithHole(SkiMedianFilter(SEPObjectDetection(ARG0, 64, 10.0, 1.3907739214601715), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passBool(falseBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), 2, ifThenElseBool(myNot(falseBool), myAnd(trueBool, falseBool), greaterThan(1.0, 10.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1)))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myIntSub(greaterThanEqual(passFloat(myFloatIntMult(1.0, 3365)), 0.1), equal(ifThenElseFloat(myNot(falseBool), myFloatIntAdd(1.9621240081754996, 100), myFloatSub(1.0, 1.0)), myFloatIntAdd(myFloatIntAdd(100.0, 8), myIntAdd(50, trueBool)))), passInt(myIntSub(myIntSub(ifThenElseBool(falseBool, falseBool, trueBool), notEqual(0.01, 100.0)), myAnd(trueBool, lessThan(0.01, 10.0)))), 5)
LowpassFourierShift(MySnapshot(MorphCloseRect(ContourMaskMaxSolidity(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 1.0), TriState.STREAM_TO_FEATURES, passAxis(Axis.FULL), equal(0.01, 10.0), passBool(falseBool)), Round(ContourMaskMaxExtentEnclosingCircle(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 0.1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(Axis.FULL), myIntAdd(myIntAdd(4, 7), myOr(falseBool, falseBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL))), 7)
LowpassFourierShift(MySnapshot(MorphCloseRect(ContourMaskMaxSolidity(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 1.0), TriState.STREAM_TO_FEATURES, passAxis(Axis.FULL), equal(0.01, 10.0), passBool(falseBool)), Round(ContourMaskMaxExtentEnclosingCircle(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 0.1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(Axis.FULL), myIntAdd(myIntAdd(4, 7), myOr(falseBool, falseBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL))), 7)
birch_clustering(WindowBlackman(ArcTangent(EmadeDataMultiplyInt(MyDWT(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 61), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), greaterThan(0.01, 0.1)), TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myFloatAdd(ifThenElseFloat(greaterThanEqual(10.0, 100.0), myFloatMult(0.1, 1.0), myFloatSub(0.1, 0.1)), myFloatSub(myFloatDiv(0.1, 0.1), myIntToFloat(6)))), myFloatDiv(myIntToFloat(greaterThanEqual(myFloatDiv(0.1, 1.0), passFloat(0.01))), myFloatIntSub(myFloatIntMult(myIntToFloat(6), lessThanOrEqual(-0.051486290484572095, -1.769474421690055)), myFloatToInt(myIntToFloat(55)))), myOr(trueBool, myOr(greaterThan(myFloatIntMult(1.0, 6), myFloatIntSub(0.01, 1)), lessThan(myFloatSub(0.1, 0.01), myFloatIntMult(0.1, 8)))), passInt(passInt(greaterThanEqual(100.0, myFloatSub(1.0, 0.01)))))
birch_clustering(WindowBlackman(ArcTangent(EmadeDataMultiplyInt(MyDWT(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 61), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), greaterThan(0.01, 0.1)), TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myFloatAdd(ifThenElseFloat(greaterThanEqual(10.0, 100.0), myFloatMult(0.1, 1.0), myFloatSub(0.1, 0.1)), myFloatSub(myFloatDiv(0.1, 0.1), myIntToFloat(6)))), myFloatDiv(myIntToFloat(greaterThanEqual(myFloatDiv(0.1, 1.0), passFloat(0.01))), myFloatIntSub(myFloatIntMult(myIntToFloat(6), lessThanOrEqual(-0.051486290484572095, -1.769474421690055)), myFloatToInt(myIntToFloat(55)))), myOr(trueBool, myOr(greaterThan(myFloatIntMult(1.0, 6), myFloatIntSub(0.01, 1)), lessThan(myFloatSub(0.1, 0.01), myFloatIntMult(0.1, 8)))), passInt(passInt(greaterThanEqual(100.0, myFloatSub(1.0, 0.01)))))
Select3D(ARG0, passTriState(passTriState(TriState.STREAM_TO_STREAM)), Axis.AXIS_1, ifThenElseBool(ifThenElseBool(trueBool, trueBool, trueBool), myNot(trueBool), myOr(trueBool, trueBool)), myIntMult(ifThenElseBool(trueBool, falseBool, falseBool), equal(0.01, 0.1)), myNot(trueBool), falseBool, myOr(myNot(trueBool), ifThenElseBool(trueBool, trueBool, falseBool)), myAnd(lessThanOrEqual(100.0, 0.1), lessThanOrEqual(3.189531934735939, 100.0)))
Select3D(ARG0, passTriState(passTriState(TriState.STREAM_TO_STREAM)), Axis.AXIS_1, ifThenElseBool(ifThenElseBool(trueBool, trueBool, trueBool), myNot(trueBool), myOr(trueBool, trueBool)), myIntMult(ifThenElseBool(trueBool, falseBool, falseBool), equal(0.01, 0.1)), myNot(trueBool), falseBool, myOr(myNot(trueBool), ifThenElseBool(trueBool, trueBool, falseBool)), myAnd(lessThanOrEqual(100.0, 0.1), lessThanOrEqual(3.189531934735939, 100.0)))
ContourMaskMaxSolidity(GetCentroids(ToUint8Scale(MultiplySpectrum(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(Axis.AXIS_2)), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), -2.191485714965371)
ContourMaskMaxSolidity(GetCentroids(ToUint8Scale(MultiplySpectrum(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(Axis.AXIS_2)), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), -2.191485714965371)
EdgeDetectionCanny(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 10, 6, 9)
EdgeDetectionCanny(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 10, 6, 9)
BitwiseNOT(ImagePeakFinder(Cv2AbsDiff(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_2, Axis.AXIS_1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL)), TriState.STREAM_TO_FEATURES, passAxis(passAxis(Axis.AXIS_2)))
BitwiseNOT(ImagePeakFinder(Cv2AbsDiff(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_2, Axis.AXIS_1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL)), TriState.STREAM_TO_FEATURES, passAxis(passAxis(Axis.AXIS_2)))
MyDiff(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1)
MyDiff(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1)
Cosine(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL)
Cosine(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL)
BitwiseOr(HighpassFourierGaussian(ContourMaskMaxExtent(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 4), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), notEqual(1.0, 0.01)), ScalarSubtract(MorphErosionEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 0, 32, 77), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatDiv(0.01, 100.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passAxis(passAxis(Axis.AXIS_2)))
BitwiseOr(HighpassFourierGaussian(ContourMaskMaxExtent(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 4), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), notEqual(1.0, 0.01)), ScalarSubtract(MorphErosionEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 0, 32, 77), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatDiv(0.01, 100.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passAxis(passAxis(Axis.AXIS_2)))
DBSCANClustering(ContourMaskMinArea(WindowLanczos(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myIntToFloat(6)), myFloatIntSub(myFloatIntAdd(0.1, 0), greaterThan(-3.0488925576405923, 10.0)), ifThenElseFloat(passBool(falseBool), myIntToFloat(8), myFloatIntSub(100.0, 5)))
DBSCANClustering(ContourMaskMinArea(WindowLanczos(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myIntToFloat(6)), myFloatIntSub(myFloatIntAdd(0.1, 0), greaterThan(-3.0488925576405923, 10.0)), ifThenElseFloat(passBool(falseBool), myIntToFloat(8), myFloatIntSub(100.0, 5)))
FractionTriple(RandomUniform(ConvertBW(Learner(SetToZeroIf<Data&Factor(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_1, 255), ModifyLearnerFloat(LearnerType('KNN', {'K': 3, 'weights': 0}), 0.01, falseBool), ModifyEnsembleInt(EnsembleType('GRID', None), 255, 2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myNot(lessThan(myFloatSub(100.0, 10.0), ifThenElseFloat(trueBool, 1.0, 0.01))), notEqual(myFloatIntSub(myFloatAdd(100.0, 1.0), myIntSub(9, 6)), myFloatMult(myFloatSub(0.1, 0.1), myFloatIntMult(0.01, 100)))), EmadeDataNumpyMultiplyFloat(MyBinaryThreshold(BitwiseOr(AdjustConstrastLog(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 100.0), GradientWeighted(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 1, 1.0, 100.0), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatSub(myIntToFloat(97), myFloatIntAdd(100.0, 29))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatIntAdd(myIntToFloat(greaterThan(0.01, 100.0)), passInt(myIntMult(11, 150)))), StdDeviationHole(MorphOpenCross(MorphCloseCross(MorphBlackhatRect(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 50, 10), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), greaterThanEqual(0.1, 0.1), myFloatToInt(-1.0399429945978267)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passBool(greaterThanEqual(1.8066201072486088, 100.0)), passBool(equal(10.0, -4.261701765953674))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myAnd(lessThan(myFloatIntDiv(-4.845624744776469, 10), myIntToFloat(3)), myNot(greaterThanEqual(0.1, 0.01))), myIntSub(greaterThanEqual(myFloatIntMult(1.5849853581349578, 8), myFloatMult(0.1, 0.01)), myAnd(passBool(falseBool), notEqual(0.01, 10.0)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), myIntAdd(myOr(lessThan(ifThenElseFloat(trueBool, -4.885915295047991, 100.0), myFloatIntSub(100.0, 10)), myAnd(myOr(falseBool, falseBool), myAnd(falseBool, trueBool))), myIntDiv(myAnd(equal(10.0, 0.9737817647001012), notEqual(10.0, 0.01)), myFloatToInt(myFloatAdd(1.0, 0.13351988622046562)))))
FractionTriple(RandomUniform(ConvertBW(Learner(SetToZeroIf<Data&Factor(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_1, 255), ModifyLearnerFloat(LearnerType('KNN', {'K': 3, 'weights': 0}), 0.01, falseBool), ModifyEnsembleInt(EnsembleType('GRID', None), 255, 2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myNot(lessThan(myFloatSub(100.0, 10.0), ifThenElseFloat(trueBool, 1.0, 0.01))), notEqual(myFloatIntSub(myFloatAdd(100.0, 1.0), myIntSub(9, 6)), myFloatMult(myFloatSub(0.1, 0.1), myFloatIntMult(0.01, 100)))), EmadeDataNumpyMultiplyFloat(MyBinaryThreshold(BitwiseOr(AdjustConstrastLog(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 100.0), GradientWeighted(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 1, 1.0, 100.0), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatSub(myIntToFloat(97), myFloatIntAdd(100.0, 29))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatIntAdd(myIntToFloat(greaterThan(0.01, 100.0)), passInt(myIntMult(11, 150)))), StdDeviationHole(MorphOpenCross(MorphCloseCross(MorphBlackhatRect(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 50, 10), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), greaterThanEqual(0.1, 0.1), myFloatToInt(-1.0399429945978267)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passBool(greaterThanEqual(1.8066201072486088, 100.0)), passBool(equal(10.0, -4.261701765953674))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myAnd(lessThan(myFloatIntDiv(-4.845624744776469, 10), myIntToFloat(3)), myNot(greaterThanEqual(0.1, 0.01))), myIntSub(greaterThanEqual(myFloatIntMult(1.5849853581349578, 8), myFloatMult(0.1, 0.01)), myAnd(passBool(falseBool), notEqual(0.01, 10.0)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), myIntAdd(myOr(lessThan(ifThenElseFloat(trueBool, -4.885915295047991, 100.0), myFloatIntSub(100.0, 10)), myAnd(myOr(falseBool, falseBool), myAnd(falseBool, trueBool))), myIntDiv(myAnd(equal(10.0, 0.9737817647001012), notEqual(10.0, 0.01)), myFloatToInt(myFloatAdd(1.0, 0.13351988622046562)))))
ToFloat(LabelByCenterOfMass(Cv2LessThanOrEqual(MaximumWindow(Cv2Pow(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 10), lessThanOrEqual(4.414045886095607, 0.1), equal(1.0, 3.6560382364737993), passFloat(1.0)), SpectralFilter(MorphErosionCross(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, trueBool, 8, 100), BitwiseOr(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.FULL), NumNamedEntities(ARG0), SelectRange(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 91, 5), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_1), passAxis(Axis.FULL), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.AXIS_1))), RXAnomalyDetector(Select3D(SetToZeroIf<Data&Factor(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.FULL, Axis.FULL, trueBool), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myIntMult(5, 255), myOr(trueBool, trueBool), myFloatToInt(10.0), passBool(trueBool), myIntMult(3, 2), greaterThanEqual(10.0, -1.3940504926993191)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myFloatIntMult(myFloatDiv(0.1, -1.4302727964896533), equal(0.01, 10.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), passAxis(passAxis(passAxis(Axis.FULL)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))))
ToFloat(LabelByCenterOfMass(Cv2LessThanOrEqual(MaximumWindow(Cv2Pow(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 10), lessThanOrEqual(4.414045886095607, 0.1), equal(1.0, 3.6560382364737993), passFloat(1.0)), SpectralFilter(MorphErosionCross(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, trueBool, 8, 100), BitwiseOr(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.FULL), NumNamedEntities(ARG0), SelectRange(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 91, 5), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_1), passAxis(Axis.FULL), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.AXIS_1))), RXAnomalyDetector(Select3D(SetToZeroIf<Data&Factor(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.FULL, Axis.FULL, trueBool), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myIntMult(5, 255), myOr(trueBool, trueBool), myFloatToInt(10.0), passBool(trueBool), myIntMult(3, 2), greaterThanEqual(10.0, -1.3940504926993191)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myFloatIntMult(myFloatDiv(0.1, -1.4302727964896533), equal(0.01, 10.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), passAxis(passAxis(passAxis(Axis.FULL)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))))
ArcCosine(EmadeDataNumpyMultiplyPair(RandomShuffle(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), ARG0, passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_1)), TriState.STREAM_TO_STREAM, passAxis(passAxis(Axis.AXIS_2)))
ArcCosine(EmadeDataNumpyMultiplyPair(RandomShuffle(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), ARG0, passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_1)), TriState.STREAM_TO_STREAM, passAxis(passAxis(Axis.AXIS_2)))
ToFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL)
ToFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL)
ArcSine(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1)
ArcSine(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1)
Cv2RMS(LowpassFilterUniform(ContourMaskMinAspectRatio(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 1.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), lessThanOrEqual(0.1, 10.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myOr(myNot(falseBool), ifThenElseBool(trueBool, falseBool, falseBool)))
Cv2RMS(LowpassFilterUniform(ContourMaskMinAspectRatio(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 1.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), lessThanOrEqual(0.1, 10.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myOr(myNot(falseBool), ifThenElseBool(trueBool, falseBool, falseBool)))
ContourMaskMinEquDiameter(ZeroOneNorm(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myOr(trueBool, trueBool))
ContourMaskMinEquDiameter(ZeroOneNorm(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myOr(trueBool, trueBool))
AdjustConstrastGamma(HighpassFourierUniform(MorphTophatEllipse(ZeroOneNorm(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), greaterThanEqual(0.01, 10.0), lessThan(100.0, 0.1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passBool(myNot(falseBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatIntDiv(myFloatIntDiv(ifThenElseFloat(falseBool, 0.01, 1.0), myIntSub(100, 32)), myFloatToInt(ifThenElseFloat(falseBool, 0.01, 1.0))), myFloatDiv(myFloatIntMult(myFloatMult(0.1, 0.1), myIntDiv(10, 5210)), myFloatDiv(myFloatDiv(1.0, 0.007058487021426529), myFloatMult(0.01, 0.01))))
AdjustConstrastGamma(HighpassFourierUniform(MorphTophatEllipse(ZeroOneNorm(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), greaterThanEqual(0.01, 10.0), lessThan(100.0, 0.1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passBool(myNot(falseBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatIntDiv(myFloatIntDiv(ifThenElseFloat(falseBool, 0.01, 1.0), myIntSub(100, 32)), myFloatToInt(ifThenElseFloat(falseBool, 0.01, 1.0))), myFloatDiv(myFloatIntMult(myFloatMult(0.1, 0.1), myIntDiv(10, 5210)), myFloatDiv(myFloatDiv(1.0, 0.007058487021426529), myFloatMult(0.01, 0.01))))
Hog(LocalPoolingMax(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 150), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), lessThan(10.0, -0.5273780216301605), notEqual(0.01, 0.01), myOr(falseBool, trueBool), myFloatToInt(10.0))
Hog(LocalPoolingMax(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 150), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), lessThan(10.0, -0.5273780216301605), notEqual(0.01, 0.01), myOr(falseBool, trueBool), myFloatToInt(10.0))
myICA(ContourMaskMinArea(GradientMagnitude(Tokenizer(ARG0, 7, 518), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), lessThanOrEqual(0.1, 1.6548537041261326)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatIntMult(myFloatIntMult(0.01, 5), myIntMult(5, 1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), lessThan(myFloatIntSub(myFloatMult(0.1, 0.1), greaterThanEqual(-1.62545880996786, 0.01)), myFloatIntMult(myFloatIntAdd(100.0, 50), notEqual(0.01, 0.01))), lessThan(myFloatDiv(ifThenElseFloat(falseBool, 100.0, 0.1), myFloatIntDiv(10.0, 6)), myFloatMult(myFloatSub(10.0, 0.01), myFloatSub(0.01, 0.1))))
myICA(ContourMaskMinArea(GradientMagnitude(Tokenizer(ARG0, 7, 518), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), lessThanOrEqual(0.1, 1.6548537041261326)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatIntMult(myFloatIntMult(0.01, 5), myIntMult(5, 1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), lessThan(myFloatIntSub(myFloatMult(0.1, 0.1), greaterThanEqual(-1.62545880996786, 0.01)), myFloatIntMult(myFloatIntAdd(100.0, 50), notEqual(0.01, 0.01))), lessThan(myFloatDiv(ifThenElseFloat(falseBool, 100.0, 0.1), myFloatIntDiv(10.0, 6)), myFloatMult(myFloatSub(10.0, 0.01), myFloatSub(0.01, 0.1))))
MyCumProd(CountVectorizer(HighpassLaplacian(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 8, 4, 0), myOr(trueBool, trueBool), lessThanOrEqual(1.0, -0.5422234989450345), myAnd(trueBool, trueBool), myOr(falseBool, falseBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), myIntAdd(lessThan(0.024468250915722578, 0.01), myFloatToInt(3.620594966255286)))
MyCumProd(CountVectorizer(HighpassLaplacian(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 8, 4, 0), myOr(trueBool, trueBool), lessThanOrEqual(1.0, -0.5422234989450345), myAnd(trueBool, trueBool), myOr(falseBool, falseBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), myIntAdd(lessThan(0.024468250915722578, 0.01), myFloatToInt(3.620594966255286)))
GradientWeighted(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 7, 0.1, 10.0)
GradientWeighted(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 7, 0.1, 10.0)
SavitzkyGolayFilter(Cv2Divide(WindowPlanckTaper(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 100.0), SepDetectionWindow(ARG0, 32, 100, 100.0), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), equal(myFloatIntMult(100.0, 1), myFloatIntDiv(0.01, 100)), myAnd(myNot(trueBool), lessThan(-3.039105479147428, 0.01)), myAnd(greaterThanEqual(0.1, 0.01), equal(0.1, 0.01)))
SavitzkyGolayFilter(Cv2Divide(WindowPlanckTaper(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 100.0), SepDetectionWindow(ARG0, 32, 100, 100.0), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), equal(myFloatIntMult(100.0, 1), myFloatIntDiv(0.01, 100)), myAnd(myNot(trueBool), lessThan(-3.039105479147428, 0.01)), myAnd(greaterThanEqual(0.1, 0.01), equal(0.1, 0.01)))
SpectralClustering(ThresholdBinaryMax(MaximumFilter(ImagePeakFinder(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passBool(falseBool), myFloatMult(0.01, 1.0)), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(passAxis(Axis.FULL)), greaterThanEqual(myFloatIntDiv(0.01, 255), myFloatIntMult(10.0, -15)), myFloatDiv(myIntToFloat(7), myFloatIntAdd(0.01, 8))), passBool(greaterThanEqual(0.01, myFloatAdd(1.0, 0.1))), -4.803354050518086)
SpectralClustering(ThresholdBinaryMax(MaximumFilter(ImagePeakFinder(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passBool(falseBool), myFloatMult(0.01, 1.0)), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(passAxis(Axis.FULL)), greaterThanEqual(myFloatIntDiv(0.01, 255), myFloatIntMult(10.0, -15)), myFloatDiv(myIntToFloat(7), myFloatIntAdd(0.01, 8))), passBool(greaterThanEqual(0.01, myFloatAdd(1.0, 0.1))), -4.803354050518086)
MyAverager(EmadeDataSubtractPair(FilterCentroids(ARG0), EmadeDataDivideInt(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 5), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), passBool(equal(100.0, 100.0)))
MyAverager(EmadeDataSubtractPair(FilterCentroids(ARG0), EmadeDataDivideInt(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 5), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), passBool(equal(100.0, 100.0)))
Mutated 118 individuals
Heal Offspring
Healed128 individuals
Already computed LowpassFilterAverage(Cv2DFTReal(HighpassFourierShift(HighpassUnsharpMask(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 1, 150, 8), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), notEqual(0.01, 0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myIntDiv(myIntDiv(myIntSub(128, 0), ifThenElseBool(falseBool, falseBool, trueBool)), myIntMult(equal(1.0, 0.01), notEqual(10.0, 10.0)))) with fitness (inf, inf) hash 6318cdcdb5bbaa06ca7eca8460239e83b05afda310b23aeaf1d2cd8a6f3065c1 and age 0
Already computed ScalarMax(MorphErosionEllipse(ArcSine(MyNorm(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 12), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myIntAdd(myIntDiv(9, 7), myIntDiv(64, 64)), myFloatToInt(myFloatSub(0.1, 1.0)), myIntDiv(myNot(falseBool), lessThan(10.0, 100.0))), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(passAxis(Axis.AXIS_1))), equal(myFloatDiv(10.0, myFloatIntSub(0.01, 3)), myFloatSub(myFloatMult(1.0, 0.01), myFloatAdd(10.0, 2.8038385610904095)))) with fitness (inf, inf) hash 579ea7cc680bfc6ae99c88fbbd8f9a1e2dea36c251fe6a85dea04be5f8232309 and age 0
Already computed SVCMulti(ARG0) with fitness (inf, inf) hash 648a3973d6585986482d65feb0fc12ed54a29df856626f34ead937092fdcf663 and age 0
Already computed NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(97, ARG0, randomUniformWeights, InputLayer(ARG0))), 100) with fitness (0.04515926565196926, 776001.0) hash ce9a5c870b097d6fd6d1a0c49eae1ddad13823487145a6aba4be82828b9822c0 and age 1.0
Already computed FFT(MorphDilateEllipse(EmadeDataMultiplyFloat(RandomNormal(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 128, 7), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatIntDiv(100.0, 55)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myOr(ifThenElseBool(falseBool, trueBool, trueBool), ifThenElseBool(falseBool, falseBool, falseBool)), myNot(equal(0.1, 4.626238182777421)), passBool(myNot(falseBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_0)))) with fitness (inf, inf) hash b3a2ca897e0bbf5a1807d4fbd32e021231697c88a394beff01054c93e26f2ecd and age 0
Already computed CreateBBox(LowpassFilterEllipsoid(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 50), WindowHamming(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, falseBool), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_2), myNot(falseBool)) with fitness (inf, inf) hash 08737565aa8eb6c8bf35820532f9b38722a3e66b1d0a033ca03f197a3531d9d3 and age 0
Already computed SVCMulti(ARG0) with fitness (inf, inf) hash 648a3973d6585986482d65feb0fc12ed54a29df856626f34ead937092fdcf663 and age 0
Already computed Cv2Min(ContoursAll(Cv2DCT(HighpassFourierUniform(DogDetection(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 100.0, 0.7245293173604006, 100.0, 100.0, 1.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), myAnd(falseBool, falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL))), TriState.FEATURES_TO_FEATURES, passAxis(passAxis(passAxis(Axis.AXIS_1)))), myPCA(MorphErosionEllipse(Prerejection(ARG0, passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passBool(trueBool), greaterThan(10.0, 1.0), passFloat(1.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myNot(ifThenElseBool(falseBool, falseBool, trueBool)), myAnd(notEqual(2.483547608190869, 0.422436862800617), trueBool), 150), passTriState(TriState.FEATURES_TO_FEATURES), greaterThanEqual(myIntToFloat(100), myFloatMult(myFloatSub(10.0, 0.01), ifThenElseFloat(trueBool, 0.1, 0.01))), equal(ifThenElseFloat(notEqual(100.0, 10.0), 10.0, myFloatIntDiv(1.0, 3)), myIntToFloat(9))), passTriState(TriState.STREAM_TO_STREAM), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2))))) with fitness (inf, inf) hash 0e75dcc516f30c69e299ad2c7ad4f8164b1314c312d748256284b59690dec0cc and age 0
Offspring has 128 elements before I remove those that are already being processed
Removing hashes:
[]
Removed 0 individuals that were already being processed left with 128
After matings and mutations 127 out of 128 are unique
Additionally 128 individuals are unique in memory
And 476 mains and adfs are unique
Adding 8 to evaluated offspring list of length 0
Making length 8
Recomputing fitnesses for 120 offspring
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:19:58.137400
After Uneval Count Query | 2020-08-22 21:19:58.140631
141 elements remaining in queue, query complete in 0.00 seconds
Starting cache optimization
Finished cache optimization
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:19:58.148792
After Uneval Count Query | 2020-08-22 21:19:58.152107
141 elements remaining in queue, query complete in 0.00 seconds
Good night
Good morning
Starting Gen 1
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:20:08.162422
After Uneval Count Query | 2020-08-22 21:20:08.545286
114 elements remaining in queue, query complete in 0.38 seconds
Good night
Good morning
Starting Gen 1
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:20:18.555932
After Uneval Count Query | 2020-08-22 21:20:18.559148
93 elements remaining in queue, query complete in 0.00 seconds
Good night
Good morning
Starting Gen 1
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:20:28.570099
After Uneval Count Query | 2020-08-22 21:20:28.594276
89 elements remaining in queue, query complete in 0.02 seconds
Good night
Good morning
Starting Gen 1
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:20:38.604575
After Uneval Count Query | 2020-08-22 21:20:38.794228
77 elements remaining in queue, query complete in 0.19 seconds
Good night
Good morning
Starting Gen 1
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:20:48.804912
After Uneval Count Query | 2020-08-22 21:20:48.874587
69 elements remaining in queue, query complete in 0.07 seconds
Good night
Good morning
Starting Gen 1
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:20:58.885590
After Uneval Count Query | 2020-08-22 21:20:58.890323
69 elements remaining in queue, query complete in 0.00 seconds
Good night
Good morning
Starting Gen 1
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:21:08.900746
After Uneval Count Query | 2020-08-22 21:21:08.905353
51 elements remaining in queue, query complete in 0.00 seconds
Good night
Good morning
Starting Gen 1
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:21:18.916254
After Uneval Count Query | 2020-08-22 21:21:19.051992
31 elements remaining in queue, query complete in 0.14 seconds
Good night
Good morning
Starting Gen 1
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:21:29.063070
After Uneval Count Query | 2020-08-22 21:21:29.067430
31 elements remaining in queue, query complete in 0.00 seconds
Good night
Good morning
Starting Gen 1
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:21:39.077871
After Uneval Count Query | 2020-08-22 21:21:39.082328
31 elements remaining in queue, query complete in 0.00 seconds
Good night
Good morning
Starting Gen 1
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:21:49.093251
After Uneval Count Query | 2020-08-22 21:21:49.097790
31 elements remaining in queue, query complete in 0.00 seconds
Good night
Good morning
Starting Gen 1
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:21:59.108841
After Uneval Count Query | 2020-08-22 21:21:59.113349
31 elements remaining in queue, query complete in 0.00 seconds
Good night
Good morning
Starting Gen 1
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:22:09.123783
After Uneval Count Query | 2020-08-22 21:22:09.128245
31 elements remaining in queue, query complete in 0.00 seconds
Good night
Good morning
Starting Gen 1
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:22:19.138990
After Uneval Count Query | 2020-08-22 21:22:19.143322
31 elements remaining in queue, query complete in 0.00 seconds
Good night
Good morning
Starting Gen 1
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:22:29.154212
After Uneval Count Query | 2020-08-22 21:22:29.158612
31 elements remaining in queue, query complete in 0.00 seconds
Good night
Good morning
Starting Gen 1
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:22:39.169104
After Uneval Count Query | 2020-08-22 21:22:39.174253
31 elements remaining in queue, query complete in 0.01 seconds
Good night
Good morning
Starting Gen 1
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:22:49.185275
After Uneval Count Query | 2020-08-22 21:22:49.189935
31 elements remaining in queue, query complete in 0.00 seconds
Good night
Good morning
Starting Gen 1
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:22:59.200909
After Uneval Count Query | 2020-08-22 21:22:59.205617
31 elements remaining in queue, query complete in 0.00 seconds
Good night
Good morning
Starting Gen 1
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:23:09.216102
After Uneval Count Query | 2020-08-22 21:23:09.220635
25 elements remaining in queue, query complete in 0.00 seconds
Updating population
Passed parents update
Before Recent Evaluated Query | 2020-08-22 21:23:09.220794
After Recent Evaluated Query | 2020-08-22 21:23:09.483692
TimeStamp | 2020-08-22 21:23:09.484333
Received: LowpassFilterAverage(Cv2DFTReal(HighpassFourierShift(HighpassUnsharpMask(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 1, 150, 8), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), notEqual(0.01, 0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myIntDiv(myIntDiv(myIntSub(128, 0), ifThenElseBool(falseBool, falseBool, trueBool)), myIntMult(equal(1.0, 0.01), notEqual(10.0, 10.0))))
	With Hash 6318cdcdb5bbaa06ca7eca8460239e83b05afda310b23aeaf1d2cd8a6f3065c1
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.484666
Received: ScalarMax(MorphErosionEllipse(ArcSine(MyNorm(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 12), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myIntAdd(myIntDiv(9, 7), myIntDiv(64, 64)), myFloatToInt(myFloatSub(0.1, 1.0)), myIntDiv(myNot(falseBool), lessThan(10.0, 100.0))), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(passAxis(Axis.AXIS_1))), equal(myFloatDiv(10.0, myFloatIntSub(0.01, 3)), myFloatSub(myFloatMult(1.0, 0.01), myFloatAdd(10.0, 2.8038385610904095))))
	With Hash 579ea7cc680bfc6ae99c88fbbd8f9a1e2dea36c251fe6a85dea04be5f8232309
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.484935
Received: SVCMulti(ARG0)
	With Hash 648a3973d6585986482d65feb0fc12ed54a29df856626f34ead937092fdcf663
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.485032
Received: NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(97, ARG0, randomUniformWeights, InputLayer(ARG0))), 100)
	With Hash ce9a5c870b097d6fd6d1a0c49eae1ddad13823487145a6aba4be82828b9822c0
	With Fitnesses: (0.04515926565196926, 776001.0)
	With Age: 1.0
TimeStamp | 2020-08-22 21:23:09.485142
Received: FFT(MorphDilateEllipse(EmadeDataMultiplyFloat(RandomNormal(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 128, 7), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatIntDiv(100.0, 55)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myOr(ifThenElseBool(falseBool, trueBool, trueBool), ifThenElseBool(falseBool, falseBool, falseBool)), myNot(equal(0.1, 4.626238182777421)), passBool(myNot(falseBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_0))))
	With Hash b3a2ca897e0bbf5a1807d4fbd32e021231697c88a394beff01054c93e26f2ecd
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.485361
Received: CreateBBox(LowpassFilterEllipsoid(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 50), WindowHamming(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, falseBool), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_2), myNot(falseBool))
	With Hash 08737565aa8eb6c8bf35820532f9b38722a3e66b1d0a033ca03f197a3531d9d3
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.485498
Received: SVCMulti(ARG0)
	With Hash 648a3973d6585986482d65feb0fc12ed54a29df856626f34ead937092fdcf663
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.485569
Received: Cv2Min(ContoursAll(Cv2DCT(HighpassFourierUniform(DogDetection(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 100.0, 0.7245293173604006, 100.0, 100.0, 1.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), myAnd(falseBool, falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL))), TriState.FEATURES_TO_FEATURES, passAxis(passAxis(passAxis(Axis.AXIS_1)))), myPCA(MorphErosionEllipse(Prerejection(ARG0, passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passBool(trueBool), greaterThan(10.0, 1.0), passFloat(1.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myNot(ifThenElseBool(falseBool, falseBool, trueBool)), myAnd(notEqual(2.483547608190869, 0.422436862800617), trueBool), 150), passTriState(TriState.FEATURES_TO_FEATURES), greaterThanEqual(myIntToFloat(100), myFloatMult(myFloatSub(10.0, 0.01), ifThenElseFloat(trueBool, 0.1, 0.01))), equal(ifThenElseFloat(notEqual(100.0, 10.0), 10.0, myFloatIntDiv(1.0, 3)), myIntToFloat(9))), passTriState(TriState.STREAM_TO_STREAM), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))))
	With Hash 0e75dcc516f30c69e299ad2c7ad4f8164b1314c312d748256284b59690dec0cc
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.485972
Received: AdjustConstrastGamma(HighpassFourierUniform(MorphTophatEllipse(ZeroOneNorm(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), greaterThanEqual(0.01, 10.0), lessThan(100.0, 0.1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passBool(myNot(falseBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatIntDiv(myFloatIntDiv(ifThenElseFloat(falseBool, 0.01, 1.0), myIntSub(100, 32)), myFloatToInt(ifThenElseFloat(falseBool, 0.01, 1.0))), myFloatDiv(myFloatIntMult(myFloatMult(0.1, 0.1), myIntDiv(10, 5210)), myFloatDiv(myFloatDiv(1.0, 0.007058487021426529), myFloatMult(0.01, 0.01))))
	With Hash 0093e026deb5a40740f56730fd447a63f493c9adaa3f52898ce8bb257968e70a
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.486236
Received: KalmanFilter(EmadeDataMultiplyInt(FractionDouble(RandomShuffle(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), adf_0(ARG0), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_2), lessThanOrEqual(0.01, 1.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myAnd(myOr(trueBool, falseBool), greaterThanEqual(1.0, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatAdd(myFloatIntMult(myFloatIntAdd(2.9994799536246566, 10), passBool(trueBool)), myFloatAdd(myFloatIntAdd(1.0, 1), myFloatIntDiv(0.01, 50))), myFloatIntMult(myFloatAdd(myFloatIntDiv(0.1, 55), myFloatIntAdd(10.0, 64)), lessThan(ifThenElseFloat(falseBool, 100.0, -2.2267720112368936), myFloatDiv(0.1, 100.0))))
adf_0: ContourMaskMinLength(MeanWithHole(mySelPercentile(ARG0, TriState.STREAM_TO_FEATURES, 4, 1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myIntMult(64, 150), equal(-1.4743413338819957, -4.713361434513683)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myFloatIntAdd(myFloatAdd(0.01, 100.0), myOr(trueBool, trueBool)))
	With Hash 02d19dddfac4ccdd7a6b8de729db43dde03214e85b45b333adf6641c46b52337
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.486789
Received: NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 90)
	With Hash 03a3cd8d34bd8ccd0ce8d9d30608e275f54d17ee475fbb2200556516d978905b
	With Fitnesses: (0.045002353679585716, 800001.0)
	With Age: 1.0
TimeStamp | 2020-08-22 21:23:09.486899
Received: GetCentroids(FilterCentroids(EdgeDetectionCanny(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 100, 7, 6)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)))
	With Hash 07e582ed0beb1b79e06beb07d15f6f6c51ce5c99f43e903f3438d0805b1fbeef
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.487029
Received: ContourMaskRangeEquDiameter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 7, 55)
	With Hash 095bc11a4f8c839907341648c6fc67286136ef87759c12ee4c11ebfe17e8e68e
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.487116
Received: ScalarAdd(SEPObjectDetection(ScalarDivide(mySelFwe(WindowBartlett(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), myFloatToInt(100.0), myFloatMult(0.01, 0.1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatIntSub(myFloatDiv(100.0, 10.0), myAnd(trueBool, trueBool))), myIntAdd(lessThanOrEqual(myFloatSub(0.1, 1.0), myFloatSub(100.0, 1.0)), equal(passFloat(4.707413748836608), myFloatDiv(1.0, -0.7775053560257277))), myFloatIntSub(myIntToFloat(ifThenElseBool(trueBool, trueBool, trueBool)), myFloatToInt(myFloatIntAdd(0.01, 6))), myFloatDiv(myFloatIntSub(myFloatIntMult(0.1, 32), myIntSub(5, 77)), myFloatSub(passFloat(0.01), myIntToFloat(8)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myFloatMult(ifThenElseFloat(ifThenElseBool(lessThan(0.01, 100.0), myNot(falseBool), greaterThanEqual(0.01, 3.400231775276932)), myFloatAdd(myFloatIntSub(1.0, 64), myFloatSub(100.0, 10.0)), myFloatIntAdd(myFloatIntMult(2.8064767778458126, 64), myIntAdd(4, 10))), myFloatIntMult(passFloat(myFloatAdd(0.01, 10.0)), myIntAdd(myFloatToInt(100.0), myIntDiv(1, 6)))))
	With Hash 0b6a34afa82d27d8fa0bdc95c25165ab0c7ffac4e8deb94a3fc9eb8d5d5d0b0d
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.487521
Received: ContoursMaxLength(ThresholdNLargestBinary(AffinityPropagationClustering(Cv2Multiply(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_2), myIntToFloat(100)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), lessThan(myFloatMult(-0.6299447199772965, 0.01), myFloatIntAdd(0.1, 255))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myIntMult(passInt(myIntMult(255, 2)), myOr(ifThenElseBool(trueBool, falseBool, trueBool), ifThenElseBool(trueBool, trueBool, trueBool))))
	With Hash 0d65e3c5f38a08983a452bc7f8cf91bfe6ae44452badb15c7c88c140d1ed7236
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.487738
Received: WindowBlackman(Cv2GreaterThan(MyAverager(MyAutoCorr(Hog(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, falseBool, 100, 255, 27), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), passBool(greaterThan(10.0, 2.114353493716856))), MyNorm(LognormalLM(MultiplySpectrum(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myFloatToInt(myFloatAdd(100.0, 10.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2))), passAxis(passAxis(passAxis(Axis.AXIS_1)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), myFloatAdd(ifThenElseFloat(myOr(greaterThanEqual(0.01, -2.698856169925765), myNot(falseBool)), myFloatIntSub(myIntToFloat(8145), myIntDiv(0, 50)), myFloatSub(ifThenElseFloat(trueBool, 100.0, 100.0), myFloatIntAdd(-0.9658259679513304, 5))), myFloatSub(ifThenElseFloat(notEqual(10.0, -3.3625993423487346), myFloatIntAdd(0.1, 5), myFloatAdd(1.0, 100.0)), myFloatSub(myFloatDiv(10.0, 0.1), ifThenElseFloat(trueBool, 0.01, 10.0)))))
	With Hash 0ea7ee51e867a2a93b1aa5ca85913f166c0d46f657c05f79909926ad5ab68250
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.488173
Received: Fraction(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 4)
	With Hash 17a26e9173a00854c166d7fdca19346694de44c80312182302c13991cd87555d
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.488260
Received: LowpassFilterUniform(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 100)
	With Hash 17f7c6d492fb8f60819ce4d7cdd117ad07a001272800644a7960527b438ff5ea
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.488341
Received: ThresholdBinaryInverse(ThresholdBinaryInverse(MinimumToZero(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myFloatIntMult(1.0, 4)), passTriState(TriState.STREAM_TO_STREAM), Axis.AXIS_2, myFloatIntDiv(1.0, passInt(10)))
	With Hash 18abb873e1f169bc49ddb4709b1cbc9a2c42d93e83c4c29f9e2e6c054be70f11
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.488469
Received: ContourMaskMinArea(ARG0, passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myFloatSub(myFloatDiv(0.1, 3.318901895439245), myFloatAdd(1.0, 0.1)))
	With Hash 198f56ab0bb7486cb3964699c9cf4a4be856b2c9e74df9bf127db1fdc5e34747
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.488581
Received: Hog(EmadeDataAddInt(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 32), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), myAnd(trueBool, falseBool), equal(-3.0637399130816254, 10.0), myOr(falseBool, trueBool), ifThenElseBool(trueBool, falseBool, trueBool))
	With Hash 1aa3807f6e861e4dc8f26f9e7fc95a8f9e260bc434af391da641f8bda59c6953
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.488716
Received: ContourMask(ARG0, TriState.FEATURES_TO_FEATURES, passAxis(passAxis(Axis.FULL)))
	With Hash 1b2a730a209e1facc5b7bb0d8f94651d8c257967bc9659703a83e9bf8247baf3
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.488798
Received: FractionTriple(ARG0, NNLearner(ARG0, [], 6), HighpassLaplacian(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 3, 936, 4), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_2), passInt(64))
	With Hash 1b2d363137dd2b96ac76d54262190c929068aa3a8c8e2d1e10c8a7b33e72ab4d
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.488957
Received: TfidfVectorizer(ARG0, trueBool, 4, 9, 2)
	With Hash 1e622c77f3f9fa38d7fb28a2e53c334c6d27ca7c42c4dabf9268360abaea666c
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.489041
Received: EmadeDataMultiplyPair(MorphDilateEllipse(SavitzkyGolayFilter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 10, 8, 8), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myOr(trueBool, trueBool), myIntSub(100, 1), notEqual(0.01, 0.1)), EmadeDataAddPairTriple(WindowBlackman(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 10.0), RandomShuffle(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), AdjustConstrastLog(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, -4.349206158163597), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_1), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), passAxis(passAxis(Axis.AXIS_2)))
	With Hash 1f3ca9b37bf0f60394d6644e5968348578bcfb3b44e930cd222c997ca5ea843c
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.489299
Received: ArcCosine(EmadeDataNumpyMultiplyPair(RandomShuffle(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), ARG0, passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_1)), TriState.STREAM_TO_STREAM, passAxis(passAxis(Axis.AXIS_2)))
	With Hash 21febb0ac8e5349817d6f92d4c2a48fa965880e94083c86e924a8f0f87381656
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.489425
Received: RMS2D(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 55)
	With Hash 23effc0bb4e8cb198ff7af24799b964ccd6630b535e9ede00a109385c71c77de
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.489504
Received: WindowBlackman(MorphOpenCross(Cv2iDCT(Cv2iDCT(BayesMulti(ARG0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(Axis.AXIS_1)), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), Axis.AXIS_1, passInt(myIntMult(myAnd(falseBool, trueBool), greaterThan(100.0, 100.0))), 64), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(Axis.AXIS_2)), myIntToFloat(6))
	With Hash 252021c6d5fb34bbffe40360e5534a94e10bd12b4084237cf35c9f37dbb41b30
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.489685
Received: MorphBlackhatEllipse(WindowLanczos(CopyStreamToTarget(GetCentroids(WindowNuttal(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.STREAM_TO_STREAM), Axis.AXIS_0)), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), myIntMult(2, ifThenElseBool(myOr(equal(10.0, 0.1), ifThenElseBool(trueBool, trueBool, trueBool)), myAnd(lessThanOrEqual(10.0, 100.0), ifThenElseBool(falseBool, trueBool, falseBool)), myOr(ifThenElseBool(trueBool, trueBool, falseBool), falseBool))), equal(-1.7789343059738059, 10.0))
	With Hash 268b0036a6e551ae52f00b0b0f540e3a0f46c73ee18e9882f044cf20ba628f1c
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.489949
Received: MyBinaryThreshold(Cv2GreaterThanOrEqual(ArcCosine(Supersampling(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 3.39836702480744, 100), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), ContourMaskMinSolidity(Cv2RMS(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 1), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), equal(1.0, 0.01)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatMult(passFloat(myFloatIntMult(100.0, 64)), myFloatSub(myFloatSub(0.1, 1.1306762020891234), myFloatIntDiv(-4.312564719857537, falseBool))))
	With Hash 272005348adf0166bcdc25295561406b85bdca39e535c0b7f314dfa4c5a7e3c4
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.490214
Received: NNLearner(ARG0, OutputLayer(MorphTophatEllipse(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 2, 128), EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 1676)
	With Hash 2c510a8c8e97ca0ae8688ae21e5cc70f6f839bbc821f8a4fa7b59b7eb782198c
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.490321
Received: HighpassFourierGaussian(CCorrObjectFilter(ARG0, mySelFdr(ARG0, passTriState(TriState.STREAM_TO_STREAM), myAnd(lessThanOrEqual(-0.7762674365595599, 0.1), greaterThanEqual(-0.7837111049192211, 4.164487072958346)), myFloatIntMult(myFloatSub(1.0, -3.0158739521276168), equal(4.4312049661198465, 100.0))), equal(myFloatIntSub(100.0, 7), myFloatIntMult(myFloatIntSub(10.0, 10), greaterThan(10.0, 0.1))), myFloatIntSub(ifThenElseFloat(trueBool, ifThenElseFloat(trueBool, 0.1, 0.01), myFloatIntSub(100.0, -1)), myIntMult(6, myIntMult(32, 317)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), myAnd(lessThan(ifThenElseFloat(equal(100.0, 100.0), myFloatMult(10.0, 0.01), myFloatIntAdd(100.0, 0)), ifThenElseFloat(lessThanOrEqual(100.0, 0.01), myFloatDiv(0.1, 10.0), myFloatIntMult(1.0, 255))), falseBool))
	With Hash 2f5735d2224e23afc79c93a6cbaf7846725d9bb28d58977b85089856169c619a
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.490603
Received: SpectralClustering(Cv2Max(Cv2NotEqual(SVCMulti(WindowNuttal(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2)), GetCentroids(CopyStreamToTarget(ARG0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passAxis(passAxis(Axis.AXIS_2))), MorphCloseEllipse(EmadeDataMultiplyInt(mySparsePCA(ARG0, TriState.STREAM_TO_FEATURES, 8, 0.1), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), equal(100.0, 1.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myNot(ifThenElseBool(trueBool, trueBool, falseBool)), myIntAdd(myIntDiv(5, 128), myIntMult(10, 7565))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), passAxis(passAxis(passAxis(Axis.AXIS_2)))), greaterThan(myFloatIntMult(myFloatIntDiv(myIntToFloat(10), equal(10.0, 0.1)), notEqual(myIntToFloat(10), ifThenElseFloat(trueBool, 10.0, 1.5248680967417583))), myFloatIntSub(myFloatSub(myFloatSub(1.0, 100.0), ifThenElseFloat(falseBool, 100.0, 0.01)), passInt(myFloatToInt(1.0)))), passFloat(myFloatSub(myFloatIntMult(ifThenElseFloat(falseBool, 0.42172223629613725, 1.0), myIntDiv(910, 1)), myFloatDiv(myFloatDiv(-0.9783568785270136, 100.0), ifThenElseFloat(falseBool, 1.0, 100.0)))))
	With Hash 31ec03b0273d19059e416553eac82087486a62f68f8d7700ac7c5f0f9678be0c
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.491007
Received: Cosine(StdDeviation(MySnapshot(Cv2iDCT(ImageAlignmentECC(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_0, 1, 1.0, 255, 10), passTriState(TriState.FEATURES_TO_FEATURES), Axis.AXIS_0), MinimumToZero(LowpassFilterEllipsoid(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 128), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0)), TriState.STREAM_TO_FEATURES, passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.FULL)), greaterThanEqual(myFloatSub(-3.8692812511092454, 10.0), myFloatDiv(10.0, 0.1))), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(passAxis(passAxis(Axis.AXIS_2))), myIntSub(passInt(ifThenElseBool(falseBool, falseBool, falseBool)), lessThan(ifThenElseFloat(falseBool, 100.0, 0.01), passFloat(100.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))))
	With Hash 365f920c2f29c7ad00c195ee43885558fed791e3222aa0081c392b647e68bae5
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.491288
Received: Cv2Min(HighpassSobelDerivative(SkiMedianFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 82), TriState.STREAM_TO_STREAM, passAxis(Axis.AXIS_2), passInt(1), myIntSub(55, 5), 4, myIntMult(falseBool, 150), myAnd(trueBool, trueBool)), MorphCloseCross(ThresholdNLargest(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 55), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), notEqual(100.0, 0.1), myOr(trueBool, trueBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passAxis(passAxis(Axis.AXIS_1)))
	With Hash 3de658526ada148f0f8bb6061d200c7ba5b1a4aa5b2a275029f290da28dbb97b
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.491493
Received: ContourMaskMinAspectRatio(EmadeDataDividePair(ContoursMinLength(GradientWeighted(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 128, 10.0, 10.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatToInt(100.0)), LowpassFilterMedian(BitwiseAnd(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), Axis.AXIS_2, 8), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), Axis.AXIS_0, passAxis(passAxis(Axis.AXIS_2))), passTriState(TriState.STREAM_TO_FEATURES), passAxis(passAxis(passAxis(Axis.AXIS_1))), passFloat(myFloatAdd(myFloatIntAdd(0.01, 9), myFloatDiv(0.1, 10.0))))
	With Hash 4123a5f357cca4d106bcadc54725b8f733ed346b4f2fceced457f131c54bc5e4
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.491708
Received: EqualizeDisk(ARG0, passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myIntDiv(passInt(-1), myIntSub(50, 5)))
	With Hash 45479629b083cbd1290e9fffc1965a96b9d49479a621a84d5029681df216c698
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.491808
Received: WindowHamming(ARG0, TriState.FEATURES_TO_FEATURES, passAxis(passAxis(passAxis(Axis.FULL))), notEqual(myFloatAdd(myFloatIntMult(0.1, 10), passFloat(0.01)), passFloat(ifThenElseFloat(trueBool, 100.0, 0.01))))
	With Hash 47eceba704560c2e87a1a76bfc02825ec2724d0b189f300a741c446bf66f0a58
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.491923
Received: LowpassFilterEllipsoid(MinLoc(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myAnd(trueBool, falseBool))
	With Hash 4927ff39c368cd911988f9c7f932e3895baa3e0c464bda01980bb2afb0dec140
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.492030
Received: MeanShiftClustering(ARG0)
	With Hash 4b30210d7c26606021017cf3ba10523cc64efca0041c1eb6b60346e42035122f
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.492095
Received: ToFloat(LabelByCenterOfMass(Cv2LessThanOrEqual(MaximumWindow(Cv2Pow(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 10), lessThanOrEqual(4.414045886095607, 0.1), equal(1.0, 3.6560382364737993), passFloat(1.0)), SpectralFilter(MorphErosionCross(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, trueBool, 8, 100), BitwiseOr(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.FULL), NumNamedEntities(ARG0), SelectRange(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 91, 5), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_1), passAxis(Axis.FULL), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.AXIS_1))), RXAnomalyDetector(Select3D(SetToZeroIf<Data&Factor(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.FULL, Axis.FULL, trueBool), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myIntMult(5, 255), myOr(trueBool, trueBool), myFloatToInt(10.0), passBool(trueBool), myIntMult(3, 2), greaterThanEqual(10.0, -1.3940504926993191)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myFloatIntMult(myFloatDiv(0.1, -1.4302727964896533), equal(0.01, 10.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), passAxis(passAxis(passAxis(Axis.FULL)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))))
	With Hash 4df6b6c42dcf73e23b0d363feca3dc05e411daed0424b435e56e157cfa0b1506
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.492570
Received: OtsuBinaryThreshold(ARG0, passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL))), myIntMult(greaterThan(myFloatIntDiv(0.1, 12), myFloatIntDiv(100.0, 4)), 128))
	With Hash 519347a5257cdcab0bf804da35a90e2b3dd2a4385523f7252c6afb750bc46256
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.492689
Received: Cv2Add(ARG0, BitwiseOr(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.FULL, Axis.FULL), TriState.STREAM_TO_STREAM, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_2))
	With Hash 53eccff7595bc5f9fc91e91bb3a203c4223c4486279798ad3497f0c8d7175844
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.492800
Received: MaxLoc(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0)
	With Hash 579323ee3fd3e89a1884242a0609d5f0a0186f08aeaf1e06a780ee89edff5062
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.492873
Received: MyDiff(ARG0, passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)))
	With Hash 5869ea813984b687de800930b989e1454a969fadde18f614665d5f8c64861e15
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.492964
Received: ThresholdBinaryMax(MultiplySpectrum(MorphErosionEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 5, 255, 3), Cv2Pow(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 50), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), notEqual(myFloatIntSub(0.01, 3), ifThenElseFloat(trueBool, 10.0, 3.334664941889473)), myFloatIntAdd(myIntToFloat(3), passInt(6)))
	With Hash 5b976c3f56b700d68b39757a454ea932a422de3a75e1a58eac9924cb2b733983
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.493152
Received: ContourMaskRangeAspectRatio(HighpassFourierEllipsoid(ARG0, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), 4), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myIntAdd(lessThanOrEqual(0.1, 0.1), lessThanOrEqual(0.1, 100.0)), greaterThanEqual(myFloatIntAdd(0.1, 3), myFloatIntAdd(-0.5209122717662718, 61)))
	With Hash 5c35a28d3e8436563faab8be489d39472a0a939fc90d1f61948d2f6d973e3f0e
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.493296
Received: MorphCloseCross(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 41, 64)
	With Hash 5e8d5481076b4e863d82ef11109edbe6877c8d7ff9954d3a63198bdf7e8a8e6b
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.493374
Received: ZeroOneNorm(MyNorm(Cv2RMS(ToUint8(mySparsePCA(ARG0, TriState.FEATURES_TO_FEATURES, 5, 4.769380003348955), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), greaterThanEqual(myFloatIntDiv(1.0, 12), myFloatSub(0.01, 10.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myNot(notEqual(myFloatMult(0.1, 0.1), myIntToFloat(6)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))))
	With Hash 5e8ed74171b18c4ffa00bdc5a483e30088abd0198052aab3cea6a44d4ee22e04
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.493577
Received: b-spline(MultiplyTransposed(NNLearner(MorphOpenRect(ContourMaskMinArea(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, -4.155279944753118), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), lessThan(10.0, 2.032969916928846), greaterThan(0.1, 4.7530838391306105)), DropoutLayer(myFloatMult(0.01, 10.0), FlattenLayer(EmbeddingLayer(7, ARG0, heWeights, InputLayer(ARG0)))), lessThan(myFloatDiv(0.1, 0.01), myFloatDiv(0.1, 100.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_0))), lessThanOrEqual(passFloat(myFloatIntMult(100.0, 8)), myFloatSub(myFloatIntAdd(-3.011508015127957, 6), myFloatDiv(0.01, 10.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))))
	With Hash 5f79b9d17238c44dd5cfd95d5bbe988062a6b56b6140f9b148d4b623f4710d6e
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.493825
Received: ContourMaskMaxSolidity(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 10.0)
	With Hash 5f9ed27fb8170f5110f118fa54ce0a54ca09dedc324a6d756e165f77e530c70b
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.493904
Received: FractionTriple(RandomUniform(ConvertBW(Learner(SetToZeroIf<Data&Factor(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_1, 255), ModifyLearnerFloat(LearnerType('KNN', {'K': 3, 'weights': 0}), 0.01, falseBool), ModifyEnsembleInt(EnsembleType('GRID', None), 255, 2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myNot(lessThan(myFloatSub(100.0, 10.0), ifThenElseFloat(trueBool, 1.0, 0.01))), notEqual(myFloatIntSub(myFloatAdd(100.0, 1.0), myIntSub(9, 6)), myFloatMult(myFloatSub(0.1, 0.1), myFloatIntMult(0.01, 100)))), EmadeDataNumpyMultiplyFloat(MyBinaryThreshold(BitwiseOr(AdjustConstrastLog(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 100.0), GradientWeighted(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 1, 1.0, 100.0), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatSub(myIntToFloat(97), myFloatIntAdd(100.0, 29))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatIntAdd(myIntToFloat(greaterThan(0.01, 100.0)), passInt(myIntMult(11, 150)))), StdDeviationHole(MorphOpenCross(MorphCloseCross(MorphBlackhatRect(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 50, 10), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), greaterThanEqual(0.1, 0.1), myFloatToInt(-1.0399429945978267)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passBool(greaterThanEqual(1.8066201072486088, 100.0)), passBool(equal(10.0, -4.261701765953674))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myAnd(lessThan(myFloatIntDiv(-4.845624744776469, 10), myIntToFloat(3)), myNot(greaterThanEqual(0.1, 0.01))), myIntSub(greaterThanEqual(myFloatIntMult(1.5849853581349578, 8), myFloatMult(0.1, 0.01)), myAnd(passBool(falseBool), notEqual(0.01, 10.0)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), myIntAdd(myOr(lessThan(ifThenElseFloat(trueBool, -4.885915295047991, 100.0), myFloatIntSub(100.0, 10)), myAnd(myOr(falseBool, falseBool), myAnd(falseBool, trueBool))), myIntDiv(myAnd(equal(10.0, 0.9737817647001012), notEqual(10.0, 0.01)), myFloatToInt(myFloatAdd(1.0, 0.13351988622046562)))))
	With Hash 669928e1dc12235c41866fd2e047b8dbd74a66f5a991e8299d847e97a5bf1ef7
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.494641
Received: NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 98)
	With Hash 6713ab83dfe28a3ad5a12a951189e924d1cf5951e679a04dcb36ac46f75f0a71
	With Fitnesses: (0.044406088184528514, 800001.0)
	With Age: 1.0
TimeStamp | 2020-08-22 21:23:09.494745
Received: MorphDilateEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 9, 8, 6)
	With Hash 678b567353ba64caa273d3823510a87cc4aefcb9ca520e9443c7f2513d3867a5
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.494830
Received: GradientMagnitude(agglomerative_clustering(LowpassFilterUniform(Sine(MatchedFiltering2D(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 100, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), lessThan(myFloatMult(-1.597816002836654, 100.0), myFloatIntDiv(0.1, 3))), passInt(myIntAdd(notEqual(1.0, 0.01), greaterThan(100.0, 100.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), lessThan(myFloatIntMult(myFloatAdd(passFloat(100.0), myFloatDiv(0.1, 1.0)), myFloatToInt(myFloatAdd(0.1, 100.0))), myFloatAdd(myFloatIntMult(myFloatIntSub(0.01, 5), notEqual(0.01, 0.1)), myFloatIntDiv(myFloatMult(100.0, 10.0), 100))))
	With Hash 6874e99f94d563cce6fc18183a971e6b12b01ea6de3f4346034e591849771296
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.495100
Received: SetToZeroIf>Data&Factor(EmadeDataSubtractInt(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 128), ContoursMaxArea(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 6), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_2), myFloatDiv(1.0, 100.0))
	With Hash 69fdcc17b6d9eee4e2a442d1328727f1dcf3676112d89e5d96b00c19f82f677d
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.495229
Received: MedianFilterHole(WindowNuttal(StandardNorm(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), ifThenElseBool(notEqual(0.1, 100.0), equal(1.9212728815236169, 0.01), passBool(falseBool)), greaterThanEqual(myFloatIntAdd(0.1, 7), myFloatMult(-1.5963432170939438, 0.01)))
	With Hash 6db0ab82f652a3d014b5a562d86b47dee4bf7bbf4680db1bbe5304eb685f1826
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.495384
Received: EmadeDataNumpyMultiplyPair(ARG0, AdjustConstrastLog(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 0.01), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_1))
	With Hash 6e877a44dcfa576b7e8755bddcac7f15555c61721a84bfacd167d30a35bcaec3
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.495492
Received: Hog(Learner(ARG0, LearnerType('DECISION_TREE', {'criterion': 0, 'splitter': 0}), EnsembleType('SINGLE', None)), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myOr(falseBool, falseBool), myIntSub(85, 128), ifThenElseBool(falseBool, falseBool, falseBool), greaterThanEqual(0.01, 10.0))
	With Hash 7a943cd79491710e00e94f058411426dcf4ba434c8e9661f3105d65be076a812
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.495621
Received: ConvertBW(WindowBackmanNuttall(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2))
	With Hash 7ea647346673b1dfd2e39ff96ee808ed227ca04b6794e5d954931ad9007216fb
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.495707
Received: SpectralClustering(ARG0, 671, 0.01)
	With Hash 7ecfa15fc0d3d7c6e3e98629af24c42b806b45ed24054776aa964347485185cd
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.495778
Received: NNLearner(EmadeDataSubtractFloat(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0.1), InputLayer(ARG0), 100)
	With Hash 814e8495882ba9920f93d368d812efacc65946f348ce306adb8f3e7ac10aa793
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.495864
Received: WindowBlackman(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0.01)
	With Hash 816c1b3b45378fbaef22c0d328ee14a7b1a667e0dfec12866169b12495bca570
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.495946
Received: GetCentroids(AdjustConstrastGamma(WindowKaiser(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 0.01, falseBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), ifThenElseFloat(falseBool, 0.1, 100.0), passFloat(2.754248177718085)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)))
	With Hash 843347b0d8bae34f555c33efb762291e7b5adcfa4d367eb56cd4c919bc2580f9
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.496087
Received: MyNorm(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 3)
	With Hash 85ece09180b08e149f44e823857a7b66590271c36b2e705bcf58bf9d77989e60
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.496162
Received: Cv2DCT(LowpassFourierShift(NumpyDivide(ThresholdToZeroPixelFloat(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_2), Tfisf(ARG0, trueBool, 5, 5, 6), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), ifThenElseBool(notEqual(100.0, 0.01), myOr(trueBool, falseBool), lessThanOrEqual(0.1, 0.12723069712030988))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))))
	With Hash 860233a34a45926a087bcb0b921e246d456dac378c40d9efa6baab3b067b6d6e
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.496363
Received: ConvertToCounts(StdDeviation(mySubSampleData(ARG0, 4, 65), passTriState(TriState.STREAM_TO_FEATURES), Axis.AXIS_0, greaterThan(1.0, 10.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)))
	With Hash 86d3c948c2019c46a9dca31695e150ab31a76c8c92933fb3b98e8e72a0801df2
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.496475
Received: CutDataLead(MyDWT(HighpassFourierEllipsoid(MinimumToZero(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myAnd(trueBool, trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myIntAdd(myFloatToInt(10.0), lessThan(10.0, 100.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), greaterThan(myFloatIntDiv(myFloatIntSub(0.1, 10), myIntDiv(falseBool, 7)), myFloatDiv(myFloatIntSub(10.0, 100), myFloatIntSub(100.0, 4))))
	With Hash 88331d2d982e4ebba2077a4c81e6829440f465ee5b2155bc297cc5eba8c6ecad
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.496670
Received: StdDeviationHoleCustom(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_2, Axis.AXIS_2, 1, 128)
	With Hash 8a37775f659ea1a63b2e264fa77079254452808200e630680de1ed5dc6574e6c
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.496766
Received: NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(94, ARG0, randomUniformWeights, InputLayer(ARG0))), 100)
	With Hash 8c3e8fb622a9db1ee089917315d2795eb8141ced40d3bf4d99353a82dae24fc7
	With Fitnesses: (0.04456300015691195, 752001.0)
	With Age: 1.0
TimeStamp | 2020-08-22 21:23:09.496861
Received: ScalarDivide(AdjustConstrastGamma(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 10.0, 10.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), myFloatDiv(0.1, 1.0))
	With Hash 8ffcc9562d3a16afdc8ed4985f3b8d964d64848d89bdc7c4a32bff799f1ca490
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.496997
Received: MorphCloseCross(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 55, 8)
	With Hash 90971386879cc0553a7c39a4f7a4ad89b255b07c48b13de1326a97886b44f0ff
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.497084
Received: Sine(MorphBlackhatCross(ContourMask(CreateBBox(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_2, 0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), greaterThan(myFloatIntDiv(0.1, 50), ifThenElseFloat(trueBool, 1.7802122587595708, -2.762997359660384)), notEqual(myFloatSub(0.01, 1.0), passFloat(1.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))))
	With Hash 937a0bc386d9aa375ece01904c5ab04ff74e1da8b5c7fa68815e1bccf3557d6c
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.497273
Received: mySpectralEmbedding(ARG0, TriState.FEATURES_TO_FEATURES, 7)
	With Hash 93efd8c2a6de9c4712efa36f2aedc013dfd18fb1e99d544f9d2ca2f60359d283
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.497344
Received: MeanFilter(MorphGradientEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, falseBool, 8), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), passBool(falseBool))
	With Hash 95600b631bd20984ea1a3a6a8d0dfacad12ffdf388dbafc01e1905bffba22cb0
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.497440
Received: HighpassSobelDerivative(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 50, 9187, 51, 100, 128)
	With Hash 95e41755c83a819725cc259ddc9c6fddfa4e04dbf8e3c213e7d6210323bbd162
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.497521
Received: ScalarMultiply(myPCA(ARG0, TriState.FEATURES_TO_FEATURES, 55, trueBool), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myFloatIntSub(0.1, 8))
	With Hash 964c36ee25b8db05e2398329a20a139179387434078cb559ccdf33776e8f5527
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.497617
Received: Cv2Sqrt(Prerejection(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 10, 69, 0.01), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0))
	With Hash 97740522a63ed5be75e7dac14ce6aed5f25881d7fa4a5a7e649d2ec422c45cda
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.497712
Received: SkiMedianFilter(MorphGradientRect(RegionalMaxima(ContoursConvexConcave(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, falseBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), ifThenElseFloat(trueBool, 100.0, -0.1922722496984548)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), lessThanOrEqual(myFloatSub(0.01, 1.0), myFloatSub(0.01, 100.0)), myAnd(lessThan(0.1, 100.0), greaterThan(100.0, 10.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), lessThanOrEqual(myFloatDiv(passFloat(4.639157203718559), myFloatMult(0.01, 100.0)), ifThenElseFloat(notEqual(-0.5172209868777138, 10.0), myFloatIntSub(0.01, 8), passFloat(10.0))))
	With Hash a0616c56dde2dda78ccbe641b80acf2e1c0e753f77b8692109cee7ea5dac1d95
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.497951
Received: MyCumSum(ARG0, passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), lessThan(myFloatSub(myIntToFloat(notEqual(0.01, 0.01)), myIntToFloat(100)), myFloatDiv(myFloatMult(-4.271518007828476, myFloatSub(10.0, 0.1)), myFloatIntMult(myFloatIntSub(-2.3830347558036244, falseBool), myOr(trueBool, trueBool)))))
	With Hash a1369ddda4ac9a28542b9c51710970e7bff60464ebe908ae1c79f65c854ad61b
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.498111
Received: WindowCosine(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1)
	With Hash a5db15c20725d5a65e210dc7b455cf17b6ae8c5455bc2426774e16dee24556d4
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.498186
Received: LowpassFilterBilateral(MinimumToZero(MyDWT(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, falseBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), lessThan(passFloat(1.0), myFloatIntAdd(0.1, 7)), lessThan(myFloatSub(100.0, 10.0), myFloatIntSub(100.0, 128)), myFloatToInt(ifThenElseFloat(trueBool, 0.01, 10.0)))
	With Hash a7c7b163911121ca8a41d0147c0de33b790e617156fe44e93d7ee9a98a675243
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.498344
Received: MySnapshot(MorphOpenEllipse(ToUint8Scale(MySum(Tokenizer(ARG0, 150, 30), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2)), TriState.FEATURES_TO_FEATURES, passAxis(passAxis(Axis.AXIS_1))), TriState.STREAM_TO_STREAM, passAxis(passAxis(passAxis(Axis.FULL))), myIntAdd(myIntMult(ifThenElseBool(trueBool, trueBool, falseBool), greaterThan(0.1, 0.01)), myOr(notEqual(10.0, 0.1), trueBool)), passInt(myIntDiv(myAnd(falseBool, falseBool), greaterThan(10.0, 1.0)))), ARG0, passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(Axis.AXIS_1)), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), myIntAdd(myNot(passBool(greaterThanEqual(10.0, 1.5266903777963226))), myIntDiv(myFloatToInt(ifThenElseFloat(trueBool, 10.0, 100.0)), passInt(greaterThanEqual(0.01, 100.0)))))
	With Hash a8b12996718d1d164cf4bcdb0875be77a444418e6b17bf49252af5931dc9a639
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.498615
Received: MatchedFiltering(ContourMask(HighpassFourierEllipsoid(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, trueBool), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), myIntAdd(ifThenElseBool(falseBool, trueBool, trueBool), myIntAdd(255, 0)))
	With Hash aa8ad8c8825dd9954c9b8df66943b0e19dbd00fd536048729d4f7017101c9613
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.498748
Received: MorphBlackhatCross(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 32, falseBool)
	With Hash adff9c2ace5da98f2ef7ca59df2048bf33924f532ae5cc74d19eb4a776029494
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.498826
Received: NNLearner(ARG0, OutputLayer(SkiMedianFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 4), EmbeddingLayer(9, ContourMaskMaxExtentEnclosingCircle(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 100.0), randomUniformWeights, InputLayer(ARG0))), 95)
	With Hash b19c778aaa375968d2161708bec545b1829b5bc376a83640504a5d326e2a9ae4
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.498949
Received: MeanShiftClustering(Prerejection(EmadeDataIntegerDivide(MorphCloseCross(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 8, 150), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), myIntToFloat(64)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), passBool(passBool(falseBool)), passInt(7), 100.0))
	With Hash b2291691ed97109906fd9923c567bcb5eef1eb28e2b1f1fa7db4877e8e1b6baf
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.499089
Received: birch_clustering(WindowBlackman(ArcTangent(EmadeDataMultiplyInt(MyDWT(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 61), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), greaterThan(0.01, 0.1)), TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myFloatAdd(ifThenElseFloat(greaterThanEqual(10.0, 100.0), myFloatMult(0.1, 1.0), myFloatSub(0.1, 0.1)), myFloatSub(myFloatDiv(0.1, 0.1), myIntToFloat(6)))), myFloatDiv(myIntToFloat(greaterThanEqual(myFloatDiv(0.1, 1.0), passFloat(0.01))), myFloatIntSub(myFloatIntMult(myIntToFloat(6), lessThanOrEqual(-0.051486290484572095, -1.769474421690055)), myFloatToInt(myIntToFloat(55)))), myOr(trueBool, myOr(greaterThan(myFloatIntMult(1.0, 6), myFloatIntSub(0.01, 1)), lessThan(myFloatSub(0.1, 0.01), myFloatIntMult(0.1, 8)))), passInt(passInt(greaterThanEqual(100.0, myFloatSub(1.0, 0.01)))))
	With Hash b45cbe07ead3dd8a35436e364a7a71fc018a589b0592ebf992c7dd3020308a8e
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.499403
Received: Cv2Multiply(ARG0, MaximumWindow(SEPObjectDetection(ThresholdBinary(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 100.0, 50), passInt(6), myFloatIntDiv(1.0, 10), myFloatIntAdd(0.1, 6)), myFloatToInt(myFloatIntAdd(0.1, 32)), lessThanOrEqual(passFloat(10.0), myFloatIntSub(10.0, 150)), myFloatIntDiv(0.01, myOr(trueBool, trueBool))), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL))), passAxis(passAxis(passAxis(Axis.AXIS_1))))
	With Hash b467db8ef09bca927fb175da23757532af0218561d32853c1327272f277fcb41
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.499603
Received: ContourMaskMaxSolidity(GetCentroids(ToUint8Scale(MultiplySpectrum(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(Axis.AXIS_2)), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), -2.191485714965371)
	With Hash b74806740807a1bd4ba1bcd46fcc8369f761952ce145be3db942d61616c5f00b
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.499741
Received: ObjectDetection(myVarThresh(MyAverager(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 64), passTriState(TriState.STREAM_TO_STREAM), myFloatIntSub(10.0, 9)), myIntAdd(passInt(5553), ifThenElseBool(trueBool, trueBool, falseBool)), myFloatMult(passFloat(1.0), passFloat(0.1)), myFloatIntSub(myFloatIntSub(1.0, 7), myIntMult(55, 100)))
	With Hash b794b563661d446030b81487d6ed3e3dc5a624634fa10913cbb834a4355029d0
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.499885
Received: Round(Cv2LessThan(FractionDouble(GaussianFilter(MyAutoCorr(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myFloatIntDiv(1.0, trueBool)), GaussianPeakEM(Round(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.AXIS_2)), passInt(myOr(falseBool, falseBool))), EmadeDataNumpyMultiplyPair(ConvertBW(MorphOpenEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 255, 8), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1)), ContoursAll(Stemmatizer(ARG0, 50, 3), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), passAxis(passAxis(passAxis(Axis.FULL)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))))
	With Hash bbaa2bd452823b48a0783a807a46165af6b260a0ba657e679861f60966fe1b3c
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.500237
Received: RemoveFeature(ThresholdBinaryInverse(ContourMaskMinSolidity(ContoursMaxArea(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myIntMult(32, 43)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), myFloatAdd(myFloatIntMult(0.01, 4684), myFloatDiv(100.0, 0.1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(Axis.AXIS_0), notEqual(myFloatMult(myFloatIntSub(0.01, 55), myFloatMult(-1.2501876193811476, 1.0)), myFloatSub(myFloatSub(1.0, 0.1), myFloatMult(100.0, 0.1))))
	With Hash bcb00801fdbab03560453f9dfdb721a4db003e80a5c036a7607a4e662b23b183
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.500440
Received: SpectralClustering(ThresholdBinaryMax(MaximumFilter(ImagePeakFinder(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passBool(falseBool), myFloatMult(0.01, 1.0)), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(passAxis(Axis.FULL)), greaterThanEqual(myFloatIntDiv(0.01, 255), myFloatIntMult(10.0, -15)), myFloatDiv(myIntToFloat(7), myFloatIntAdd(0.01, 8))), passBool(greaterThanEqual(0.01, myFloatAdd(1.0, 0.1))), -4.803354050518086)
	With Hash bcb584fa4654f42b96d6d1845b5a91d4b9226b5c454c07772a2eb37dcb85f43a
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.500620
Received: ContourMaskMinEnclosingCircle(ThresholdNLargest(ThresholdNLargestBinary(FFT(ScalarDivide(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 0.01), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), notEqual(myFloatSub(3.7952197136671497, 10.0), passFloat(0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myIntAdd(passBool(equal(1.0, 0.01)), myIntMult(myAnd(trueBool, trueBool), greaterThanEqual(10.0, -2.9539607246556687)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), myFloatDiv(myFloatIntAdd(myFloatDiv(myFloatSub(0.01, 10.0), ifThenElseFloat(falseBool, 10.0, 100.0)), equal(myFloatIntDiv(0.1, 4), ifThenElseFloat(falseBool, -1.4335154156459797, 10.0))), myFloatAdd(passFloat(myFloatMult(1.0, 0.1)), myFloatIntDiv(myFloatIntDiv(10.0, 150), equal(1.0, 0.1)))))
	With Hash beae0d715ae6537a611af5eb4fbd5e106b91e24283f4eeaf85c62d9391fd1b8e
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.500917
Received: FFT(ThresholdNLargestBinary(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 50), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1))
	With Hash c046354fe2e8cc78f31eb10ac5b66e6ea6d836ea832a6011fdce4f146c0bd40b
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.501032
Received: ContourMaskConvex(MorphGradientRect(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 8, 32), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), greaterThan(0.01, 0.1))
	With Hash c07f09ae0f50e1762de960f787c0edba17868e1ccefa93250d1069f871896d95
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.501132
Received: Hog(ContourMaskMinArea(EmadeDataMultiplyInt(MyDCT(EmadeDataAddFloat(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 1.0792845646876845), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), myIntDiv(2, 10), myAnd(trueBool, falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myFloatToInt(myFloatMult(1.0, 0.1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myFloatIntSub(passFloat(myFloatIntMult(0.1, falseBool)), myIntMult(myAnd(falseBool, trueBool), greaterThanEqual(10.0, 0.1)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), notEqual(passFloat(myFloatSub(ifThenElseFloat(falseBool, 100.0, 100.0), myFloatSub(-2.4732734177376594, 100.0))), passFloat(ifThenElseFloat(lessThan(2.8231043353087752, 0.1), myFloatIntDiv(0.01, 150), myFloatDiv(10.0, 0.01)))), myOr(lessThanOrEqual(myFloatDiv(myFloatMult(10.0, 0.1), myFloatIntMult(1.0, 255)), ifThenElseFloat(notEqual(10.0, 1.0), myFloatIntSub(10.0, 2), myFloatIntMult(1.0, falseBool))), greaterThan(myFloatAdd(myFloatSub(-0.15203650318878204, 0.01), myFloatDiv(0.01, 100.0)), ifThenElseFloat(greaterThan(0.1, 4.422632359897774), myFloatIntDiv(0.01, 0), passFloat(10.0)))), myIntAdd(lessThan(myFloatDiv(myFloatIntMult(0.1, 0), ifThenElseFloat(trueBool, 1.0, 100.0)), passFloat(myFloatSub(-1.6543005146323364, -0.0877611542883514))), myIntSub(lessThanOrEqual(myFloatDiv(0.01, 0.01), myFloatDiv(0.01, 0.1)), myFloatToInt(myFloatMult(0.0298962306284265, 0.01)))), lessThan(myFloatIntSub(myFloatSub(ifThenElseFloat(trueBool, 1.0, 0.1), myFloatSub(10.0, 100.0)), passBool(myNot(falseBool))), myFloatIntAdd(myIntToFloat(lessThanOrEqual(1.0, 100.0)), equal(myFloatDiv(0.1, 10.0), myFloatDiv(0.01, 100.0)))))
	With Hash c5bb60695d34d2038a7b431a703e15e2cdac5338264aee8a3692958569443004
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.501621
Received: ArcCosine(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL)
	With Hash c74f6340171e9e9d9e63bc24d222654228f393d857110369ce5dd4d1d44a0687
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.501696
Received: MyDiff(CutDataLead(Cv2Sqrt(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passBool(trueBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)))
	With Hash c8a472160d8f0a76a68d39296c2f5ef7d336e40150688195e8403617ea13404f
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.501803
Received: NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(3722, ARG0, randomUniformWeights, InputLayer(ConvolveChannelMerge(ARG0, 2)))), 100)
	With Hash cad8182932824f904ef85828d03bb64435885b7798ae5197350a40c856cdbf13
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.501888
Received: myIfThenElse(SepDetectionWindow(WindowGaussian(ConvertToCounts(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), ifThenElseFloat(falseBool, 1.0, 1.0)), myNot(myNot(falseBool)), notEqual(myFloatIntDiv(1.0, falseBool), myFloatAdd(0.9353847326723654, -1.1692407991663014)), myFloatMult(myFloatIntAdd(-4.457970858025218, 9), ifThenElseFloat(trueBool, 0.01, 0.01))), MeanWithHole(EmadeDataNumpyMultiplyFloat(MinimumToZero(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatSub(1.0, 0.1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), lessThanOrEqual(myFloatAdd(1.0, 1.4831844220014245), myFloatMult(-3.291612748715375, 0.01)), myFloatToInt(myFloatIntDiv(0.01, 5))), WindowKaiser(ToFloatNorm(RandomShuffle(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatIntDiv(myFloatIntSub(0.01, 15), greaterThanEqual(10.0, 10.0)), falseBool), passTriState(TriState.STREAM_TO_STREAM), TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, 150)
	With Hash cb6a426feb8eb77eeebbd0cdb61997bed22d8ecdbdd975e2ad4c6d07fb2fe9e7
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.502206
Received: MeanFilter(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 0)
	With Hash cbc5036db27087e47383e1d9843657780e09bbbbcafcdd61333b6a7246555371
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.502279
Received: EmadeDataNumpyMultiplyInt(WindowBackmanNuttall(Cv2Subtract(MyCumProd(Cv2Min(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), greaterThanEqual(100.0, 100.0)), CountVectorizer(myVarThresh(ARG0, TriState.STREAM_TO_FEATURES, 100.0), ifThenElseBool(trueBool, trueBool, trueBool), myIntAdd(9, 1), passBool(falseBool), equal(100.0, 0.1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), notEqual(myFloatAdd(myFloatAdd(myFloatIntSub(1.0, 1), myFloatSub(1.0, 1.0)), myFloatIntDiv(myFloatIntDiv(10.0, 775), myIntDiv(6, 0))), myFloatMult(myFloatAdd(myFloatSub(1.0, 0.01), myFloatIntMult(0.01, 150)), myFloatIntAdd(myIntToFloat(4), myAnd(trueBool, trueBool)))))
	With Hash cca759e04cf66bc6e29ba74c2e03a9ad539d7d7899d16a3ed72486fb451d67f2
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.502582
Received: LabelObjects(MyDiff(MatchedFiltering(mySelKBest(ARG0, TriState.FEATURES_TO_FEATURES, 150, 128), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myIntMult(3591, 10)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))))
	With Hash cff6467c2c86b4bd6648f357d2a95b7862365bb0ee722cf5da3956efbca72912
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.502716
Received: NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 92)
	With Hash d438b6d25a7be00af4b03588fe1d66bfcf2a9ef0616e1bc21dce65c5b29041c0
	With Fitnesses: (0.044751294523772134, 800001.0)
	With Age: 1.0
TimeStamp | 2020-08-22 21:23:09.502801
Received: SpectralClustering(ARG0, passBool(lessThan(myFloatIntDiv(passFloat(0.01), equal(0.1, 0.01)), myFloatAdd(myFloatAdd(-4.404746095441986, 10.0), myFloatIntSub(4.3254805991726375, 100)))), myFloatAdd(myFloatIntMult(myFloatDiv(myFloatIntDiv(1.0, 50), 1.0), 6), 100.0))
	With Hash d619d6e945bf9357c557839c7004a935b1a8d182348b0bd15015f3731bcd07cc
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.502927
Received: AbsoluteValue(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL)
	With Hash d7a68f64d9c825bd4affec288d0cc640553a00669e006d52213ac2d7c7f20613
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.503010
Received: ContoursMinLength(DBSCANClustering(ARG0, 100.0, 10.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myOr(trueBool, trueBool))
	With Hash d9e0faf962a1a77f5fba55a77d2f9e6f0af4dd9004c8c797dbe1d59148280ab4
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.503099
Received: myICA(ContourMaskMinArea(GradientMagnitude(Tokenizer(ARG0, 7, 518), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), lessThanOrEqual(0.1, 1.6548537041261326)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatIntMult(myFloatIntMult(0.01, 5), myIntMult(5, 1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), lessThan(myFloatIntSub(myFloatMult(0.1, 0.1), greaterThanEqual(-1.62545880996786, 0.01)), myFloatIntMult(myFloatIntAdd(100.0, 50), notEqual(0.01, 0.01))), lessThan(myFloatDiv(ifThenElseFloat(falseBool, 100.0, 0.1), myFloatIntDiv(10.0, 6)), myFloatMult(myFloatSub(10.0, 0.01), myFloatSub(0.01, 0.1))))
	With Hash df790e07a8ce30a2b67b7ec44d71deac51919245233567eda2dbbdc92e4a3b42
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.503315
Received: ContoursMaxArea(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 10)
	With Hash e31d89fea0e2e3de1ebc378d7f6d4297761799aed97e847196e287d10bb642d9
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.503384
Received: MaxLoc(BitwiseAnd(ContourMaskRangeLength(Round(StdDeviation(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 100), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), Axis.AXIS_0, equal(passFloat(10.0), myFloatDiv(0.01, 0.2274954885701046)), passBool(ifThenElseBool(falseBool, trueBool, falseBool))), ThresholdBinary(MyCumSum(LocalPoolingMax(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 6), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), 7), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), 100.0, myOr(greaterThanEqual(-4.171750319883218, 0.01), notEqual(10.0, 1.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), passAxis(passAxis(passAxis(Axis.AXIS_0)))), TriState.FEATURES_TO_FEATURES, passAxis(passAxis(passAxis(passAxis(Axis.FULL)))))
	With Hash e44ee86046a150a6028590aa9f4b39ee08ae38308a2e891ccb83d7d8b784e332
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.503644
Received: HighpassFourierUniform(Cv2Pow(MySum(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), lessThan(0.1, 0.01)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), 100)
	With Hash eb3a1050b4bd8b5d20aeded66047c6b74c55bd9cff7ae6e74ec1c2b0ff37dfe6
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.503774
Received: ScalarMin(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 32)
	With Hash eb6478b42dc875e7bcb52266d36b118fb5c407e7ff11ac75880fb69e0999dba4
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.503850
Received: Cv2Divide(WindowBlackman(WindowBlackmanHarris(NumpyDivide(Sentiment(ARG0, trueBool), SpectralClustering(ARG0, 12, 0.01), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatIntAdd(myFloatMult(myFloatDiv(0.01, 0.01), ifThenElseFloat(falseBool, 1.0, 10.0)), myIntMult(equal(0.1, 1.0), myIntDiv(255, falseBool)))), Cv2Pow(Cv2LessThan(FractionTriple(FractionTriple(ARG0, ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_1, Axis.FULL, 7), myConcatenate(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_0), Cv2iDCT(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.FULL), passAxis(Axis.AXIS_1), ifThenElseBool(falseBool, trueBool, falseBool)), Cv2GreaterThan(Cv2Log(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), MorphTophatCross(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 55, 8), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), notEqual(myFloatSub(myFloatIntSub(0.1, 1), myIntToFloat(3)), myFloatIntSub(myFloatIntDiv(100.0, 55), myNot(falseBool)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))))
	With Hash ecc770dc211e87507f7b2003d06df88d99a890553d48f75138686e4c3c59254a
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.504348
Received: mySelFdr(ARG0, TriState.STREAM_TO_STREAM, 6, 0.01)
	With Hash ee23d1ac02d7ae5e005211c221d9757ee1cbce2b7920213c1246a638b225a241
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.504423
Received: NNLearner(ARG0, OutputLayer(CutDataLead(Cv2Sqrt(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), TriState.FEATURES_TO_FEATURES, passAxis(Axis.AXIS_2), greaterThan(1.0, 100.0)), EmbeddingLayer(7, ARG0, randomUniformWeights, InputLayer(ARG0))), 0)
	With Hash f11a7f71565204ad84e135ee651608a932fdfe7e963151277b22328ae810c839
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.504535
Received: mySelKBest(MorphGradientEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 4, 6), passTriState(TriState.FEATURES_TO_FEATURES), greaterThan(0.1, 100.0), lessThanOrEqual(100.0, 100.0))
	With Hash f1c2f0deeb02cf53f438f4ef5b3b44f978a8d9eac497034460e985f7f37f330d
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.504632
Received: Cv2Divide(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_2)
	With Hash f1cb75a62bd1e4b988c24bba9e5075fb55d6dbee50f305d2be994963a9dd62de
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.504709
Received: EmadeDataMultiplyFloat(MultiplyTransposed(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, falseBool), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), myFloatIntDiv(0.01, 128))
	With Hash f35a8f379dca7ea453dcd6de5ee8e9a6c40003b5b3f3ae26a6b0f08ea451e92b
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.504801
Received: BitwiseNOT(ImagePeakFinder(Cv2AbsDiff(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_2, Axis.AXIS_1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL)), TriState.STREAM_TO_FEATURES, passAxis(passAxis(Axis.AXIS_2)))
	With Hash f840721fdac8f65d37d3acb3bf1879d2edbfea640f8df78f121e9bcbffa0cc77
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.504904
Received: SpectralClustering(HighpassFourierShift(SobelFilter(CopyStreamToTarget(ContoursAll(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myNot(greaterThan(ifThenElseFloat(trueBool, 0.1, 0.01), myFloatIntSub(100.0, 55)))), greaterThanEqual(myFloatIntSub(myFloatIntSub(myFloatSub(10.0, 10.0), equal(1.0, 0.01)), passInt(greaterThan(100.0, 0.01))), myFloatMult(myFloatIntMult(myFloatIntDiv(0.1, 32), lessThanOrEqual(1.0, 0.1)), myFloatAdd(ifThenElseFloat(falseBool, 100.0, 1.0), myFloatDiv(1.0, 0.01)))), myFloatDiv(myFloatIntAdd(myFloatIntSub(passFloat(0.01), ifThenElseBool(falseBool, falseBool, falseBool)), greaterThan(myFloatDiv(10.0, 0.01), myIntToFloat(32))), passFloat(myFloatIntMult(myFloatDiv(100.0, 0.1), myIntDiv(50, 0)))))
	With Hash f88087ed4d5495f7afd53827b93682a984683bab82a129428988c9965e53598e
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.505181
Received: SetToZeroIf>Data&Factor(ContoursMaxLength(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 8), Cv2Add(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.AXIS_1), TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_0), myFloatIntSub(10.0, 4666))
	With Hash f994a3455bb29bed5c42323b9b2c7aa8c909eb7edba06897a26adb5928c12bbe
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.505304
Received: Select3D(ARG0, passTriState(passTriState(TriState.STREAM_TO_STREAM)), Axis.AXIS_1, ifThenElseBool(ifThenElseBool(trueBool, trueBool, trueBool), myNot(trueBool), myOr(trueBool, trueBool)), myIntMult(ifThenElseBool(trueBool, falseBool, falseBool), equal(0.01, 0.1)), myNot(trueBool), falseBool, myOr(myNot(trueBool), ifThenElseBool(trueBool, trueBool, falseBool)), myAnd(lessThanOrEqual(100.0, 0.1), lessThanOrEqual(3.189531934735939, 100.0)))
	With Hash fc58c57caa7e381b1a3fb834fbdfdb9ab5a17df50eac96175ed56f08ebe10755
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:23:09.505464
Received: MySnapshot(ContourMaskConvex(Cv2Divide(Sine(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), Cv2Max(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), myNot(greaterThanEqual(100.0, 100.0))), EmadeDataAddInt(WienerFilter(ThresholdToZeroPixelFloat(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), lessThanOrEqual(myFloatIntSub(0.01, 128), passFloat(0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), passAxis(passAxis(passAxis(Axis.AXIS_2))), notEqual(ifThenElseFloat(ifThenElseBool(falseBool, trueBool, falseBool), passFloat(2.9900549360085655), ifThenElseFloat(trueBool, 0.01, -4.268745342159392)), myFloatIntDiv(myIntToFloat(255), myIntAdd(4, 128))))
	With Hash ffcede379b52f9247682501fda1fb5440c45a2839972280837b5836476e0aaa0
	With Fitnesses: (inf, inf)
	With Age: 0
Elite Pool has: 51 individuals, and 51 are unique
evaluated offspring has: 125 individuals, and 124 are unique
Gene Pool has: 176 individuals, and 169 are unique
Got Redundant LowpassFilterAverage(Cv2DFTReal(HighpassFourierShift(HighpassUnsharpMask(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 1, 150, 8), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), notEqual(0.01, 0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myIntDiv(myIntDiv(myIntSub(128, 0), ifThenElseBool(falseBool, falseBool, trueBool)), myIntMult(equal(1.0, 0.01), notEqual(10.0, 10.0)))) (inf, inf) 6318cdcdb5bbaa06ca7eca8460239e83b05afda310b23aeaf1d2cd8a6f3065c1
Got Redundant ScalarMax(MorphErosionEllipse(ArcSine(MyNorm(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 12), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myIntAdd(myIntDiv(9, 7), myIntDiv(64, 64)), myFloatToInt(myFloatSub(0.1, 1.0)), myIntDiv(myNot(falseBool), lessThan(10.0, 100.0))), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(passAxis(Axis.AXIS_1))), equal(myFloatDiv(10.0, myFloatIntSub(0.01, 3)), myFloatSub(myFloatMult(1.0, 0.01), myFloatAdd(10.0, 2.8038385610904095)))) (inf, inf) 579ea7cc680bfc6ae99c88fbbd8f9a1e2dea36c251fe6a85dea04be5f8232309
Got Redundant SVCMulti(ARG0) (inf, inf) 648a3973d6585986482d65feb0fc12ed54a29df856626f34ead937092fdcf663
Got Redundant NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(97, ARG0, randomUniformWeights, InputLayer(ARG0))), 100) (0.04515926565196926, 776001.0) ce9a5c870b097d6fd6d1a0c49eae1ddad13823487145a6aba4be82828b9822c0
Got Redundant CreateBBox(LowpassFilterEllipsoid(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 50), WindowHamming(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, falseBool), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_2), myNot(falseBool)) (inf, inf) 08737565aa8eb6c8bf35820532f9b38722a3e66b1d0a033ca03f197a3531d9d3
Got Redundant SVCMulti(ARG0) (inf, inf) 648a3973d6585986482d65feb0fc12ed54a29df856626f34ead937092fdcf663
Got Redundant Cv2Min(ContoursAll(Cv2DCT(HighpassFourierUniform(DogDetection(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 100.0, 0.7245293173604006, 100.0, 100.0, 1.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), myAnd(falseBool, falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL))), TriState.FEATURES_TO_FEATURES, passAxis(passAxis(passAxis(Axis.AXIS_1)))), myPCA(MorphErosionEllipse(Prerejection(ARG0, passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passBool(trueBool), greaterThan(10.0, 1.0), passFloat(1.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myNot(ifThenElseBool(falseBool, falseBool, trueBool)), myAnd(notEqual(2.483547608190869, 0.422436862800617), trueBool), 150), passTriState(TriState.FEATURES_TO_FEATURES), greaterThanEqual(myIntToFloat(100), myFloatMult(myFloatSub(10.0, 0.01), ifThenElseFloat(trueBool, 0.1, 0.01))), equal(ifThenElseFloat(notEqual(100.0, 10.0), 10.0, myFloatIntDiv(1.0, 3)), myIntToFloat(9))), passTriState(TriState.STREAM_TO_STREAM), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2))))) (inf, inf) 0e75dcc516f30c69e299ad2c7ad4f8164b1314c312d748256284b59690dec0cc
Sanity check after removal of redundant individuals
Elite Pool has: 51 individuals, and 51 are unique
evaluated offspring has: 125 individuals, and 124 are unique
Gene Pool has: 169 individuals, and 169 are unique
Before History Addition | 2020-08-22 21:23:10.246610
After History Addition | 2020-08-22 21:23:14.838847
15 FullDataSet individuals
Gene pool assembled
After adjust for data set 169 out of 169 are unique
After select nsga2 169 out of 169 are unique
NSGAII Completed
15 FullDataSet individuals
169 total individuals
Before Uneval Count Query | 2020-08-22 21:23:23.488266
After Uneval Count Query | 2020-08-22 21:23:23.641771
180 individuals evaluated thus far
Right before binary tournament 169 out of 169 are unique
Parents Selected 32 from 169
31 out of 32 are unique
[0.5208333333333701, 0.4791666666666298, inf, inf, 0.7708333333332964, inf, inf, inf, 1.0, inf, inf, inf, inf, inf, inf, inf, inf, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Updating Pareto Front
Pareto Front Updated
Before Pareto Front Addition | 2020-08-22 21:23:24.044850
After Pareto Front Addition | 2020-08-22 21:23:24.687266
Pareto Front Updated
(0.044406088184528514, 800001.0)
(0.04446885297348191, 792001.0)
(0.04456300015691195, 752001.0)
(0.04506511846853911, 744001.0)
(0.04515926565196926, 736001.0)
Hypervolume:  45109424.33547783
Pareto Individual 0 after gen 1 is NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 98)(0.044406088184528514, 800001.0) Age 1.0
Pareto Individual 1 after gen 1 is NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(99, ARG0, randomUniformWeights, InputLayer(ARG0))), 100)(0.04446885297348191, 792001.0) Age 1.0
Pareto Individual 2 after gen 1 is NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(94, ARG0, randomUniformWeights, InputLayer(ARG0))), 100)(0.04456300015691195, 752001.0) Age 1.0
Pareto Individual 3 after gen 1 is NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(93, ARG0, randomUniformWeights, InputLayer(ARG0))), 100)(0.04506511846853911, 744001.0) Age 1.0
Pareto Individual 4 after gen 1 is NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(92, ARG0, randomUniformWeights, InputLayer(ARG0))), 100)(0.04515926565196926, 736001.0) Age 1.0
Updated Elite Pool
Finished Calculating Statistics
Starting Gen 2
Producing offspring
After cloning from parents 31 out of 32 are unique
Additionally 32 individuals are unique in memory
And 110 mains and adfs are unique
Mating offspring
Mated 64 individuals
Mating offspring Ephemerals
Mated 70 individuals ephermerals
Mating offspring headless chicken
Mated 12 individuals
Mating offspring Ephemerals headless chicken
Mated 42 individuals ephermerals
Mutating offspring (Node Replace)
Mutated 119 individuals
Heal Offspring
[<deap.gp.Terminal object at 0x7f46a6ad0120>]
[<deap.gp.Primitive object at 0x7f46a6a54458>, <deap.gp.Primitive object at 0x7f46a6a612c8>, <deap.gp.Primitive object at 0x7f46a6a55958>, <deap.gp.Primitive object at 0x7f46a6a61048>, <deap.gp.Primitive object at 0x7f46a6a59188>, <deap.gp.Terminal object at 0x7f46a6ad0120>, <deap.gp.TriStateGen object at 0x7f469f276620>, <deap.gp.AxisGen object at 0x7f469f276678>, <deap.gp.Terminal object at 0x7f46a6a6a0d8>, <deap.gp.Primitive object at 0x7f46a6a675e8>, <deap.gp.Terminal object at 0x7f46a6ad0120>, <deap.gp.Primitive object at 0x7f46a6a67188>, <deap.gp.Terminal object at 0x7f46a6a6a3a8>, <deap.gp.Terminal object at 0x7f46a6ad0120>, <deap.gp.Terminal object at 0x7f46a6a6a798>, <deap.gp.Primitive object at 0x7f46a6a67138>, <deap.gp.Terminal object at 0x7f46a6ad0120>, <deap.gp.Terminal object at 0x7f46a6a6a4c8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.TriStateGen object at 0x7f469f276728>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.TriStateGen object at 0x7f469f276780>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.AxisGen object at 0x7f469f2767d8>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.AxisGen object at 0x7f469f276830>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.TriStateGen object at 0x7f469f26a410>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.AxisGen object at 0x7f469f26a468>, <deap.gp.Terminal object at 0x7f46a6a6a120>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.TriStateGen object at 0x7f469f26a4c0>, <deap.gp.Primitive object at 0x7f46a6a64d18>, <deap.gp.Primitive object at 0x7f46a6a66638>, <deap.gp.Primitive object at 0x7f46a6a66188>, <deap.gp.Terminal object at 0x7f46a6a6a0d8>, <deap.gp.Terminal object at 0x7f46a6a6a240>, <deap.gp.Terminal object at 0x7f46a6a6a0d8>, <deap.gp.Primitive object at 0x7f46a6a66458>, <deap.gp.Primitive object at 0x7f46a6a66138>, <deap.gp.Primitive object at 0x7f46a6a668b8>, <deap.gp.myBigRandInt object at 0x7f469f26a518>, <deap.gp.Primitive object at 0x7f46a6a66458>, <deap.gp.Terminal object at 0x7f46a6a6a0d8>, <deap.gp.Terminal object at 0x7f46a6a6a1b0>, <deap.gp.Primitive object at 0x7f46a6a668b8>, <deap.gp.Primitive object at 0x7f46a6a66318>, <deap.gp.Terminal object at 0x7f46a6a6a708>, <deap.gp.Terminal object at 0x7f46a6a6a2d0>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.TriStateGen object at 0x7f469f26a570>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.AxisGen object at 0x7f469f26a5c8>, <deap.gp.Primitive object at 0x7f46a6ace8b8>, <deap.gp.Primitive object at 0x7f46a6a668b8>, <deap.gp.Primitive object at 0x7f46a6a64cc8>, <deap.gp.Primitive object at 0x7f46a6a66458>, <deap.gp.Terminal object at 0x7f46a6a6a0d8>, <deap.gp.myGenFloat object at 0x7f469f26a620>, <deap.gp.Primitive object at 0x7f46a6a66278>, <deap.gp.Terminal object at 0x7f46a6a6a090>, <deap.gp.Terminal object at 0x7f46a6a6a3a8>, <deap.gp.Primitive object at 0x7f46a6a66458>, <deap.gp.Primitive object at 0x7f46a6a66278>, <deap.gp.Primitive object at 0x7f46a6a66228>, <deap.gp.Terminal object at 0x7f46a6a6a1b0>, <deap.gp.Terminal object at 0x7f46a6a6a120>, <deap.gp.Primitive object at 0x7f46a6a64c28>, <deap.gp.Terminal object at 0x7f46a6a6a168>, <deap.gp.Terminal object at 0x7f46a6a6a0d8>, <deap.gp.Primitive object at 0x7f46a6a66138>, <deap.gp.Primitive object at 0x7f46a6a66368>, <deap.gp.Terminal object at 0x7f46a6a6a090>, <deap.gp.Terminal object at 0x7f46a6a6a120>, <deap.gp.Primitive object at 0x7f46a6a66638>, <deap.gp.Terminal object at 0x7f46a6a6a120>, <deap.gp.Primitive object at 0x7f46a6a66408>, <deap.gp.Primitive object at 0x7f46a6a64ef8>, <deap.gp.Terminal object at 0x7f46a6ad0fc0>, <deap.gp.Primitive object at 0x7f46a6a64e08>, <deap.gp.Primitive object at 0x7f46a6a66188>, <deap.gp.Primitive object at 0x7f46a6a66188>, <deap.gp.Terminal object at 0x7f46a6a6a1b0>, <deap.gp.Terminal object at 0x7f46a6a6a360>, <deap.gp.Primitive object at 0x7f46a6a64c28>, <deap.gp.Terminal object at 0x7f46a6a6a120>, <deap.gp.myGenFloat object at 0x7f469f26a678>, <deap.gp.Primitive object at 0x7f46a6a66638>, <deap.gp.Primitive object at 0x7f46a6a663b8>, <deap.gp.Terminal object at 0x7f46a6a6a0d8>, <deap.gp.myMedRandInt object at 0x7f469eef2678>]
<class 'deap.gp.PrimitiveTree'>
[<deap.gp.Terminal object at 0x7f46a6ad0120>]
[<deap.gp.Primitive object at 0x7f46a6a66d18>, <deap.gp.Primitive object at 0x7f46a6ad2d18>, <deap.gp.Primitive object at 0x7f46a6a54818>, <deap.gp.Primitive object at 0x7f46a6a64228>, <deap.gp.Primitive object at 0x7f46a6a55c28>, <deap.gp.Terminal object at 0x7f46a6ad0120>, <deap.gp.TriStateGen object at 0x7f469ee76fc0>, <deap.gp.AxisGen object at 0x7f469ee7c048>, <deap.gp.Terminal object at 0x7f46a6a6a558>, <deap.gp.Terminal object at 0x7f46a6a6a240>, <deap.gp.Primitive object at 0x7f46a6ad2cc8>, <deap.gp.Terminal object at 0x7f46a6ad0120>, <deap.gp.TriStateGen object at 0x7f469ee7c0a0>, <deap.gp.AxisGen object at 0x7f469ee7c0f8>, <deap.gp.Terminal object at 0x7f46a6a6a6c0>, <deap.gp.Primitive object at 0x7f46a6a61728>, <deap.gp.Terminal object at 0x7f46a6ad0120>, <deap.gp.myBigRandInt object at 0x7f469ee7c150>, <deap.gp.Terminal object at 0x7f46a6a6a0d8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.TriStateGen object at 0x7f469ee7c1a8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.TriStateGen object at 0x7f469ee7c200>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.TriStateGen object at 0x7f469ee7c258>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.AxisGen object at 0x7f469ee7c2b0>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.AxisGen object at 0x7f469ee7c308>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.AxisGen object at 0x7f469ee7c360>, <deap.gp.Primitive object at 0x7f46a6a64cc8>, <deap.gp.Terminal object at 0x7f46a6a6a0d8>, <deap.gp.Terminal object at 0x7f46a6a6a1b0>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.TriStateGen object at 0x7f469ee7c3b8>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.AxisGen object at 0x7f469ee7c410>, <deap.gp.Primitive object at 0x7f46a6a64e08>, <deap.gp.Primitive object at 0x7f46a6a66188>, <deap.gp.Terminal object at 0x7f46a6a6a0d8>, <deap.gp.Terminal object at 0x7f46a6a6a3f0>, <deap.gp.Primitive object at 0x7f46a6a664a8>, <deap.gp.Terminal object at 0x7f46a6a6a0d8>, <deap.gp.Terminal object at 0x7f46a6a6a678>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.TriStateGen object at 0x7f469ee7c468>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.AxisGen object at 0x7f469ee7c4c0>, <deap.gp.Primitive object at 0x7f46a6a66e58>, <deap.gp.Primitive object at 0x7f46a6a66ea8>, <deap.gp.Primitive object at 0x7f46a6a66e58>, <deap.gp.Primitive object at 0x7f46a6a66e58>, <deap.gp.learnerGen object at 0x7f469ee7c518>, <deap.gp.myGenFloat object at 0x7f469ee7c570>, <deap.gp.Terminal object at 0x7f46a6a6a048>, <deap.gp.Primitive object at 0x7f46a6a663b8>, <deap.gp.Terminal object at 0x7f46a6a6a120>, <deap.gp.myRandInt object at 0x7f469ee7c5c8>, <deap.gp.Primitive object at 0x7f46a6a661d8>, <deap.gp.Terminal object at 0x7f46a6a6a4c8>, <deap.gp.Terminal object at 0x7f46a6a6a630>, <deap.gp.Primitive object at 0x7f46a6a666d8>, <deap.gp.Primitive object at 0x7f46a6a66548>, <deap.gp.Primitive object at 0x7f46a6a67188>, <deap.gp.Terminal object at 0x7f46a6a6a048>, <deap.gp.Terminal object at 0x7f46a6ad0120>, <deap.gp.Terminal object at 0x7f46a6a6a870>, <deap.gp.Primitive object at 0x7f46a6a67138>, <deap.gp.Terminal object at 0x7f46a6ad0120>, <deap.gp.listGen object at 0x7f469ee7c678>, <deap.gp.Primitive object at 0x7f46a6a64e08>, <deap.gp.Primitive object at 0x7f46a6a66638>, <deap.gp.Terminal object at 0x7f46a6a6a0d8>, <deap.gp.Primitive object at 0x7f46a6a66138>, <deap.gp.Terminal object at 0x7f46a6a6a168>, <deap.gp.myGenFloat object at 0x7f469ee7c6d0>, <deap.gp.Primitive object at 0x7f46a6a664a8>, <deap.gp.Primitive object at 0x7f46a6a66228>, <deap.gp.Primitive object at 0x7f46a6a66138>, <deap.gp.myGenFloat object at 0x7f469ee7c728>, <deap.gp.Terminal object at 0x7f46a6a6a1b0>, <deap.gp.Primitive object at 0x7f46a6a64f48>, <deap.gp.Terminal object at 0x7f46a6a6a048>, <deap.gp.Terminal object at 0x7f46a6a6a120>, <deap.gp.Terminal object at 0x7f46a6a6a120>, <deap.gp.Primitive object at 0x7f46a6a665e8>, <deap.gp.Primitive object at 0x7f46a6a64e58>, <deap.gp.Terminal object at 0x7f46a6ad0fc0>, <deap.gp.Terminal object at 0x7f46a6ad0fc0>, <deap.gp.Primitive object at 0x7f46a6a66048>, <deap.gp.Primitive object at 0x7f46a6ace8b8>, <deap.gp.Primitive object at 0x7f46a6a66458>, <deap.gp.Terminal object at 0x7f46a6a6a0d8>, <deap.gp.Terminal object at 0x7f46a6a6a120>, <deap.gp.Primitive object at 0x7f46a6a66458>, <deap.gp.Terminal object at 0x7f46a6a6a0d8>, <deap.gp.Terminal object at 0x7f46a6a6a090>, <deap.gp.Primitive object at 0x7f46a6ace8b8>, <deap.gp.Primitive object at 0x7f46a6a66458>, <deap.gp.Terminal object at 0x7f46a6a6a090>, <deap.gp.Terminal object at 0x7f46a6a6a168>, <deap.gp.Primitive object at 0x7f46a6a66228>, <deap.gp.Terminal object at 0x7f46a6a6a090>, <deap.gp.Terminal object at 0x7f46a6a6a090>, <deap.gp.Primitive object at 0x7f46a6a64e08>, <deap.gp.Primitive object at 0x7f46a6a66278>, <deap.gp.Terminal object at 0x7f46a6a6a120>, <deap.gp.Terminal object at 0x7f46a6a6a510>, <deap.gp.Primitive object at 0x7f46a6a668b8>, <deap.gp.Terminal object at 0x7f46a6a6a1f8>, <deap.gp.Primitive object at 0x7f46a6a66ef8>, <deap.gp.Primitive object at 0x7f46a6a66f48>, <deap.gp.Primitive object at 0x7f46a6a66f48>, <deap.gp.Primitive object at 0x7f46a6a66f48>, <deap.gp.ensembleGen object at 0x7f469ee7c780>, <deap.gp.Terminal object at 0x7f46a6a6a168>, <deap.gp.Terminal object at 0x7f46a6a6a4c8>, <deap.gp.Primitive object at 0x7f46a6a66228>, <deap.gp.Terminal object at 0x7f46a6a6a120>, <deap.gp.Terminal object at 0x7f46a6a6a090>, <deap.gp.Primitive object at 0x7f46a6a66048>, <deap.gp.Terminal object at 0x7f46a6ad0fc0>, <deap.gp.Terminal object at 0x7f46a6a6a048>, <deap.gp.Terminal object at 0x7f46a6a6a048>, <deap.gp.Primitive object at 0x7f46a6a66228>, <deap.gp.Primitive object at 0x7f46a6a668b8>, <deap.gp.Terminal object at 0x7f46a6a6a1f8>, <deap.gp.Primitive object at 0x7f46a6a66188>, <deap.gp.myGenFloat object at 0x7f469ee7c7d8>, <deap.gp.Terminal object at 0x7f46a6a6a288>, <deap.gp.Primitive object at 0x7f46a6a64cc8>, <deap.gp.Primitive object at 0x7f46a6a66458>, <deap.gp.Terminal object at 0x7f46a6a6a1b0>, <deap.gp.Terminal object at 0x7f46a6a6a090>, <deap.gp.Primitive object at 0x7f46a6a664a8>, <deap.gp.Terminal object at 0x7f46a6a6a168>, <deap.gp.Terminal object at 0x7f46a6a6a3a8>, <deap.gp.Primitive object at 0x7f46a6a64e08>, <deap.gp.Primitive object at 0x7f46a6a66638>, <deap.gp.Primitive object at 0x7f46a6a663b8>, <deap.gp.Terminal object at 0x7f46a6a6a120>, <deap.gp.Terminal object at 0x7f46a6a6a6c0>, <deap.gp.Primitive object at 0x7f46a6a66188>, <deap.gp.Primitive object at 0x7f46a6a663b8>, <deap.gp.Terminal object at 0x7f46a6a6a090>, <deap.gp.Terminal object at 0x7f46a6a6a1f8>, <deap.gp.Primitive object at 0x7f46a6a66868>, <deap.gp.Terminal object at 0x7f46a6a6a120>, <deap.gp.Primitive object at 0x7f46a6ace8b8>, <deap.gp.Primitive object at 0x7f46a6a66278>, <deap.gp.Primitive object at 0x7f46a6a66638>, <deap.gp.Terminal object at 0x7f46a6a6a168>, <deap.gp.Primitive object at 0x7f46a6a66868>, <deap.gp.Terminal object at 0x7f46a6a6a168>, <deap.gp.Primitive object at 0x7f46a6a66278>, <deap.gp.Primitive object at 0x7f46a6a66458>, <deap.gp.Terminal object at 0x7f46a6a6a090>, <deap.gp.Terminal object at 0x7f46a6a6a1b0>, <deap.gp.Primitive object at 0x7f46a6a66048>, <deap.gp.Terminal object at 0x7f46a6a6a048>, <deap.gp.Terminal object at 0x7f46a6a6a048>, <deap.gp.Terminal object at 0x7f46a6a6a048>]
<class 'deap.gp.PrimitiveTree'>
[<deap.gp.Terminal object at 0x7f46a6ad0120>]
[<deap.gp.Primitive object at 0x7f46a6a66d18>, <deap.gp.Primitive object at 0x7f46a6ad2d18>, <deap.gp.Primitive object at 0x7f46a6a54818>, <deap.gp.Primitive object at 0x7f46a6a64228>, <deap.gp.Primitive object at 0x7f46a6a55c28>, <deap.gp.Terminal object at 0x7f46a6ad0120>, <deap.gp.TriStateGen object at 0x7f469ee76fc0>, <deap.gp.AxisGen object at 0x7f469ee7c048>, <deap.gp.Terminal object at 0x7f46a6a6a558>, <deap.gp.Terminal object at 0x7f46a6a6a240>, <deap.gp.Primitive object at 0x7f46a6ad2cc8>, <deap.gp.Terminal object at 0x7f46a6ad0120>, <deap.gp.TriStateGen object at 0x7f469ee7c0a0>, <deap.gp.AxisGen object at 0x7f469ee7c0f8>, <deap.gp.Terminal object at 0x7f46a6a6a6c0>, <deap.gp.Primitive object at 0x7f46a6a61728>, <deap.gp.Terminal object at 0x7f46a6ad0120>, <deap.gp.myBigRandInt object at 0x7f469ee7c150>, <deap.gp.Terminal object at 0x7f46a6a6a0d8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.TriStateGen object at 0x7f469ee7c1a8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.TriStateGen object at 0x7f469ee7c200>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.TriStateGen object at 0x7f469ee7c258>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.AxisGen object at 0x7f469ee7c2b0>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.AxisGen object at 0x7f469ee7c308>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.AxisGen object at 0x7f469ee7c360>, <deap.gp.Primitive object at 0x7f46a6a64cc8>, <deap.gp.Terminal object at 0x7f46a6a6a0d8>, <deap.gp.Terminal object at 0x7f46a6a6a1b0>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.TriStateGen object at 0x7f469ee7c3b8>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.AxisGen object at 0x7f469ee7c410>, <deap.gp.Primitive object at 0x7f46a6a64e08>, <deap.gp.Primitive object at 0x7f46a6a66188>, <deap.gp.Terminal object at 0x7f46a6a6a0d8>, <deap.gp.Terminal object at 0x7f46a6a6a3f0>, <deap.gp.Primitive object at 0x7f46a6a664a8>, <deap.gp.Terminal object at 0x7f46a6a6a0d8>, <deap.gp.Terminal object at 0x7f46a6a6a678>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.TriStateGen object at 0x7f469ee7c468>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.AxisGen object at 0x7f469ee7c4c0>, <deap.gp.Primitive object at 0x7f46a6a66e58>, <deap.gp.Primitive object at 0x7f46a6a66ea8>, <deap.gp.Primitive object at 0x7f46a6a66e58>, <deap.gp.Primitive object at 0x7f46a6a66e58>, <deap.gp.learnerGen object at 0x7f469ee7c518>, <deap.gp.myGenFloat object at 0x7f469ee7c570>, <deap.gp.Terminal object at 0x7f46a6a6a048>, <deap.gp.Primitive object at 0x7f46a6a663b8>, <deap.gp.Terminal object at 0x7f46a6a6a120>, <deap.gp.myRandInt object at 0x7f469ee7c5c8>, <deap.gp.Primitive object at 0x7f46a6a661d8>, <deap.gp.Terminal object at 0x7f46a6a6a4c8>, <deap.gp.Terminal object at 0x7f46a6a6a630>, <deap.gp.Primitive object at 0x7f46a6a666d8>, <deap.gp.Primitive object at 0x7f46a6a66548>, <deap.gp.Primitive object at 0x7f46a6a67188>, <deap.gp.Terminal object at 0x7f46a6a6a048>, <deap.gp.Terminal object at 0x7f46a6ad0120>, <deap.gp.Terminal object at 0x7f46a6a6a870>, <deap.gp.Primitive object at 0x7f46a6a67138>, <deap.gp.Terminal object at 0x7f46a6ad0120>, <deap.gp.Primitive object at 0x7f46a6a67188>, <deap.gp.Terminal object at 0x7f46a6a6a480>, <deap.gp.Terminal object at 0x7f46a6ad0120>, <deap.gp.Terminal object at 0x7f46a6a6a798>, <deap.gp.Primitive object at 0x7f46a6a67138>, <deap.gp.Terminal object at 0x7f46a6ad0120>, <deap.gp.Primitive object at 0x7f46a6a64e08>, <deap.gp.Primitive object at 0x7f46a6a66638>, <deap.gp.Terminal object at 0x7f46a6a6a0d8>, <deap.gp.Primitive object at 0x7f46a6a66138>, <deap.gp.Terminal object at 0x7f46a6a6a168>, <deap.gp.myGenFloat object at 0x7f469ee7c6d0>, <deap.gp.Primitive object at 0x7f46a6a664a8>, <deap.gp.Primitive object at 0x7f46a6a66228>, <deap.gp.Primitive object at 0x7f46a6a66138>, <deap.gp.myGenFloat object at 0x7f469ee7c728>, <deap.gp.Terminal object at 0x7f46a6a6a1b0>, <deap.gp.Primitive object at 0x7f46a6a64f48>, <deap.gp.Terminal object at 0x7f46a6a6a048>, <deap.gp.Terminal object at 0x7f46a6a6a120>, <deap.gp.Terminal object at 0x7f46a6a6a120>, <deap.gp.Primitive object at 0x7f46a6a665e8>, <deap.gp.Primitive object at 0x7f46a6a64e58>, <deap.gp.Terminal object at 0x7f46a6ad0fc0>, <deap.gp.Terminal object at 0x7f46a6ad0fc0>, <deap.gp.Primitive object at 0x7f46a6a66048>, <deap.gp.Primitive object at 0x7f46a6ace8b8>, <deap.gp.Primitive object at 0x7f46a6a66458>, <deap.gp.Terminal object at 0x7f46a6a6a0d8>, <deap.gp.Terminal object at 0x7f46a6a6a120>, <deap.gp.Primitive object at 0x7f46a6a66458>, <deap.gp.Terminal object at 0x7f46a6a6a0d8>, <deap.gp.Terminal object at 0x7f46a6a6a090>, <deap.gp.Primitive object at 0x7f46a6ace8b8>, <deap.gp.Primitive object at 0x7f46a6a66458>, <deap.gp.Terminal object at 0x7f46a6a6a090>, <deap.gp.Terminal object at 0x7f46a6a6a168>, <deap.gp.Primitive object at 0x7f46a6a66228>, <deap.gp.Terminal object at 0x7f46a6a6a090>, <deap.gp.Terminal object at 0x7f46a6a6a090>, <deap.gp.Primitive object at 0x7f46a6a64e08>, <deap.gp.Primitive object at 0x7f46a6a66278>, <deap.gp.Terminal object at 0x7f46a6a6a120>, <deap.gp.Terminal object at 0x7f46a6a6a510>, <deap.gp.Primitive object at 0x7f46a6a668b8>, <deap.gp.Terminal object at 0x7f46a6a6a1f8>, <deap.gp.Primitive object at 0x7f46a6a66ef8>, <deap.gp.Primitive object at 0x7f46a6a66f48>, <deap.gp.Primitive object at 0x7f46a6a66f48>, <deap.gp.Primitive object at 0x7f46a6a66f48>, <deap.gp.ensembleGen object at 0x7f469ee7c780>, <deap.gp.Terminal object at 0x7f46a6a6a168>, <deap.gp.Terminal object at 0x7f46a6a6a4c8>, <deap.gp.Primitive object at 0x7f46a6a66228>, <deap.gp.Terminal object at 0x7f46a6a6a120>, <deap.gp.Terminal object at 0x7f46a6a6a090>, <deap.gp.Primitive object at 0x7f46a6a66048>, <deap.gp.Terminal object at 0x7f46a6ad0fc0>, <deap.gp.Terminal object at 0x7f46a6a6a048>, <deap.gp.Terminal object at 0x7f46a6a6a048>, <deap.gp.Primitive object at 0x7f46a6a66228>, <deap.gp.Primitive object at 0x7f46a6a668b8>, <deap.gp.Terminal object at 0x7f46a6a6a1f8>, <deap.gp.Primitive object at 0x7f46a6a66188>, <deap.gp.myGenFloat object at 0x7f469ee7c7d8>, <deap.gp.Terminal object at 0x7f46a6a6a288>, <deap.gp.Primitive object at 0x7f46a6a64cc8>, <deap.gp.Primitive object at 0x7f46a6a66458>, <deap.gp.Terminal object at 0x7f46a6a6a1b0>, <deap.gp.Terminal object at 0x7f46a6a6a090>, <deap.gp.Primitive object at 0x7f46a6a664a8>, <deap.gp.Terminal object at 0x7f46a6a6a168>, <deap.gp.Terminal object at 0x7f46a6a6a3a8>, <deap.gp.Primitive object at 0x7f46a6a64e08>, <deap.gp.Primitive object at 0x7f46a6a66638>, <deap.gp.Primitive object at 0x7f46a6a663b8>, <deap.gp.Terminal object at 0x7f46a6a6a120>, <deap.gp.Terminal object at 0x7f46a6a6a6c0>, <deap.gp.Primitive object at 0x7f46a6a66188>, <deap.gp.Primitive object at 0x7f46a6a663b8>, <deap.gp.Terminal object at 0x7f46a6a6a090>, <deap.gp.Terminal object at 0x7f46a6a6a1f8>, <deap.gp.Primitive object at 0x7f46a6a66868>, <deap.gp.Terminal object at 0x7f46a6a6a120>, <deap.gp.Primitive object at 0x7f46a6ace8b8>, <deap.gp.Primitive object at 0x7f46a6a66278>, <deap.gp.Primitive object at 0x7f46a6a66638>, <deap.gp.Terminal object at 0x7f46a6a6a168>, <deap.gp.Primitive object at 0x7f46a6a66868>, <deap.gp.Terminal object at 0x7f46a6a6a168>, <deap.gp.Primitive object at 0x7f46a6a66278>, <deap.gp.Primitive object at 0x7f46a6a66458>, <deap.gp.Terminal object at 0x7f46a6a6a090>, <deap.gp.Terminal object at 0x7f46a6a6a1b0>, <deap.gp.Primitive object at 0x7f46a6a66048>, <deap.gp.Terminal object at 0x7f46a6a6a048>, <deap.gp.Terminal object at 0x7f46a6a6a048>, <deap.gp.Terminal object at 0x7f46a6a6a048>]
<class 'deap.gp.PrimitiveTree'>
Healed128 individuals
Mutating offspring (Add Layer)
EmadeDataDivideInt(LinearPredictiveCoding(LocalPoolingMax(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 5), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myIntMult(3001, 10)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), myIntSub(greaterThanEqual(10.0, 2.8006264467555315), notEqual(-4.44963090831692, 1.0)))
27
HighpassIrst(EmadeDataIntegerDivide(CountVectorizer(ARG0, falseBool, 7, falseBool, 9), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myFloatIntMult(10.0, 6)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)))
21
Hog(ContourMaskMinArea(EmadeDataMultiplyInt(ARG0, passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myFloatToInt(myFloatMult(1.0, 0.1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myFloatIntSub(passFloat(myFloatIntMult(0.1, falseBool)), myIntMult(myAnd(falseBool, trueBool), greaterThanEqual(10.0, 0.1)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), notEqual(passFloat(myFloatSub(ifThenElseFloat(falseBool, 100.0, 100.0), myFloatSub(-2.4732734177376594, 100.0))), passFloat(ifThenElseFloat(lessThan(2.8231043353087752, 0.1), myFloatIntDiv(0.01, 150), myFloatSub(10.0, 0.01)))), myOr(lessThanOrEqual(myFloatDiv(myFloatMult(10.0, 0.1), myFloatIntMult(1.0, 255)), ifThenElseFloat(notEqual(10.0, 1.0), myFloatIntSub(10.0, 2), myFloatIntMult(1.0, falseBool))), greaterThan(myFloatAdd(myFloatSub(-0.15203650318878204, 0.01), myFloatDiv(0.01, 100.0)), ifThenElseFloat(greaterThan(0.1, 4.422632359897774), myFloatIntDiv(0.01, 0), passFloat(10.0)))), myIntAdd(lessThan(myFloatDiv(myFloatIntMult(0.1, 0), ifThenElseFloat(trueBool, 1.0, 100.0)), passFloat(myFloatSub(-1.6543005146323364, -0.0877611542883514))), myIntSub(lessThanOrEqual(myFloatDiv(0.01, 0.01), myFloatDiv(0.01, 0.1)), myFloatToInt(myFloatMult(0.0298962306284265, 0.01)))), lessThan(myFloatIntSub(myFloatSub(ifThenElseFloat(trueBool, 1.0, 0.1), myFloatSub(10.0, 100.0)), passBool(myNot(falseBool))), myFloatIntAdd(myIntToFloat(lessThanOrEqual(1.0, 100.0)), equal(myFloatDiv(0.1, 10.0), myFloatDiv(0.01, 100.0)))))
152
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 9)
11
index
2
2
10
add node
ConcatenateLayer4
after make
NNLearner(ARG0, OutputLayer(ARG0, ConcatenateLayer4([], [], [], EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)))), 9)
NNLearner(ARG0, OutputLayer(ARG0, ConcatenateLayer4(EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)), EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)), EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)), EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)))), 9)
SetToZeroIf>Data&Factor(EmadeDataSubtractInt(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 128), ContoursMaxArea(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 92), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_2), myFloatDiv(1.0, 100.0))
22
StdDeviation(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 32)
5
FilterCentroids(ContourMaskMinEquDiameter(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, falseBool))
6
EmadeDataSubtractInt(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 9)
5
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(93, ARG0, randomUniformWeights, InputLayer(GradientMagnitude(Tokenizer(ARG0, 7, 518), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), lessThanOrEqual(0.1, 1.6548537041261326))))), 100)
22
index
2
2
21
add node
GlobalAveragePoolingLayer1D
after make
NNLearner(ARG0, OutputLayer(ARG0, GlobalAveragePoolingLayer1D(EmbeddingLayer(93, ARG0, randomUniformWeights, InputLayer(GradientMagnitude(Tokenizer(ARG0, 7, 518), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), lessThanOrEqual(0.1, 1.6548537041261326)))))), 100)
NNLearner(ARG0, OutputLayer(ARG0, GlobalAveragePoolingLayer1D(EmbeddingLayer(93, ARG0, randomUniformWeights, InputLayer(GradientMagnitude(Tokenizer(ARG0, 7, 518), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), lessThanOrEqual(0.1, 1.6548537041261326)))))), 100)
ThresholdBinaryInverseMask(ifThenElseDataPair(equal(10.0, 10.0), EmadeDataNumpyMultiplyPair(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.FULL, Axis.AXIS_2), LowpassFilterUniform(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, trueBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), ifThenElseFloat(ifThenElseBool(falseBool, trueBool, trueBool), myFloatMult(0.1, 0.01), myFloatIntMult(-3.2750096983702024, 65)))
34
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, heWeights, InputLayer(ARG0))), 4)
11
index
2
2
10
add node
GlobalAveragePoolingLayer1D
after make
NNLearner(ARG0, OutputLayer(ARG0, GlobalAveragePoolingLayer1D(EmbeddingLayer(100, ARG0, heWeights, InputLayer(ARG0)))), 4)
NNLearner(ARG0, OutputLayer(ARG0, GlobalAveragePoolingLayer1D(EmbeddingLayer(100, ARG0, heWeights, InputLayer(ARG0)))), 4)
ThresholdBinaryInverse(ThresholdBinaryInverse(MinimumToZero(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myFloatIntMult(1.0, 4)), passTriState(TriState.STREAM_TO_STREAM), Axis.AXIS_2, myFloatIntDiv(1.0, passInt(10)))
20
ContourMaskMaxSolidity(WindowTurkey(MatchedFiltering(SavitzkyGolayFilter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 87, 5, 2), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myAnd(falseBool, trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myFloatMult(myFloatAdd(-0.35649298395985163, 1.0), myIntToFloat(4))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myFloatMult(myFloatIntMult(ifThenElseFloat(falseBool, -3.2065381108254987, 1.0), myOr(falseBool, trueBool)), passFloat(myFloatIntMult(0.01, 128))))
50
birch_clustering(WindowBlackman(ArcTangent(EmadeDataMultiplyInt(MyDWT(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 61), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), greaterThan(0.01, 0.1)), TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myFloatAdd(ifThenElseFloat(greaterThanEqual(10.0, 100.0), myFloatMult(0.1, 1.0), myFloatSub(0.1, 0.1)), myFloatSub(myFloatDiv(0.1, 0.1), myIntToFloat(6)))), myFloatDiv(myIntToFloat(greaterThanEqual(myFloatDiv(0.1, 1.0), passFloat(0.01))), myFloatIntSub(myFloatIntMult(myIntToFloat(6), lessThanOrEqual(-0.051486290484572095, -1.769474421690055)), myFloatToInt(myIntToFloat(55)))), myOr(trueBool, myOr(greaterThan(myFloatIntMult(1.0, 6), myFloatIntSub(0.01, 1)), lessThan(myFloatSub(0.1, 0.01), myFloatIntMult(0.1, 8)))), passInt(passInt(greaterThanEqual(100.0, myFloatSub(1.0, 0.01)))))
85
MaxLoc(BitwiseAnd(ContourMaskRangeLength(Round(StdDeviation(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 9), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), Axis.AXIS_0, equal(passFloat(10.0), myFloatDiv(0.01, 0.2274954885701046)), passBool(ifThenElseBool(falseBool, trueBool, falseBool))), ThresholdBinary(MyCumSum(LocalPoolingMax(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 6), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), 7), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), 100.0, myOr(greaterThanEqual(-4.171750319883218, 0.01), notEqual(10.0, 1.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), passAxis(passAxis(passAxis(Axis.AXIS_0)))), TriState.FEATURES_TO_FEATURES, passAxis(passAxis(passAxis(passAxis(Axis.FULL)))))
76
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(150, ARG0, randomUniformWeights, InputLayer(ConvolveChannelMerge(ARG0, 50)))), 100)
13
index
2
2
12
add node
Conv1DLayer
after make
NNLearner(ARG0, OutputLayer(ARG0, Conv1DLayer(6, 32, 1, trueBool, trueBool, EmbeddingLayer(150, ARG0, randomUniformWeights, InputLayer(ConvolveChannelMerge(ARG0, 50))))), 100)
NNLearner(ARG0, OutputLayer(ARG0, Conv1DLayer(6, 32, 1, trueBool, trueBool, EmbeddingLayer(150, ARG0, randomUniformWeights, InputLayer(ConvolveChannelMerge(ARG0, 50))))), 100)
RandomNormal(myICA(BayesMulti(ARG0), passTriState(TriState.STREAM_TO_STREAM), lessThan(1.0, 0.1), lessThanOrEqual(0.1, 0.1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), greaterThanEqual(myFloatIntMult(0.01, 4), myFloatAdd(100.0, 0.1)), lessThanOrEqual(myFloatAdd(1.0, 1.0), myFloatSub(0.1, 1.7455791282265327)))
32
Daisy(Cv2AbsDiff(Round(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), Prerejection(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 150, 3, 0.01), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThan(myFloatIntDiv(0.1, 95), myFloatIntMult(100.0, 1)), lessThanOrEqual(myFloatIntMult(-4.863904585918977, 13), myFloatIntSub(0.1, 4)), myNot(myNot(falseBool)), myOr(ifThenElseBool(trueBool, falseBool, falseBool), greaterThan(0.1, 1.0)), 55)
53
ContourMaskRangeEquDiameter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 7, myIntSub(myFloatToInt(0.01), myFloatToInt(10.0)))
10
ContourMaskMinArea(ARG0, passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myFloatSub(myFloatDiv(0.1, 3.318901895439245), myFloatAdd(1.0, 0.1)))
15
ThresholdBinaryFloat(PeakFinder(NormalLikelihood(ARG0, 10), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), ifThenElseFloat(falseBool, -3.3446101361741984, 1.5004469216140661), myIntDiv(150, 55)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myFloatIntAdd(myFloatIntDiv(1.0, 91), greaterThan(1.0, 0.01)), myFloatIntAdd(myFloatAdd(10.0, 1.0), myIntDiv(18, 8)))
36
NNLearner(ARG0, OutputLayer(SkiMedianFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 4), EmbeddingLayer(9, ContourMaskMaxExtentEnclosingCircle(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 100.0), randomUniformWeights, InputLayer(ARG0))), 6)
19
index
2
2
18
add node
EmbeddingLayer
after make
NNLearner(ARG0, OutputLayer(SkiMedianFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 4), EmbeddingLayer(falseBool, ARG0, glorotUniformWeights, EmbeddingLayer(9, ContourMaskMaxExtentEnclosingCircle(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 100.0), randomUniformWeights, InputLayer(ARG0)))), 6)
NNLearner(ARG0, OutputLayer(SkiMedianFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 4), EmbeddingLayer(falseBool, ARG0, glorotUniformWeights, EmbeddingLayer(9, ContourMaskMaxExtentEnclosingCircle(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 100.0), randomUniformWeights, InputLayer(ARG0)))), 6)
ConvertToCounts(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL)
4
EmadeDataDivideFloat(Exponetial(Cv2GreaterThanOrEqual(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, passAxis(Axis.FULL)), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), passFloat(myFloatAdd(100.0, 10.0)))
24
MyDiff(ARG0, passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)))
8
ThresholdToZero(ContourMaskMaxExtent(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 1605), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatIntAdd(100.0, 5))
13
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 95)
11
index
2
2
10
add node
GlobalMaxPoolingLayer2D
after make
NNLearner(ARG0, OutputLayer(ARG0, GlobalMaxPoolingLayer2D(EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)))), 95)
NNLearner(ARG0, OutputLayer(ARG0, GlobalMaxPoolingLayer2D(EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)))), 95)
MorphOpenRect(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 7, 1)
6
EmadeDataDivideInt(LinearPredictiveCoding(LocalPoolingMax(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 3001), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myIntMult(33, 10)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), myIntSub(greaterThanEqual(10.0, 2.8006264467555315), notEqual(-4.44963090831692, 1.0)))
27
WindowCosine(AbsDiff(WindowBackmanNuttall(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), MorphCloseCross(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, trueBool, 5820), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)))
26
RichardsonLucy(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 8)
5
WindowBlackman(ThresholdToZeroFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 1.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatSub(1.0, 0.1))
13
WindowKaiser(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 10.0, falseBool)
6
MorphTophatEllipse(MorphBlackhatEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 4, trueBool), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), lessThan(1.582532651394862, 0.1), greaterThanEqual(3.4383382473505044, 0.1))
17
MySnapshot(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_1, 9)
8
LowpassFilterBilateral(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 0, falseBool, 3)
7
mySelGenUni(Select3D(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 32, 100, 10, 150, 128, 50), passTriState(TriState.STREAM_TO_STREAM), myIntDiv(50, 100), myFloatToInt(0.1), myFloatIntMult(10.0, -9))
21
Tangent(MyAutoCorr(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1))
9
myIfThenElse(LowpassFilterUniform(NormalLikelihood(ARG0, myIntDiv(myNot(trueBool), myIntMult(64, 5))), passTriState(TriState.STREAM_TO_FEATURES), passAxis(passAxis(passAxis(Axis.FULL))), myIntMult(passBool(lessThanOrEqual(1.0, 0.1)), notEqual(passFloat(0.01), myFloatIntMult(0.01, 3)))), HighpassIrst(MorphTophatCross(MorphCloseRect(ImageAlignmentECC(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.FULL, 50, 0.01, 0, 6), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), lessThan(0.01, 1.0), greaterThan(0.1, 1.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), Axis.FULL, passBool(passBool(trueBool)), ifThenElseBool(lessThanOrEqual(4.380143170692655, 0.1), notEqual(1.0, 0.1), myNot(falseBool))), passTriState(passTriState(TriState.STREAM_TO_STREAM)), Axis.FULL), ThresholdBinaryMax(WindowTriangular(MultiplyTransposed(MorphTophatRect(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 128, 8), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myNot(falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), ifThenElseBool(myOr(ifThenElseBool(falseBool, trueBool, trueBool), trueBool), myOr(falseBool, equal(100.0, 10.0)), myAnd(myNot(falseBool), passBool(trueBool))), myFloatIntMult(0.1, greaterThanEqual(myFloatMult(10.0, 100.0), myFloatIntAdd(0.1, 37)))), TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), lessThan(-3.44827990764206, passFloat(myFloatAdd(myFloatAdd(-3.619544440264839, 0.1), myFloatIntDiv(0.01, 0)))))
143
MyCumSum(Cv2RMS(SubtractSaturate(ThresholdToZeroFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 100.0), MultiplyTransposed(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, falseBool), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myNot(lessThan(100.0, 100.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), passInt(myIntDiv(myIntAdd(3, falseBool), passBool(falseBool))))
46
EmadeDataMultiplyFloat(EmadeDataDivideFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 100.0), TriState.STREAM_TO_STREAM, Axis.AXIS_2, passFloat(100.0))
10
EmadeDataMultiplyInt(ContourMaskRangeLength(AbsoluteValue(LowpassFilterMedian(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 150), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), greaterThanEqual(myFloatIntSub(10.0, 2), myFloatMult(-3.627473698791701, -2.1000160235203467)), myOr(myNot(trueBool), equal(0.1, 0.1))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myIntMult(equal(myFloatIntMult(1.0, 2), myFloatIntSub(10.0, 7)), equal(myFloatIntMult(10.0, 55), myIntToFloat(8))))
53
SpectralFilter(ContourMaskRangeEquDiameter(MorphOpenCross(BayesMulti(RandomUniform(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 8, 6)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), greaterThan(myFloatAdd(1.0681860033116575, 1.0), passFloat(0.1)), lessThan(myFloatIntSub(0.1, 0), myFloatIntAdd(100.0, 2))), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(passAxis(passAxis(Axis.AXIS_0))), 10, equal(myFloatSub(myFloatDiv(0.1, 0.1), myFloatIntDiv(0.01, 6)), myFloatIntAdd(10.0, passInt(10)))), MaximumWindow(ARG0, myIntAdd(notEqual(myFloatIntMult(1.0, 128), myFloatDiv(0.1, 1.0)), myIntMult(myAnd(falseBool, falseBool), myFloatToInt(0.01))), ifThenElseBool(notEqual(myFloatSub(0.01, 1.0), myFloatSub(10.0, 0.01)), lessThan(myFloatIntAdd(0.1, 150), myFloatIntSub(10.0, 55)), equal(ifThenElseFloat(trueBool, -2.897542497291231, 0.1), myFloatSub(100.0, 10.0))), passFloat(myIntToFloat(greaterThan(1.0, 1.0)))), GaussianFilter(RandomNormal(AdjustConstrastLog(ARG0, passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myFloatDiv(100.0, 4.682150619736657)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), 9, myIntSub(notEqual(1.0, 0.10412231354917001), passInt(7))), TriState.FEATURES_TO_FEATURES, passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatIntDiv(4.115153324802437, passInt(myIntAdd(falseBool, 1)))), MyBinaryThreshold(AbsDiff(CopyStreamToTarget(ContourMaskMaxExtent(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 6715)), SkiMedianFilter(HashingVectorizer(ARG0, trueBool, trueBool, 2, 1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), myIntAdd(7, 5382)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatIntSub(myIntToFloat(myAnd(trueBool, falseBool)), greaterThanEqual(ifThenElseFloat(trueBool, 1.0, 1.0), myFloatIntMult(-1.7635954076824212, 1079)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), Axis.AXIS_1, passAxis(passAxis(passAxis(Axis.AXIS_0))), Axis.AXIS_1, passAxis(passAxis(Axis.AXIS_1)))
211
Sine(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2)
4
CCorrObjectFilter(ARG0, ARG0, 255, 10.0)
5
EmadeDataIntegerDividePair(Cv2LessThanOrEqual(HighpassSobelDerivative(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 8, 4, 32, 4, 1), MySum(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_2)), MySnapshot(MySnapshot(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.FULL, Axis.FULL, 4), MedianFilter(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 72), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_0), notEqual(0.1, 1.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_0)))
60
OtsuBinaryThreshold(Cv2iDCT(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), notEqual(0.1, 0.01))
12
RegionalMaxima(MorphDilateEllipse(WindowBlackmanHarris(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myAnd(trueBool, falseBool), notEqual(-0.9642208291955061, 0.1), notEqual(10.0, 1.295003061521884)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myFloatDiv(myFloatDiv(1.0, 10.0), myFloatAdd(-4.135055929338178, 1.0)))
32
MorphTophatRect(EmadeDataAddFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 0.01), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatToInt(100.0), myIntAdd(55, 5))
15
TfidfVectorizer(BackgroundSubtraction(ContoursMinArea(EmadeDataAddFloat(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 2.3888396650632036), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myNot(falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1))), ifThenElseBool(ifThenElseBool(passBool(trueBool), passBool(trueBool), ifThenElseBool(trueBool, falseBool, trueBool)), myOr(myOr(trueBool, falseBool), greaterThanEqual(0.01, 10.0)), lessThanOrEqual(myIntToFloat(0), passFloat(10.0))), myIntMult(myAnd(passBool(falseBool), myAnd(trueBool, trueBool)), myIntDiv(myIntSub(2, 10), myFloatToInt(1.0))), myIntMult(greaterThan(passFloat(100.0), myFloatIntDiv(1.0, 4)), greaterThan(myFloatDiv(0.01, 1.0), ifThenElseFloat(trueBool, 10.0, 0.1))), myIntSub(passBool(myNot(trueBool)), myOr(myOr(falseBool, trueBool), ifThenElseBool(falseBool, falseBool, trueBool))))
82
Cv2LessThan(Cv2Divide(ContourMaskMaxArea(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 10.0), WindowBlackman(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 1.0), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_1)), Tangent(Cv2Divide(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), passAxis(passAxis(Axis.AXIS_2)))
44
ContourMaskMaxLength(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 3.3617056088785517)
5
ImageAlignmentECC(Sentiment(ContourMaskMinAspectRatio(agglomerative_clustering(ARG0, 46), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myFloatIntAdd(-3.287870676610547, 0)), passBool(passBool(trueBool))), Log(BitwiseOr(ARG0, HighpassIrst(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2))), passAxis(Axis.FULL), equal(myFloatMult(passFloat(0.01), ifThenElseFloat(falseBool, 1.0, 1.0)), myFloatIntDiv(-2.5975951472094327, equal(0.1, 1.0))), myFloatIntAdd(myFloatIntMult(myFloatAdd(10.0, -1.7830310615497993), myOr(falseBool, falseBool)), notEqual(myIntToFloat(150), 10.0)), myIntAdd(myIntMult(myNot(trueBool), myIntMult(55, 32)), myOr(ifThenElseBool(trueBool, falseBool, falseBool), equal(1.0, 1.0))), 32)
92
WindowBackmanNuttall(MySnapshot(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.FULL, Axis.FULL, 55), passTriState(TriState.STREAM_TO_FEATURES), Axis.FULL)
12
MinimumFilter(ARG0, passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), lessThanOrEqual(ifThenElseFloat(passBool(falseBool), myFloatDiv(myFloatAdd(-1.9375893314771728, 10.0), myFloatDiv(100.0, 0.1)), myFloatMult(myFloatIntMult(0.01, trueBool), myFloatIntDiv(0.01, 0))), myFloatIntMult(myFloatSub(ifThenElseFloat(falseBool, 100.0, 100.0), myFloatIntAdd(1.0, 6)), 64)), myFloatMult(myFloatIntMult(0.01, myIntAdd(1, greaterThan(10.0, 1.0))), passFloat(myFloatIntSub(myFloatIntSub(10.0, 100), greaterThanEqual(10.0, 100.0)))))
56
ThresholdBinaryFloat(MorphErosionCross(ContourMaskRangeEquDiameter(MorphOpenRect(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 0, 50), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), greaterThan(10.0, 10.0), myIntAdd(falseBool, 8)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatToInt(myFloatSub(-0.6974171637667306, 0.1)), myOr(greaterThanEqual(1.0, 100.0), equal(0.01, 0.01)), lessThanOrEqual(myFloatIntSub(0.01, 1), myIntToFloat(32))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myIntToFloat(myNot(greaterThanEqual(1.0, -1.9165816231832067))), myFloatDiv(myFloatIntSub(myFloatAdd(0.1, 1.0), notEqual(1.3409624802597628, 1.0)), myFloatIntDiv(ifThenElseFloat(falseBool, 0.1, -0.5347919246925557), myIntAdd(-2, 64))))
71
Cv2AbsDiff(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_2)
7
EmadeDataDividePair(EmadeDataMultiplyFloat(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 1.0), SepDetectionWindow(ARG0, 150, 6663, 1.0), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_0))
19
GetCentroids(AdjustConstrastGamma(MorphGradientRect(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 2, 50), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passFloat(10.0), myFloatMult(1.0, 1.880807422481599)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)))
23
MorphGradientCross(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 55, 64)
6
BackgroundSubtraction(ARG0, passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)))
8
Cv2Sqrt(LabelByCenterOfMass(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), Axis.AXIS_1)
11
MeanFilter(adf_0(ARG0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), lessThanOrEqual(100.0, 2.211944758392791))
10
myVarThresh(StdDeviationHole(LocalPoolingMedian(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 128), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myIntAdd(5, 5), notEqual(0.01, 0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), myFloatIntAdd(ifThenElseFloat(trueBool, 0.1, 0.1), notEqual(-3.9244346354885575, 10.0)))
28
HighpassFourierShift(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, falseBool)
5
MyAutoCorr(MorphDilateEllipse(ContourMaskMaxExtentEnclosingCircle(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 0.01), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), greaterThan(0.01, 0.01), myIntSub(32, trueBool), notEqual(100.0, 0.01)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)))
26
Cv2Subtract(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_1)
7
MultiplyTransposed(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, trueBool)
5
KalmanFilter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 1.0, 0.01)
6
WindowBartlett(MorphOpenRect(CenterOfMass(RandomNormal(WindowBackmanNuttall(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passBool(trueBool), myIntSub(6, 1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), notEqual(0.01, myFloatAdd(myFloatAdd(1.0, 10.0), myFloatSub(1.0, 0.01))), myIntMult(myFloatToInt(myFloatIntSub(100.0, 7)), myFloatToInt(myFloatDiv(1.0, 10.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))))
59
EmadeDataNumpyMultiplyFloat(MyCumSum(MyCumSum(CenterOfMass(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), lessThanOrEqual(0.01, 0.01)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), greaterThanEqual(myFloatDiv(-1.7849765477596624, 0.01), 0.1)), passTriState(TriState.STREAM_TO_STREAM), passAxis(passAxis(Axis.FULL)), myFloatSub(ifThenElseFloat(myOr(falseBool, trueBool), myFloatIntMult(1.0, 9), 1.0), passFloat(myFloatIntDiv(1.0, 5))))
43
ContourMaskMaxEnclosingCircle(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 100.0)
5
Sine(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL)
4
LowpassFilterEllipsoid(ToFloatNorm(WindowCosine(MorphTophatCross(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 55, 6), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(Axis.AXIS_1), equal(myFloatIntDiv(myFloatIntDiv(0.01, 4), equal(-0.6302238586548494, 0.1)), ifThenElseFloat(notEqual(0.1, -1.4177748689760783), 0.01, myFloatIntSub(-3.7981072633601256, 1))))
41
MorphErosionRect(ContourMaskRangeEquDiameter(MedianFilterHole(ContoursAll(EmadeDataAddPairTriple(ARG0, ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_1, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), passBool(lessThanOrEqual(10.0, 100.0)), passInt(ifThenElseBool(trueBool, falseBool, trueBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myIntSub(myIntAdd(myFloatToInt(10.0), passInt(150)), myIntDiv(myIntDiv(255, 255), myOr(falseBool, falseBool))), lessThan(passFloat(myFloatIntDiv(100.0, 4)), myFloatIntMult(passFloat(10.0), myIntMult(32, 12)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myAnd(greaterThan(myIntToFloat(greaterThan(0.01, -0.5956156197401983)), myFloatAdd(myFloatDiv(-2.7229837719407035, 4.3362734712465905), myFloatDiv(1.1197764073421776, 0.4765692406226254))), myNot(lessThan(myFloatIntDiv(0.1, 10), myFloatIntSub(100.0, 4)))), myIntMult(myFloatToInt(myIntToFloat(myOr(trueBool, falseBool))), equal(myFloatIntAdd(myFloatIntAdd(0.01, 4), notEqual(100.0, 0.01)), passFloat(myFloatIntSub(0.1, 0)))), equal(myFloatIntSub(myFloatIntAdd(myFloatIntSub(0.1, 255), myIntDiv(64, 32)), lessThanOrEqual(myFloatIntAdd(-0.4070547785511591, 0), myIntToFloat(5))), myFloatSub(myIntToFloat(greaterThanEqual(0.1, 0.1)), myFloatAdd(myIntToFloat(4), myFloatDiv(10.0, 10.0)))))
140
SelectRange(HighpassFourierGaussian(birch_clustering(MyAutoCorr(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), myFloatIntMult(-0.7011652898121898, 6), myNot(trueBool), myOr(falseBool, trueBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), greaterThan(myIntToFloat(falseBool), myFloatAdd(0.9330117075429358, -1.8017337169583056))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), greaterThanEqual(myFloatMult(myIntToFloat(32), myFloatSub(100.0, 0.1)), myFloatIntDiv(myFloatMult(0.01, 0.33893679283958456), passBool(trueBool))), lessThan(myFloatDiv(myFloatIntAdd(0.1, 4), myFloatIntSub(1.0, trueBool)), myFloatIntDiv(myFloatIntSub(100.0, 6), myAnd(trueBool, trueBool))))
63
Learner(LowpassFilterEllipsoid(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 64), ModifyLearnerFloat(LearnerType('SVM', {'C': 1.0, 'kernel': 0}), 1.0, 128), ModifyEnsembleFloat(EnsembleType('SINGLE', None), 10.0, 1406))
14
ScalarAdd(Cv2Log(Cv2RMS(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 50), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myFloatIntDiv(myFloatMult(100.0, -2.689488666035962), myOr(trueBool, trueBool)))
24
ThresholdToZeroPixelFloat(WindowFlatTop(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2), MatchedFiltering(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 150), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.FULL))
18
NumNamedEntities(ARG0)
2
EmadeDataDivideFloat(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 0.01)
5
mySubSampleData(SavitzkyGolayFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 7, 0, 50), myOr(falseBool, trueBool), myFloatToInt(1.0))
13
RemoveFeature(HighpassLaplacian(EmadeDataDividePair(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), myFloatToInt(0.01), ifThenElseBool(falseBool, falseBool, trueBool), myIntSub(0, 255)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatToInt(ifThenElseFloat(falseBool, 0.1, 0.1)))
33
CrossCorrelation(InRange(ScalarAdd(ContourMaskMinExtentEnclosingCircle(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 0.1), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), myIntToFloat(100)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), greaterThan(myIntToFloat(0), ifThenElseFloat(trueBool, 0.1, 0.1)), myAnd(lessThanOrEqual(0.1, 0.1), myAnd(trueBool, trueBool))), CutDataLead(WindowHamming(EmadeDataDividePair(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), equal(0.01, 0.1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), greaterThan(myFloatSub(10.0, 1.0), ifThenElseFloat(trueBool, 100.0, -1.5117680474715458))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), passAxis(passAxis(passAxis(Axis.FULL))))
80
MorphDilateCross(HighpassIrst(MyProd(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), lessThanOrEqual(myFloatIntMult(1.0, 32), myIntToFloat(64)), ifThenElseBool(ifThenElseBool(trueBool, trueBool, trueBool), myNot(falseBool), ifThenElseBool(trueBool, falseBool, falseBool)), myOr(passBool(falseBool), myOr(trueBool, falseBool)))
39
ThresholdNLargestBinary(ARG0, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), greaterThanEqual(0.1, 100.0))
9
ZeroOneNorm(ECDF(myICA(ARG0, TriState.STREAM_TO_FEATURES, 4, trueBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passBool(trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)))
19
MorphDilateEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 128, falseBool, 100)
7
StdDeviation(AdjustConstrastLog(Cv2NotEqual(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.FULL, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatIntSub(1.0, 6103)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myIntSub(myIntAdd(8, 1), myIntMult(128, 2)))
29
SubtractSaturate(StandardNorm(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2), MyDiff(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), passAxis(Axis.AXIS_0))
17
myICA(ContourMaskMinExtent(LocalPoolingMean(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 10), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), greaterThanEqual(0.01, 10.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), greaterThan(passFloat(100.0), myFloatIntMult(-3.5199149919557584, 32)), passBool(lessThan(1.0, 0.1)))
27
EmadeDataNumpyMultiplyPair(Learner(ARG0, LearnerType('RAND_FOREST', {'n_estimators': 100, 'criterion': 0, 'max_depth': 3, 'class_weight': 0}), EnsembleType('ADABOOST', {'n_estimators': 50, 'learning_rate': 1.0})), ContourMaskMaxExtent(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 150), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.FULL))
18
MultiplySpectrum(ContourMaskRangeSolidity(MyCumProd(NumNamedEntities(EdgeDetectionCanny(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, trueBool, 1, 7)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), equal(myIntToFloat(trueBool), myFloatDiv(0.01, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatMult(myFloatIntDiv(passFloat(-3.2479022142095095), myFloatToInt(0.01)), myFloatIntMult(myFloatMult(10.0, 0.1), myIntMult(4, 32))), myFloatIntAdd(ifThenElseFloat(lessThanOrEqual(10.0, 100.0), ifThenElseFloat(falseBool, 0.01, 0.01), myIntToFloat(0)), myIntAdd(myIntAdd(6, -12), myFloatToInt(0.1)))), Cv2Sqrt(ContoursMaxLength(ScalarMultiply(AdjustConstrastLog(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatSub(10.0, 0.01)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passInt(myIntAdd(50, 6))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))))
114
MinimumToZero(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2)
4
HighpassSobelDerivative(ThresholdNLargestBinary(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myNot(falseBool), greaterThan(10.0, 100.0), myIntDiv(50, 128), lessThanOrEqual(0.01, -3.0694778247618917), ifThenElseBool(trueBool, falseBool, falseBool))
25
WindowBlackman(SelectRange(MatchedFiltering2D(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 0, 0.1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myIntSub(7, 3), greaterThanEqual(-2.6846992061529296, 0.1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myFloatIntDiv(myIntToFloat(64), ifThenElseBool(trueBool, falseBool, trueBool)))
31
Cv2Multiply(EmadeDataDividePair(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_2, Axis.AXIS_0), Cv2ScaleAbs(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, trueBool, 8), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_2))
22
ContourMaskMaxLength(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 10.0)
5
SubtractSaturate(MinimumToZero(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0), myPCA(ARG0, TriState.STREAM_TO_STREAM, 8, falseBool), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0))
18
EqualizeHist(EqualizeHist(CornerDetectionEigen(StdDeviationHoleCustom(Cv2Subtract(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.FULL), SetToZeroIf>Data&Factor(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_0, -1.9967884891639098), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_2), lessThan(1.0, 1.0), equal(-3.2443671494734683, 100.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), greaterThan(myFloatIntDiv(0.1, 150), myFloatAdd(10.0, 1.0)), notEqual(myFloatDiv(1.0, 0.1), myFloatIntAdd(4.4060824977662385, 255)), myFloatIntAdd(myFloatSub(100.0, 10.0), greaterThanEqual(1.0, 10.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))))
78
CountVectorizer(AbsoluteValue(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1), greaterThanEqual(10.0, 1.0), myAnd(trueBool, trueBool), passBool(trueBool), greaterThanEqual(1.0, 1.0))
16
Hog(ThresholdToZero(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 100.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), ifThenElseBool(trueBool, falseBool, falseBool), myIntDiv(8311, 10), notEqual(0.01, 0.01), myOr(falseBool, trueBool))
23
myConcatenate(Cv2Divide(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.FULL, Axis.AXIS_1), mySubSampleData(ARG0, 150, 9), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0))
20
Prerejection(LocalPoolingMean(MedianFilterHole(Exponetial(myVarThresh(ARG0, TriState.FEATURES_TO_FEATURES, 0.1), TriState.FEATURES_TO_FEATURES, passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), ifThenElseBool(greaterThanEqual(10.0, 10.0), myOr(falseBool, falseBool), myAnd(falseBool, trueBool)), greaterThan(10.0, myFloatSub(0.1, 1.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), greaterThan(myFloatDiv(myFloatIntAdd(0.1, 2), ifThenElseFloat(trueBool, 100.0, -1.144883930871774)), 0.1)), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), Axis.AXIS_1, lessThan(10.0, myFloatSub(myFloatAdd(myFloatIntAdd(-4.476964359869898, falseBool), 100.0), myFloatIntAdd(passFloat(0.01), myAnd(trueBool, falseBool)))), passBool(greaterThan(myFloatDiv(myFloatIntDiv(10.0, 4), myFloatAdd(1.0, 1.380145806634447)), 1.0)), myFloatIntSub(myFloatIntSub(myFloatMult(passFloat(1.0), myFloatAdd(10.0, 1.0)), 100), myNot(myAnd(ifThenElseBool(falseBool, trueBool, falseBool), notEqual(2.710201874034434, -3.3263233958062575)))))
98
Sine(SetToZeroIf>Data&Factor(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.AXIS_0, 0.01), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2))
13
ThresholdToZero(RMS2D(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 1), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passFloat(10.0))
12
EmadeDataDividePair(MeanWithHole(ContourMaskRangeLength(LabelByCenterOfMass(MyCumSum(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 150), Cv2Add(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myIntDiv(lessThan(1.0, 1.0), myNot(falseBool)), myIntSub(ifThenElseBool(falseBool, falseBool, falseBool), ifThenElseBool(trueBool, falseBool, falseBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL))), notEqual(myFloatIntMult(myIntToFloat(64), myNot(trueBool)), myFloatIntDiv(myFloatIntAdd(-0.3276603520618888, 6), myAnd(trueBool, trueBool))), myIntMult(passInt(greaterThan(0.1, 100.0)), greaterThanEqual(myFloatMult(3.5386361237165342, 10.0), myFloatIntMult(0.46327185101329516, 9062)))), MyAutoCorr(MyAutoCorr(rmsHole(ArcTangent(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), ifThenElseBool(trueBool, falseBool, trueBool), myOr(trueBool, falseBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))))
130
FFT(ImagePeakFinder(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0))
9
BitwiseNOT(mySelGenUni(Cv2GreaterThan(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.AXIS_2), TriState.STREAM_TO_FEATURES, myIntAdd(128, 1), myNot(trueBool), myFloatMult(100.0, 10.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)))
24
HighpassFourierUniform(EmadeDataAddFloat(ContourMaskMinEnclosingCircle(myIfThenElse(ARG0, ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, 10), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatIntMult(0.01, 5)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myFloatDiv(ifThenElseFloat(trueBool, 4.645336856249276, 10.0), myFloatSub(10.0, 100.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatToInt(myFloatIntMult(myFloatIntSub(0.1, 3), greaterThan(0.01, 1.0))))
48
Cv2Sqrt(ImageAlignmentECC(myIfThenElse(RandomUniform(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, -4, 4), Cv2iDCT(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1), LowpassFourierGaussian(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 255), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passInt(100)), ToFloatNorm(ArcCosine(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_2)), myIntSub(lessThanOrEqual(1.0, 10.0), greaterThan(1.0, 0.01)), myFloatIntDiv(passFloat(-1.1951896566834708), myIntMult(0, falseBool)), myAnd(equal(100.0, 0.1), ifThenElseBool(falseBool, falseBool, falseBool)), myOr(greaterThan(1.0, 0.01), notEqual(1.0, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))))
83
MultiplyTransposed(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, trueBool)
5
ECDF(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 100)
5
MorphErosionEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 5, 64, 8)
7
LowpassFilterAverage(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, falseBool)
5
SetToZeroIf<Data&Factor(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_2, Axis.FULL, 32)
8
MatchedFiltering(MorphGradientEllipse(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 50, 5), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), 1)
12
ThresholdBinaryFloat(HighpassUnsharpMask(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 5, 3, 3), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myFloatIntMult(1.9946364158821517, 9), passFloat(1.0))
17
Cv2Subtract(MedianFilterHole(PeakFinder(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 0.01, 6479), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myIntSub(8096, 0), lessThanOrEqual(0.1, 0.1)), HashingVectorizer(Cv2GreaterThan(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_1), trueBool, myIntSub(2, 100), lessThan(0.1, 100.0), myIntAdd(3, 10)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), Axis.AXIS_1, passAxis(passAxis(Axis.AXIS_1)))
46
Cv2Sqrt(WindowBackmanNuttall(FFT(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)))
16
Mutated 120 individuals
Mutating offspring (Remove Layer)
Cv2LessThanOrEqual(mySparsePCA(EmadeDataAddFloat(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 1.0), passTriState(TriState.STREAM_TO_FEATURES), lessThan(myFloatAdd(1.0, 1.0), myFloatSub(2.696341175037105, 0.01)), myFloatAdd(0.01, 1.0)), EqualizeAdaptHist(CornerDetectionHarris(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 255, 1, 100.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), passFloat(0.1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_1)))
Cv2LessThanOrEqual(mySparsePCA(EmadeDataAddFloat(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 1.0), passTriState(TriState.STREAM_TO_FEATURES), lessThan(myFloatAdd(1.0, 1.0), myFloatSub(2.696341175037105, 0.01)), myFloatAdd(0.01, 1.0)), EqualizeAdaptHist(CornerDetectionHarris(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 255, 1, 100.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), passFloat(0.1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_1)))
SetToZeroIf>Data&Factor(ContoursMaxLength(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 8), Cv2Add(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.AXIS_1), TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_0), myFloatIntSub(10.0, 4666))
SetToZeroIf>Data&Factor(ContoursMaxLength(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 8), Cv2Add(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.AXIS_1), TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_0), myFloatIntSub(10.0, 4666))
MySnapshot(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_2, falseBool)
MySnapshot(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_2, falseBool)
Round(Cv2LessThan(FractionDouble(GaussianFilter(MyAutoCorr(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myFloatIntDiv(1.0, trueBool)), GaussianPeakEM(Round(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.AXIS_2)), passInt(myOr(falseBool, falseBool))), EmadeDataNumpyMultiplyPair(ConvertBW(MorphOpenEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 255, 8), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1)), ContoursAll(Stemmatizer(MyDCT(EmadeDataAddFloat(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 1.0792845646876845), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), myIntDiv(2, 10), myAnd(trueBool, falseBool)), 50, 3), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), passAxis(passAxis(passAxis(Axis.FULL)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))))
Round(Cv2LessThan(FractionDouble(GaussianFilter(MyAutoCorr(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myFloatIntDiv(1.0, trueBool)), GaussianPeakEM(Round(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.AXIS_2)), passInt(myOr(falseBool, falseBool))), EmadeDataNumpyMultiplyPair(ConvertBW(MorphOpenEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 255, 8), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1)), ContoursAll(Stemmatizer(MyDCT(EmadeDataAddFloat(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 1.0792845646876845), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), myIntDiv(2, 10), myAnd(trueBool, falseBool)), 50, 3), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), passAxis(passAxis(passAxis(Axis.FULL)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))))
NNLearner(ARG0, OutputLayer(ARG0, ConcatenateLayer4(EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)), EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)), EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)), EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)))), 9)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 9)
FractionDouble(EdgeDetectionCanny(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 64, 6, 7), LowpassFilterAverage(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 9900), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_2), lessThanOrEqual(10.0, 100.0))
FractionDouble(EdgeDetectionCanny(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 64, 6, 7), LowpassFilterAverage(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 9900), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_2), lessThanOrEqual(10.0, 100.0))
FilterCentroids(ContourMaskMinEquDiameter(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, falseBool))
FilterCentroids(ContourMaskMinEquDiameter(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, falseBool))
ThresholdBinary(LocalPoolingMean(LinearPredictiveCoding(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 255), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), lessThanOrEqual(0.1, 0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), ifThenElseFloat(myAnd(trueBool, trueBool), passFloat(0.1), myFloatIntAdd(0.1, 2)), myOr(myAnd(falseBool, trueBool), myOr(falseBool, trueBool)))
ThresholdBinary(LocalPoolingMean(LinearPredictiveCoding(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 255), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), lessThanOrEqual(0.1, 0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), ifThenElseFloat(myAnd(trueBool, trueBool), passFloat(0.1), myFloatIntAdd(0.1, 2)), myOr(myAnd(falseBool, trueBool), myOr(falseBool, trueBool)))
NNLearner(ARG0, OutputLayer(ARG0, GlobalAveragePoolingLayer1D(EmbeddingLayer(93, ARG0, randomUniformWeights, InputLayer(GradientMagnitude(Tokenizer(ARG0, 7, 518), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), lessThanOrEqual(0.1, 1.6548537041261326)))))), 100)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(93, ARG0, randomUniformWeights, InputLayer(GradientMagnitude(Tokenizer(ARG0, 7, 518), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), lessThanOrEqual(0.1, 1.6548537041261326))))), 100)
EmadeDataAddPair(LowpassFilterMedian(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 0), SpectralClustering(ARG0, 4, 1.0), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_2))
EmadeDataAddPair(LowpassFilterMedian(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 0), SpectralClustering(ARG0, 4, 1.0), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_2))
NNLearner(ARG0, OutputLayer(ARG0, GlobalAveragePoolingLayer1D(EmbeddingLayer(100, ARG0, heWeights, InputLayer(ARG0)))), 4)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, heWeights, InputLayer(ARG0))), 4)
ThresholdNLargest(LognormalLM(Cv2iDCT(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myNot(falseBool))
ThresholdNLargest(LognormalLM(Cv2iDCT(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myNot(falseBool))
ContourMaskMaxSolidity(WindowTurkey(MatchedFiltering(SavitzkyGolayFilter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 87, 5, 2), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myAnd(falseBool, trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myFloatMult(myFloatAdd(-0.35649298395985163, 1.0), myIntToFloat(4))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myFloatMult(myFloatIntMult(ifThenElseFloat(falseBool, -3.2065381108254987, 1.0), myOr(falseBool, trueBool)), passFloat(myFloatIntMult(0.01, 128))))
ContourMaskMaxSolidity(WindowTurkey(MatchedFiltering(SavitzkyGolayFilter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 87, 5, 2), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myAnd(falseBool, trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myFloatMult(myFloatAdd(-0.35649298395985163, 1.0), myIntToFloat(4))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myFloatMult(myFloatIntMult(ifThenElseFloat(falseBool, -3.2065381108254987, 1.0), myOr(falseBool, trueBool)), passFloat(myFloatIntMult(0.01, 128))))
birch_clustering(WindowBlackman(ArcTangent(EmadeDataMultiplyInt(MyDWT(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 61), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), greaterThan(0.01, 0.1)), TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myFloatAdd(ifThenElseFloat(greaterThanEqual(10.0, 100.0), myFloatMult(0.1, 1.0), myFloatSub(0.1, 0.1)), myFloatSub(myFloatDiv(0.1, 0.1), myIntToFloat(6)))), myFloatDiv(myIntToFloat(greaterThanEqual(myFloatDiv(0.1, 1.0), passFloat(0.01))), myFloatIntSub(myFloatIntMult(myIntToFloat(6), lessThanOrEqual(-0.051486290484572095, -1.769474421690055)), myFloatToInt(myIntToFloat(55)))), myOr(trueBool, myOr(greaterThan(myFloatIntMult(1.0, 6), myFloatIntSub(0.01, 1)), lessThan(myFloatSub(0.1, 0.01), myFloatIntMult(0.1, 8)))), passInt(passInt(greaterThanEqual(100.0, myFloatSub(1.0, 0.01)))))
birch_clustering(WindowBlackman(ArcTangent(EmadeDataMultiplyInt(MyDWT(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 61), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), greaterThan(0.01, 0.1)), TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myFloatAdd(ifThenElseFloat(greaterThanEqual(10.0, 100.0), myFloatMult(0.1, 1.0), myFloatSub(0.1, 0.1)), myFloatSub(myFloatDiv(0.1, 0.1), myIntToFloat(6)))), myFloatDiv(myIntToFloat(greaterThanEqual(myFloatDiv(0.1, 1.0), passFloat(0.01))), myFloatIntSub(myFloatIntMult(myIntToFloat(6), lessThanOrEqual(-0.051486290484572095, -1.769474421690055)), myFloatToInt(myIntToFloat(55)))), myOr(trueBool, myOr(greaterThan(myFloatIntMult(1.0, 6), myFloatIntSub(0.01, 1)), lessThan(myFloatSub(0.1, 0.01), myFloatIntMult(0.1, 8)))), passInt(passInt(greaterThanEqual(100.0, myFloatSub(1.0, 0.01)))))
MaxLoc(BitwiseAnd(ContourMaskRangeLength(Round(StdDeviation(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 9), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), Axis.AXIS_0, equal(passFloat(10.0), myFloatDiv(0.01, 0.2274954885701046)), passBool(ifThenElseBool(falseBool, trueBool, falseBool))), ThresholdBinary(MyCumSum(LocalPoolingMax(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 6), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), 7), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), 100.0, myOr(greaterThanEqual(-4.171750319883218, 0.01), notEqual(10.0, 1.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), passAxis(passAxis(passAxis(Axis.AXIS_0)))), TriState.FEATURES_TO_FEATURES, passAxis(passAxis(passAxis(passAxis(Axis.FULL)))))
MaxLoc(BitwiseAnd(ContourMaskRangeLength(Round(StdDeviation(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 9), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), Axis.AXIS_0, equal(passFloat(10.0), myFloatDiv(0.01, 0.2274954885701046)), passBool(ifThenElseBool(falseBool, trueBool, falseBool))), ThresholdBinary(MyCumSum(LocalPoolingMax(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 6), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), 7), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), 100.0, myOr(greaterThanEqual(-4.171750319883218, 0.01), notEqual(10.0, 1.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), passAxis(passAxis(passAxis(Axis.AXIS_0)))), TriState.FEATURES_TO_FEATURES, passAxis(passAxis(passAxis(passAxis(Axis.FULL)))))
NNLearner(ARG0, OutputLayer(ARG0, Conv1DLayer(6, 32, 1, trueBool, trueBool, EmbeddingLayer(150, ARG0, randomUniformWeights, InputLayer(ConvolveChannelMerge(ARG0, 50))))), 100)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(150, ARG0, randomUniformWeights, InputLayer(ConvolveChannelMerge(ARG0, 50)))), 100)
mySelKBest(MorphGradientEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 4, 6), passTriState(TriState.FEATURES_TO_FEATURES), greaterThan(0.1, 100.0), lessThanOrEqual(100.0, 100.0))
mySelKBest(MorphGradientEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 4, 6), passTriState(TriState.FEATURES_TO_FEATURES), greaterThan(0.1, 100.0), lessThanOrEqual(100.0, 100.0))
MorphGradientEllipse(EmadeDataAddPairTriple(ARG0, ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_0, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), notEqual(10.0, 100.0), passBool(falseBool))
MorphGradientEllipse(EmadeDataAddPairTriple(ARG0, ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_0, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), notEqual(10.0, 100.0), passBool(falseBool))
ContourMaskRangeEquDiameter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 7, myIntSub(myFloatToInt(0.01), myFloatToInt(10.0)))
ContourMaskRangeEquDiameter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 7, myIntSub(myFloatToInt(0.01), myFloatToInt(10.0)))
ContourMaskMinArea(ARG0, passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myFloatSub(myFloatDiv(0.1, 3.318901895439245), myFloatAdd(1.0, 0.1)))
ContourMaskMinArea(ARG0, passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myFloatSub(myFloatDiv(0.1, 3.318901895439245), myFloatAdd(1.0, 0.1)))
Log(Cv2Sqrt(LocalPoolingMedian(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, myFloatToInt(3.090550872981341)), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)))
Log(Cv2Sqrt(LocalPoolingMedian(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, myFloatToInt(3.090550872981341)), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)))
NNLearner(ARG0, OutputLayer(SkiMedianFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 4), EmbeddingLayer(falseBool, ARG0, glorotUniformWeights, EmbeddingLayer(9, ContourMaskMaxExtentEnclosingCircle(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 100.0), randomUniformWeights, InputLayer(ARG0)))), 6)
NNLearner(ARG0, OutputLayer(SkiMedianFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 4), EmbeddingLayer(falseBool, ARG0, glorotUniformWeights, EmbeddingLayer(9, ContourMaskMaxExtentEnclosingCircle(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 100.0), randomUniformWeights, InputLayer(ARG0)))), 6)
SpectralClustering(WindowBartlett(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), passBool(lessThan(myFloatIntDiv(passFloat(0.01), equal(0.1, 0.01)), myFloatAdd(myFloatAdd(-4.404746095441986, 10.0), myFloatIntSub(4.3254805991726375, 100)))), myFloatAdd(myFloatIntMult(myFloatDiv(myFloatIntDiv(1.0, 50), 1.0), -4), 100.0))
SpectralClustering(WindowBartlett(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), passBool(lessThan(myFloatIntDiv(passFloat(0.01), equal(0.1, 0.01)), myFloatAdd(myFloatAdd(-4.404746095441986, 10.0), myFloatIntSub(4.3254805991726375, 100)))), myFloatAdd(myFloatIntMult(myFloatDiv(myFloatIntDiv(1.0, 50), 1.0), -4), 100.0))
SpectralClustering(StandardNorm(ARG0, TriState.STREAM_TO_STREAM, passAxis(passAxis(passAxis(Axis.AXIS_0)))), lessThan(myFloatIntAdd(myFloatIntDiv(myFloatSub(0.1, 0.1), passInt(10)), notEqual(-2.4033966752898586, 0.01)), myFloatSub(0.01, myIntToFloat(lessThanOrEqual(10.0, 100.0)))), 0.1)
SpectralClustering(StandardNorm(ARG0, TriState.STREAM_TO_STREAM, passAxis(passAxis(passAxis(Axis.AXIS_0)))), lessThan(myFloatIntAdd(myFloatIntDiv(myFloatSub(0.1, 0.1), passInt(10)), notEqual(-2.4033966752898586, 0.01)), myFloatSub(0.01, myIntToFloat(lessThanOrEqual(10.0, 100.0)))), 0.1)
MyDiff(ARG0, passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)))
MyDiff(ARG0, passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)))
RichardsonLucy(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 150)
RichardsonLucy(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 150)
ThresholdToZero(ContourMaskMaxExtent(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 1605), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatIntAdd(100.0, 5))
ThresholdToZero(ContourMaskMaxExtent(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 1605), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatIntAdd(100.0, 5))
NNLearner(ARG0, OutputLayer(ARG0, GlobalMaxPoolingLayer2D(EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)))), 95)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 95)
myIfThenElse(SepDetectionWindow(WindowGaussian(ConvertToCounts(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), ifThenElseFloat(falseBool, 1.0, 1.0)), myNot(myNot(falseBool)), notEqual(myFloatIntDiv(1.0, falseBool), myFloatAdd(0.9353847326723654, -1.1692407991663014)), myFloatMult(myFloatIntAdd(-4.457970858025218, 9), ifThenElseFloat(trueBool, 0.01, 0.01))), MeanWithHole(EmadeDataNumpyMultiplyFloat(MinimumToZero(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatSub(1.0, 0.1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), lessThanOrEqual(myFloatAdd(1.0, 1.4831844220014245), myFloatMult(-3.291612748715375, 0.01)), myFloatToInt(myFloatIntDiv(0.01, 5))), WindowKaiser(ToFloatNorm(RandomShuffle(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatIntDiv(myFloatIntSub(0.01, 15), greaterThanEqual(10.0, 10.0)), falseBool), passTriState(TriState.STREAM_TO_STREAM), TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, 150)
myIfThenElse(SepDetectionWindow(WindowGaussian(ConvertToCounts(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), ifThenElseFloat(falseBool, 1.0, 1.0)), myNot(myNot(falseBool)), notEqual(myFloatIntDiv(1.0, falseBool), myFloatAdd(0.9353847326723654, -1.1692407991663014)), myFloatMult(myFloatIntAdd(-4.457970858025218, 9), ifThenElseFloat(trueBool, 0.01, 0.01))), MeanWithHole(EmadeDataNumpyMultiplyFloat(MinimumToZero(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatSub(1.0, 0.1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), lessThanOrEqual(myFloatAdd(1.0, 1.4831844220014245), myFloatMult(-3.291612748715375, 0.01)), myFloatToInt(myFloatIntDiv(0.01, 5))), WindowKaiser(ToFloatNorm(RandomShuffle(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatIntDiv(myFloatIntSub(0.01, 15), greaterThanEqual(10.0, 10.0)), falseBool), passTriState(TriState.STREAM_TO_STREAM), TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, 150)
LabelObjects(MyDiff(MatchedFiltering(mySelKBest(ARG0, TriState.FEATURES_TO_FEATURES, 150, 128), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myIntMult(3591, 10)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))))
LabelObjects(MyDiff(MatchedFiltering(mySelKBest(ARG0, TriState.FEATURES_TO_FEATURES, 150, 128), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myIntMult(3591, 10)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))))
EmadeDataDivideInt(Rebase(CornerDetectionHarris(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 255, 1, 100.0), TriState.STREAM_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), greaterThanEqual(0.01, 0.1))
EmadeDataDivideInt(Rebase(CornerDetectionHarris(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 255, 1, 100.0), TriState.STREAM_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), greaterThanEqual(0.01, 0.1))
RichardsonLucy(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 8)
RichardsonLucy(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 8)
Cosine(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0)
Cosine(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0)
Prerejection(GradientMagnitude(Cv2Min(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.FULL, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myNot(trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), equal(myFloatAdd(0.1, 0.01), myFloatDiv(100.0, -2.5189298705474137)), myNot(lessThanOrEqual(10.0, 0.1)), passFloat(myFloatSub(100.0, 1.0)))
Prerejection(GradientMagnitude(Cv2Min(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.FULL, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myNot(trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), equal(myFloatAdd(0.1, 0.01), myFloatDiv(100.0, -2.5189298705474137)), myNot(lessThanOrEqual(10.0, 0.1)), passFloat(myFloatSub(100.0, 1.0)))
LowpassFilterUniform(ImagePeakFinder(SobelFilter(ThresholdBinaryMax(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 10, 0.01), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), passTriState(TriState.STREAM_TO_FEATURES), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2))), passBool(lessThan(myFloatIntMult(100.0, 64), myFloatSub(4.589164718005721, 0.1))))
LowpassFilterUniform(ImagePeakFinder(SobelFilter(ThresholdBinaryMax(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 10, 0.01), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), passTriState(TriState.STREAM_TO_FEATURES), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2))), passBool(lessThan(myFloatIntMult(100.0, 64), myFloatSub(4.589164718005721, 0.1))))
MorphBlackhatRect(WindowBartlettHann(EmadeDataDividePair(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myAnd(myOr(trueBool, falseBool), ifThenElseBool(falseBool, falseBool, trueBool)), ifThenElseBool(notEqual(10.0, 100.0), lessThan(0.1, 100.0), passBool(trueBool)))
MorphBlackhatRect(WindowBartlettHann(EmadeDataDividePair(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myAnd(myOr(trueBool, falseBool), ifThenElseBool(falseBool, falseBool, trueBool)), ifThenElseBool(notEqual(10.0, 100.0), lessThan(0.1, 100.0), passBool(trueBool)))
EmadeDataDivideFloat(SkiMedianFilter(EdgeDetectionCanny(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 9, 5, 55), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myIntSub(10, 7)), passTriState(TriState.STREAM_TO_FEATURES), passAxis(passAxis(Axis.AXIS_1)), myFloatIntMult(myIntToFloat(32), myIntAdd(255, 255)))
EmadeDataDivideFloat(SkiMedianFilter(EdgeDetectionCanny(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 9, 5, 55), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myIntSub(10, 7)), passTriState(TriState.STREAM_TO_FEATURES), passAxis(passAxis(Axis.AXIS_1)), myFloatIntMult(myIntToFloat(32), myIntAdd(255, 255)))
AdjustConstrastLog(SetToZeroIf>Data&Factor(ContourMaskRangeExtentEnclosingCircle(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 8, falseBool), FractionTriple(ARG0, ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_0, Axis.AXIS_0, trueBool), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_1), myFloatAdd(1.0450966939200557, 0.1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passFloat(myFloatDiv(1.0, 0.1)))
AdjustConstrastLog(SetToZeroIf>Data&Factor(ContourMaskRangeExtentEnclosingCircle(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 8, falseBool), FractionTriple(ARG0, ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_0, Axis.AXIS_0, trueBool), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_1), myFloatAdd(1.0450966939200557, 0.1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passFloat(myFloatDiv(1.0, 0.1)))
ContourMaskMinLength(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 3.8678377272836997)
ContourMaskMinLength(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 3.8678377272836997)
MyCumSum(Cv2RMS(SubtractSaturate(ThresholdToZeroFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 100.0), MultiplyTransposed(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, falseBool), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myNot(lessThan(100.0, 100.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), passInt(myIntDiv(myIntAdd(3, falseBool), passBool(falseBool))))
MyCumSum(Cv2RMS(SubtractSaturate(ThresholdToZeroFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 100.0), MultiplyTransposed(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, falseBool), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myNot(lessThan(100.0, 100.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), passInt(myIntDiv(myIntAdd(3, falseBool), passBool(falseBool))))
EmadeDataMultiplyFloat(EmadeDataDivideFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 100.0), TriState.STREAM_TO_STREAM, Axis.AXIS_2, passFloat(100.0))
EmadeDataMultiplyFloat(EmadeDataDivideFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 100.0), TriState.STREAM_TO_STREAM, Axis.AXIS_2, passFloat(100.0))
EmadeDataMultiplyInt(ContourMaskRangeLength(AbsoluteValue(LowpassFilterMedian(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 150), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), greaterThanEqual(myFloatIntSub(10.0, 2), myFloatMult(-3.627473698791701, -2.1000160235203467)), myOr(myNot(trueBool), equal(0.1, 0.1))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myIntMult(equal(myFloatIntMult(1.0, 2), myFloatIntSub(10.0, 7)), equal(myFloatIntMult(10.0, 55), myIntToFloat(8))))
EmadeDataMultiplyInt(ContourMaskRangeLength(AbsoluteValue(LowpassFilterMedian(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 150), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), greaterThanEqual(myFloatIntSub(10.0, 2), myFloatMult(-3.627473698791701, -2.1000160235203467)), myOr(myNot(trueBool), equal(0.1, 0.1))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myIntMult(equal(myFloatIntMult(1.0, 2), myFloatIntSub(10.0, 7)), equal(myFloatIntMult(10.0, 55), myIntToFloat(8))))
SpectralFilter(ContourMaskRangeEquDiameter(MorphOpenCross(BayesMulti(RandomUniform(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 8, 6)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), greaterThan(myFloatAdd(1.0681860033116575, 1.0), passFloat(0.1)), lessThan(myFloatIntSub(0.1, 0), myFloatIntAdd(100.0, 2))), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(passAxis(passAxis(Axis.AXIS_0))), 10, equal(myFloatSub(myFloatDiv(0.1, 0.1), myFloatIntDiv(0.01, 6)), myFloatIntAdd(10.0, passInt(10)))), MaximumWindow(ARG0, myIntAdd(notEqual(myFloatIntMult(1.0, 128), myFloatDiv(0.1, 1.0)), myIntMult(myAnd(falseBool, falseBool), myFloatToInt(0.01))), ifThenElseBool(notEqual(myFloatSub(0.01, 1.0), myFloatSub(10.0, 0.01)), lessThan(myFloatIntAdd(0.1, 150), myFloatIntSub(10.0, 55)), equal(ifThenElseFloat(trueBool, -2.897542497291231, 0.1), myFloatSub(100.0, 10.0))), passFloat(myIntToFloat(greaterThan(1.0, 1.0)))), GaussianFilter(RandomNormal(AdjustConstrastLog(ARG0, passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myFloatDiv(100.0, 4.682150619736657)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), 9, myIntSub(notEqual(1.0, 0.10412231354917001), passInt(7))), TriState.FEATURES_TO_FEATURES, passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatIntDiv(4.115153324802437, passInt(myIntAdd(falseBool, 1)))), MyBinaryThreshold(AbsDiff(CopyStreamToTarget(ContourMaskMaxExtent(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 6715)), SkiMedianFilter(HashingVectorizer(ARG0, trueBool, trueBool, 2, 1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), myIntAdd(7, 5382)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatIntSub(myIntToFloat(myAnd(trueBool, falseBool)), greaterThanEqual(ifThenElseFloat(trueBool, 1.0, 1.0), myFloatIntMult(-1.7635954076824212, 1079)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), Axis.AXIS_1, passAxis(passAxis(passAxis(Axis.AXIS_0))), Axis.AXIS_1, passAxis(passAxis(Axis.AXIS_1)))
SpectralFilter(ContourMaskRangeEquDiameter(MorphOpenCross(BayesMulti(RandomUniform(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 8, 6)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), greaterThan(myFloatAdd(1.0681860033116575, 1.0), passFloat(0.1)), lessThan(myFloatIntSub(0.1, 0), myFloatIntAdd(100.0, 2))), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(passAxis(passAxis(Axis.AXIS_0))), 10, equal(myFloatSub(myFloatDiv(0.1, 0.1), myFloatIntDiv(0.01, 6)), myFloatIntAdd(10.0, passInt(10)))), MaximumWindow(ARG0, myIntAdd(notEqual(myFloatIntMult(1.0, 128), myFloatDiv(0.1, 1.0)), myIntMult(myAnd(falseBool, falseBool), myFloatToInt(0.01))), ifThenElseBool(notEqual(myFloatSub(0.01, 1.0), myFloatSub(10.0, 0.01)), lessThan(myFloatIntAdd(0.1, 150), myFloatIntSub(10.0, 55)), equal(ifThenElseFloat(trueBool, -2.897542497291231, 0.1), myFloatSub(100.0, 10.0))), passFloat(myIntToFloat(greaterThan(1.0, 1.0)))), GaussianFilter(RandomNormal(AdjustConstrastLog(ARG0, passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myFloatDiv(100.0, 4.682150619736657)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), 9, myIntSub(notEqual(1.0, 0.10412231354917001), passInt(7))), TriState.FEATURES_TO_FEATURES, passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatIntDiv(4.115153324802437, passInt(myIntAdd(falseBool, 1)))), MyBinaryThreshold(AbsDiff(CopyStreamToTarget(ContourMaskMaxExtent(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 6715)), SkiMedianFilter(HashingVectorizer(ARG0, trueBool, trueBool, 2, 1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), myIntAdd(7, 5382)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatIntSub(myIntToFloat(myAnd(trueBool, falseBool)), greaterThanEqual(ifThenElseFloat(trueBool, 1.0, 1.0), myFloatIntMult(-1.7635954076824212, 1079)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), Axis.AXIS_1, passAxis(passAxis(passAxis(Axis.AXIS_0))), Axis.AXIS_1, passAxis(passAxis(Axis.AXIS_1)))
MorphCloseCross(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 1, 64)
MorphCloseCross(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 1, 64)
Select3D(EmadeDataSubtractFloat(EqualizeHist(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), ifThenElseFloat(trueBool, 0.01, 0.1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myIntMult(myIntAdd(3, trueBool), equal(2.4488505117928483, 100.0)), myAnd(notEqual(10.0, 0.1), lessThanOrEqual(0.1, 0.1)), passInt(myIntDiv(2, 0)), myIntSub(myOr(falseBool, trueBool), myOr(trueBool, trueBool)), myIntDiv(greaterThanEqual(100.0, 10.0), myIntDiv(trueBool, 32)), myNot(lessThanOrEqual(10.0, 10.0)))
Select3D(EmadeDataSubtractFloat(EqualizeHist(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), ifThenElseFloat(trueBool, 0.01, 0.1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myIntMult(myIntAdd(3, trueBool), equal(2.4488505117928483, 100.0)), myAnd(notEqual(10.0, 0.1), lessThanOrEqual(0.1, 0.1)), passInt(myIntDiv(2, 0)), myIntSub(myOr(falseBool, trueBool), myOr(trueBool, trueBool)), myIntDiv(greaterThanEqual(100.0, 10.0), myIntDiv(trueBool, 32)), myNot(lessThanOrEqual(10.0, 10.0)))
adf_1(ARG0)
adf_1(ARG0)
LocalPoolingMean(ContourMaskRangeExtent(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 10, 7), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), greaterThan(2.4325666852482506, 1.0))
LocalPoolingMean(ContourMaskRangeExtent(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 10, 7), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), greaterThan(2.4325666852482506, 1.0))
Tangent(RegionalMaxima(Fraction(WindowKaiser(CCorrObjectFilter(ARG0, ARG0, 3, 100.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatIntAdd(0.1, 150), passBool(falseBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), greaterThan(myFloatMult(0.01, 100.0), myFloatIntSub(0.01, 255))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), ifThenElseFloat(greaterThanEqual(myFloatIntSub(0.1, 150), myFloatSub(10.0, 1.0)), myFloatSub(myFloatIntMult(10.0, 8), myFloatMult(2.1989312720416603, 100.0)), myFloatIntDiv(myFloatIntAdd(1.0, 100), myIntSub(1, 69)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))))
Tangent(RegionalMaxima(Fraction(WindowKaiser(CCorrObjectFilter(ARG0, ARG0, 3, 100.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatIntAdd(0.1, 150), passBool(falseBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), greaterThan(myFloatMult(0.01, 100.0), myFloatIntSub(0.01, 255))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), ifThenElseFloat(greaterThanEqual(myFloatIntSub(0.1, 150), myFloatSub(10.0, 1.0)), myFloatSub(myFloatIntMult(10.0, 8), myFloatMult(2.1989312720416603, 100.0)), myFloatIntDiv(myFloatIntAdd(1.0, 100), myIntSub(1, 69)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))))
mySelKBest(MorphErosionRect(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 0, 9, 150), passTriState(TriState.STREAM_TO_STREAM), myIntMult(3, 5), notEqual(10.0, 0.01))
mySelKBest(MorphErosionRect(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 0, 9, 150), passTriState(TriState.STREAM_TO_STREAM), myIntMult(3, 5), notEqual(10.0, 0.01))
MyProd(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2)
MyProd(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2)
ContourMaskMaxLength(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 3.3617056088785517)
ContourMaskMaxLength(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 3.3617056088785517)
LogDetection(AdjustConstrastLog(MorphDilateRect(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 9, 10, 10), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passFloat(0.6825997948990068)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), ifThenElseFloat(passBool(falseBool), myFloatAdd(100.0, 0.01), myIntToFloat(73)), myFloatSub(myFloatAdd(100.0, 0.1), passFloat(0.01)), lessThan(myFloatIntDiv(0.1, 59), myFloatAdd(100.0, 1.895264357052982)), passFloat(myIntToFloat(6)), myFloatDiv(myFloatIntAdd(1.8902248861894124, 64), myFloatIntSub(1.0, 10)))
LogDetection(AdjustConstrastLog(MorphDilateRect(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 9, 10, 10), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passFloat(0.6825997948990068)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), ifThenElseFloat(passBool(falseBool), myFloatAdd(100.0, 0.01), myIntToFloat(73)), myFloatSub(myFloatAdd(100.0, 0.1), passFloat(0.01)), lessThan(myFloatIntDiv(0.1, 59), myFloatAdd(100.0, 1.895264357052982)), passFloat(myIntToFloat(6)), myFloatDiv(myFloatIntAdd(1.8902248861894124, 64), myFloatIntSub(1.0, 10)))
ImageAlignmentECC(Sentiment(ContourMaskMinAspectRatio(agglomerative_clustering(ARG0, 46), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myFloatIntAdd(-3.287870676610547, 0)), passBool(passBool(trueBool))), Log(BitwiseOr(ARG0, HighpassIrst(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2))), passAxis(Axis.FULL), equal(myFloatMult(passFloat(0.01), ifThenElseFloat(falseBool, 1.0, 1.0)), myFloatIntDiv(-2.5975951472094327, equal(0.1, 1.0))), myFloatIntAdd(myFloatIntMult(myFloatAdd(10.0, -1.7830310615497993), myOr(falseBool, falseBool)), notEqual(myIntToFloat(150), 10.0)), myIntAdd(myIntMult(myNot(trueBool), myIntMult(55, 32)), myOr(ifThenElseBool(trueBool, falseBool, falseBool), equal(1.0, 1.0))), 32)
ImageAlignmentECC(Sentiment(ContourMaskMinAspectRatio(agglomerative_clustering(ARG0, 46), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myFloatIntAdd(-3.287870676610547, 0)), passBool(passBool(trueBool))), Log(BitwiseOr(ARG0, HighpassIrst(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2))), passAxis(Axis.FULL), equal(myFloatMult(passFloat(0.01), ifThenElseFloat(falseBool, 1.0, 1.0)), myFloatIntDiv(-2.5975951472094327, equal(0.1, 1.0))), myFloatIntAdd(myFloatIntMult(myFloatAdd(10.0, -1.7830310615497993), myOr(falseBool, falseBool)), notEqual(myIntToFloat(150), 10.0)), myIntAdd(myIntMult(myNot(trueBool), myIntMult(55, 32)), myOr(ifThenElseBool(trueBool, falseBool, falseBool), equal(1.0, 1.0))), 32)
BackgroundSubtraction(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL)
BackgroundSubtraction(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL)
ThresholdBinaryFloat(MorphErosionCross(ContourMaskRangeEquDiameter(MorphOpenRect(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 0, 50), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), greaterThan(10.0, 10.0), myIntAdd(falseBool, 8)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatToInt(myFloatSub(-0.6974171637667306, 0.1)), myOr(greaterThanEqual(1.0, 100.0), equal(0.01, 0.01)), lessThanOrEqual(myFloatIntSub(0.01, 1), myIntToFloat(32))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myIntToFloat(myNot(greaterThanEqual(1.0, -1.9165816231832067))), myFloatDiv(myFloatIntSub(myFloatAdd(0.1, 1.0), notEqual(1.3409624802597628, 1.0)), myFloatIntDiv(ifThenElseFloat(falseBool, 0.1, -0.5347919246925557), myIntAdd(-2, 64))))
ThresholdBinaryFloat(MorphErosionCross(ContourMaskRangeEquDiameter(MorphOpenRect(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 0, 50), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), greaterThan(10.0, 10.0), myIntAdd(falseBool, 8)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatToInt(myFloatSub(-0.6974171637667306, 0.1)), myOr(greaterThanEqual(1.0, 100.0), equal(0.01, 0.01)), lessThanOrEqual(myFloatIntSub(0.01, 1), myIntToFloat(32))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myIntToFloat(myNot(greaterThanEqual(1.0, -1.9165816231832067))), myFloatDiv(myFloatIntSub(myFloatAdd(0.1, 1.0), notEqual(1.3409624802597628, 1.0)), myFloatIntDiv(ifThenElseFloat(falseBool, 0.1, -0.5347919246925557), myIntAdd(-2, 64))))
MultiplyTransposed(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, trueBool)
MultiplyTransposed(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, trueBool)
ThresholdToZero(SetToZeroIf>Data&Factor(Sentiment(ARG0, falseBool), WindowFlatTop(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_0), myFloatDiv(1.0, 1.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myFloatMult(ifThenElseFloat(trueBool, 0.01, 10.0), myIntToFloat(7)))
ThresholdToZero(SetToZeroIf>Data&Factor(Sentiment(ARG0, falseBool), WindowFlatTop(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_0), myFloatDiv(1.0, 1.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myFloatMult(ifThenElseFloat(trueBool, 0.01, 10.0), myIntToFloat(7)))
SobelFilter(AffinityPropagationClustering(ARG0, 100.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1))
SobelFilter(AffinityPropagationClustering(ARG0, 100.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1))
MorphGradientCross(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 55, 64)
MorphGradientCross(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 55, 64)
BackgroundSubtraction(ARG0, passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)))
BackgroundSubtraction(ARG0, passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)))
MorphDilateCross(Cv2Subtract(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myFloatToInt(100.0), myIntMult(10, 1468), greaterThan(1.0, 100.0))
MorphDilateCross(Cv2Subtract(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myFloatToInt(100.0), myIntMult(10, 1468), greaterThan(1.0, 100.0))
mySelPercentile(EmadeDataSubtractInt(ContoursConvexConcave(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, trueBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myNot(falseBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), lessThan(myFloatIntAdd(100.0, falseBool), myFloatIntDiv(100.0, 10)), lessThanOrEqual(ifThenElseFloat(trueBool, 0.01, 0.1), myFloatAdd(10.0, 0.1)))
mySelPercentile(EmadeDataSubtractInt(ContoursConvexConcave(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, trueBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myNot(falseBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), lessThan(myFloatIntAdd(100.0, falseBool), myFloatIntDiv(100.0, 10)), lessThanOrEqual(ifThenElseFloat(trueBool, 0.01, 0.1), myFloatAdd(10.0, 0.1)))
myVarThresh(StdDeviationHole(LocalPoolingMedian(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 128), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myIntAdd(5, 5), notEqual(0.01, 0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), myFloatIntAdd(ifThenElseFloat(trueBool, 0.1, 0.1), notEqual(-3.9244346354885575, 10.0)))
myVarThresh(StdDeviationHole(LocalPoolingMedian(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 128), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myIntAdd(5, 5), notEqual(0.01, 0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), myFloatIntAdd(ifThenElseFloat(trueBool, 0.1, 0.1), notEqual(-3.9244346354885575, 10.0)))
MultiplyTransposed(MorphCloseCross(Cv2Max(RXAnomalyDetector(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 1.0), NumNamedEntities(ARG0), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_0)), TriState.FEATURES_TO_FEATURES, passAxis(passAxis(Axis.AXIS_0)), greaterThan(myFloatSub(10.0, 1.421749024510163), ifThenElseFloat(falseBool, 100.0, 1.0)), passBool(myNot(falseBool))), TriState.STREAM_TO_STREAM, passAxis(passAxis(passAxis(Axis.FULL))), lessThanOrEqual(ifThenElseFloat(falseBool, myFloatSub(1.0, 3.385892724674113), 0.1), myFloatIntAdd(myFloatIntMult(1.0, 150), greaterThan(100.0, 100.0))))
MultiplyTransposed(MorphCloseCross(Cv2Max(RXAnomalyDetector(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 1.0), NumNamedEntities(ARG0), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_0)), TriState.FEATURES_TO_FEATURES, passAxis(passAxis(Axis.AXIS_0)), greaterThan(myFloatSub(10.0, 1.421749024510163), ifThenElseFloat(falseBool, 100.0, 1.0)), passBool(myNot(falseBool))), TriState.STREAM_TO_STREAM, passAxis(passAxis(passAxis(Axis.FULL))), lessThanOrEqual(ifThenElseFloat(falseBool, myFloatSub(1.0, 3.385892724674113), 0.1), myFloatIntAdd(myFloatIntMult(1.0, 150), greaterThan(100.0, 100.0))))
mySelPercentile(ARG0, TriState.FEATURES_TO_FEATURES, 150, falseBool)
mySelPercentile(ARG0, TriState.FEATURES_TO_FEATURES, 150, falseBool)
ContourMaskMinExtentEnclosingCircle(EmadeDataMultiplyFloat(MultiplyTransposed(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, trueBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passFloat(0.1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myFloatDiv(myFloatAdd(0.1, 1.7935651108603787), myIntToFloat(82)))
ContourMaskMinExtentEnclosingCircle(EmadeDataMultiplyFloat(MultiplyTransposed(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, trueBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passFloat(0.1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myFloatDiv(myFloatAdd(0.1, 1.7935651108603787), myIntToFloat(82)))
LocalPoolingMean(Cv2TemplateMatching(ARG0, 1, 0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), myIntSub(1, 128))
LocalPoolingMean(Cv2TemplateMatching(ARG0, 1, 0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), myIntSub(1, 128))
MultiplyTransposed(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, trueBool)
MultiplyTransposed(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, trueBool)
ToUint8Scale(LocalPoolingMax(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 5), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1))
ToUint8Scale(LocalPoolingMax(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 5), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1))
MorphDilateRect(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 10, 5, 6)
MorphDilateRect(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 10, 5, 6)
SubtractSaturate(ThresholdBinaryMax(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 35, 10.0), BackgroundSubtraction(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), TriState.STREAM_TO_FEATURES, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0))
SubtractSaturate(ThresholdBinaryMax(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 35, 10.0), BackgroundSubtraction(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), TriState.STREAM_TO_FEATURES, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0))
Exponetial(ToUint8(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL))
Exponetial(ToUint8(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL))
ContourMaskMaxEnclosingCircle(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 100.0)
ContourMaskMaxEnclosingCircle(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 100.0)
Sine(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL)
Sine(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL)
MorphErosionEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 6, 64, 4728)
MorphErosionEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 6, 64, 4728)
MorphErosionRect(ContourMaskRangeEquDiameter(MedianFilterHole(ContoursAll(EmadeDataAddPairTriple(ARG0, ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_1, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), passBool(lessThanOrEqual(10.0, 100.0)), passInt(ifThenElseBool(trueBool, falseBool, trueBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myIntSub(myIntAdd(myFloatToInt(10.0), passInt(150)), myIntDiv(myIntDiv(255, 255), myOr(falseBool, falseBool))), lessThan(passFloat(myFloatIntDiv(100.0, 4)), myFloatIntMult(passFloat(10.0), myIntMult(32, 12)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myAnd(greaterThan(myIntToFloat(greaterThan(0.01, -0.5956156197401983)), myFloatAdd(myFloatDiv(-2.7229837719407035, 4.3362734712465905), myFloatDiv(1.1197764073421776, 0.4765692406226254))), myNot(lessThan(myFloatIntDiv(0.1, 10), myFloatIntSub(100.0, 4)))), myIntMult(myFloatToInt(myIntToFloat(myOr(trueBool, falseBool))), equal(myFloatIntAdd(myFloatIntAdd(0.01, 4), notEqual(100.0, 0.01)), passFloat(myFloatIntSub(0.1, 0)))), equal(myFloatIntSub(myFloatIntAdd(myFloatIntSub(0.1, 255), myIntDiv(64, 32)), lessThanOrEqual(myFloatIntAdd(-0.4070547785511591, 0), myIntToFloat(5))), myFloatSub(myIntToFloat(greaterThanEqual(0.1, 0.1)), myFloatAdd(myIntToFloat(4), myFloatDiv(10.0, 10.0)))))
MorphErosionRect(ContourMaskRangeEquDiameter(MedianFilterHole(ContoursAll(EmadeDataAddPairTriple(ARG0, ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_1, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), passBool(lessThanOrEqual(10.0, 100.0)), passInt(ifThenElseBool(trueBool, falseBool, trueBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myIntSub(myIntAdd(myFloatToInt(10.0), passInt(150)), myIntDiv(myIntDiv(255, 255), myOr(falseBool, falseBool))), lessThan(passFloat(myFloatIntDiv(100.0, 4)), myFloatIntMult(passFloat(10.0), myIntMult(32, 12)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myAnd(greaterThan(myIntToFloat(greaterThan(0.01, -0.5956156197401983)), myFloatAdd(myFloatDiv(-2.7229837719407035, 4.3362734712465905), myFloatDiv(1.1197764073421776, 0.4765692406226254))), myNot(lessThan(myFloatIntDiv(0.1, 10), myFloatIntSub(100.0, 4)))), myIntMult(myFloatToInt(myIntToFloat(myOr(trueBool, falseBool))), equal(myFloatIntAdd(myFloatIntAdd(0.01, 4), notEqual(100.0, 0.01)), passFloat(myFloatIntSub(0.1, 0)))), equal(myFloatIntSub(myFloatIntAdd(myFloatIntSub(0.1, 255), myIntDiv(64, 32)), lessThanOrEqual(myFloatIntAdd(-0.4070547785511591, 0), myIntToFloat(5))), myFloatSub(myIntToFloat(greaterThanEqual(0.1, 0.1)), myFloatAdd(myIntToFloat(4), myFloatDiv(10.0, 10.0)))))
ContourMaskMaxEquDiameter(RegionalMaxima(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0.01), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myNot(falseBool))
ContourMaskMaxEquDiameter(RegionalMaxima(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0.01), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myNot(falseBool))
InRange(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 9, 6)
InRange(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 9, 6)
MyDCT(EmadeDataAddPairTriple(Correlation(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.FULL), ContourMaskMinArea(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 0.1), MyCumProd(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 5), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), passAxis(Axis.FULL), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myIntSub(myNot(trueBool), myOr(falseBool, falseBool)), myIntMult(notEqual(100.0, 1.0), myAnd(trueBool, trueBool)))
MyDCT(EmadeDataAddPairTriple(Correlation(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.FULL), ContourMaskMinArea(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 0.1), MyCumProd(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 5), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), passAxis(Axis.FULL), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myIntSub(myNot(trueBool), myOr(falseBool, falseBool)), myIntMult(notEqual(100.0, 1.0), myAnd(trueBool, trueBool)))
ThresholdToZeroPixelFloat(WindowFlatTop(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2), MatchedFiltering(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 150), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.FULL))
ThresholdToZeroPixelFloat(WindowFlatTop(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2), MatchedFiltering(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 150), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.FULL))
NumNamedEntities(ARG0)
NumNamedEntities(ARG0)
GradientMagnitude(WindowBackmanNuttall(LocalPoolingMean(StdDeviation(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 5), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), lessThanOrEqual(0.1, 1.0)), TriState.STREAM_TO_STREAM, passAxis(passAxis(Axis.AXIS_0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), Axis.AXIS_1, myNot(myNot(greaterThan(0.01, 0.1))))
GradientMagnitude(WindowBackmanNuttall(LocalPoolingMean(StdDeviation(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 5), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), lessThanOrEqual(0.1, 1.0)), TriState.STREAM_TO_STREAM, passAxis(passAxis(Axis.AXIS_0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), Axis.AXIS_1, myNot(myNot(greaterThan(0.01, 0.1))))
ThresholdNLargest(MinLoc(MorphDilateEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 7, 10, 64), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myNot(lessThan(2.8662996504835245, 10.0)))
ThresholdNLargest(MinLoc(MorphDilateEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 7, 10, 64), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myNot(lessThan(2.8662996504835245, 10.0)))
ConvolveChannelMerge(ScalarMin(HighpassSobelDerivative(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, falseBool, 1, 50, 6, 100), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myIntDiv(10, 55)), myOr(passBool(trueBool), greaterThan(0.1, 10.0)))
ConvolveChannelMerge(ScalarMin(HighpassSobelDerivative(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, falseBool, 1, 50, 6, 100), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myIntDiv(10, 55)), myOr(passBool(trueBool), greaterThan(0.1, 10.0)))
ContourMaskMaxLength(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 2.9331194897556436)
ContourMaskMaxLength(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 2.9331194897556436)
CrossCorrelation(InRange(ScalarAdd(ContourMaskMinExtentEnclosingCircle(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 0.1), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), myIntToFloat(100)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), greaterThan(myIntToFloat(0), ifThenElseFloat(trueBool, 0.1, 0.1)), myAnd(lessThanOrEqual(0.1, 0.1), myAnd(trueBool, trueBool))), CutDataLead(WindowHamming(EmadeDataDividePair(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), equal(0.01, 0.1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), greaterThan(myFloatSub(10.0, 1.0), ifThenElseFloat(trueBool, 100.0, -1.5117680474715458))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), passAxis(passAxis(passAxis(Axis.FULL))))
CrossCorrelation(InRange(ScalarAdd(ContourMaskMinExtentEnclosingCircle(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 0.1), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), myIntToFloat(100)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), greaterThan(myIntToFloat(0), ifThenElseFloat(trueBool, 0.1, 0.1)), myAnd(lessThanOrEqual(0.1, 0.1), myAnd(trueBool, trueBool))), CutDataLead(WindowHamming(EmadeDataDividePair(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), equal(0.01, 0.1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), greaterThan(myFloatSub(10.0, 1.0), ifThenElseFloat(trueBool, 100.0, -1.5117680474715458))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), passAxis(passAxis(passAxis(Axis.FULL))))
ThresholdToZeroPixelFloat(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_2)
ThresholdToZeroPixelFloat(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_2)
k_means_clustering(WindowPlanckTaper(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 0.01), myNot(falseBool))
k_means_clustering(WindowPlanckTaper(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 0.01), myNot(falseBool))
ZeroOneNorm(ECDF(myICA(ARG0, TriState.STREAM_TO_FEATURES, 4, trueBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passBool(trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)))
ZeroOneNorm(ECDF(myICA(ARG0, TriState.STREAM_TO_FEATURES, 4, trueBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passBool(trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)))
MorphDilateEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 128, falseBool, 100)
MorphDilateEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 128, falseBool, 100)
StdDeviation(AdjustConstrastLog(Cv2NotEqual(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.FULL, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatIntSub(1.0, 6103)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myIntSub(myIntAdd(8, 1), myIntMult(128, 2)))
StdDeviation(AdjustConstrastLog(Cv2NotEqual(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.FULL, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatIntSub(1.0, 6103)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myIntSub(myIntAdd(8, 1), myIntMult(128, 2)))
EmadeDataMultiplyInt(ContourMaskRangeEquDiameter(MinLoc(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), myFloatToInt(2.5195073275470463), notEqual(100.0, 0.01)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), notEqual(ifThenElseFloat(falseBool, 0.1, 0.01), passFloat(10.0)))
EmadeDataMultiplyInt(ContourMaskRangeEquDiameter(MinLoc(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), myFloatToInt(2.5195073275470463), notEqual(100.0, 0.01)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), notEqual(ifThenElseFloat(falseBool, 0.1, 0.01), passFloat(10.0)))
Prerejection(ContourMaskRangeEquDiameter(RandomUniform(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, falseBool, 255), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myIntDiv(1, 55), notEqual(-1.5339542588046107, 10.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), 3, myIntAdd(100, lessThanOrEqual(0.01, -4.674255599033462)), 100.0)
Prerejection(ContourMaskRangeEquDiameter(RandomUniform(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, falseBool, 255), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myIntDiv(1, 55), notEqual(-1.5339542588046107, 10.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), 3, myIntAdd(100, lessThanOrEqual(0.01, -4.674255599033462)), 100.0)
Cv2TemplateMatching(Cv2LessThan(ContourMaskRangeEquDiameter(MyAverager(MorphBlackhatEllipse(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 8, 150), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), lessThan(1.0, 10.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), greaterThanEqual(ifThenElseFloat(falseBool, 100.0, -1.4931119054945272), myFloatIntSub(0.01, 4)), greaterThan(myFloatAdd(1.0, 0.1), myIntToFloat(150))), AbsDiff(MaxLoc(MyProd(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL)), MorphBlackhatRect(ThresholdBinaryMax(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 150, -4.809814514312042), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), notEqual(0.1, 1.0), passBool(trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), passAxis(passAxis(passAxis(Axis.AXIS_0)))), passBool(lessThanOrEqual(ifThenElseFloat(greaterThan(-0.7111790658374577, 100.0), myFloatIntSub(0.01, 32), myIntToFloat(44)), ifThenElseFloat(equal(100.0, 0.01), myFloatAdd(10.0, 100.0), myIntToFloat(86)))), lessThanOrEqual(myFloatIntSub(passFloat(myFloatIntAdd(2.8612702212384775, 8505)), myIntMult(passInt(6), greaterThan(0.01, -3.047078711404433))), ifThenElseFloat(lessThanOrEqual(myFloatIntMult(0.1, 5), myFloatAdd(0.1, 2.856294308375917)), myFloatIntAdd(myFloatDiv(0.01, 2.233037287149128), myIntSub(32, 64)), myFloatAdd(passFloat(10.0), myFloatIntAdd(0.1, 0)))))
Cv2TemplateMatching(Cv2LessThan(ContourMaskRangeEquDiameter(MyAverager(MorphBlackhatEllipse(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 8, 150), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), lessThan(1.0, 10.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), greaterThanEqual(ifThenElseFloat(falseBool, 100.0, -1.4931119054945272), myFloatIntSub(0.01, 4)), greaterThan(myFloatAdd(1.0, 0.1), myIntToFloat(150))), AbsDiff(MaxLoc(MyProd(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL)), MorphBlackhatRect(ThresholdBinaryMax(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 150, -4.809814514312042), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), notEqual(0.1, 1.0), passBool(trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), passAxis(passAxis(passAxis(Axis.AXIS_0)))), passBool(lessThanOrEqual(ifThenElseFloat(greaterThan(-0.7111790658374577, 100.0), myFloatIntSub(0.01, 32), myIntToFloat(44)), ifThenElseFloat(equal(100.0, 0.01), myFloatAdd(10.0, 100.0), myIntToFloat(86)))), lessThanOrEqual(myFloatIntSub(passFloat(myFloatIntAdd(2.8612702212384775, 8505)), myIntMult(passInt(6), greaterThan(0.01, -3.047078711404433))), ifThenElseFloat(lessThanOrEqual(myFloatIntMult(0.1, 5), myFloatAdd(0.1, 2.856294308375917)), myFloatIntAdd(myFloatDiv(0.01, 2.233037287149128), myIntSub(32, 64)), myFloatAdd(passFloat(10.0), myFloatIntAdd(0.1, 0)))))
MorphDilateEllipse(EmadeDataNumpyMultiplyInt(Tfisf(ARG0, falseBool, 17, 2, 128), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), lessThan(1.0, -3.261593521590643)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), myAnd(passBool(falseBool), greaterThan(1.0, 0.1)), lessThan(ifThenElseFloat(falseBool, 0.1, 1.0), myIntToFloat(32)), passInt(myIntAdd(7, 3)))
MorphDilateEllipse(EmadeDataNumpyMultiplyInt(Tfisf(ARG0, falseBool, 17, 2, 128), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), lessThan(1.0, -3.261593521590643)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), myAnd(passBool(falseBool), greaterThan(1.0, 0.1)), lessThan(ifThenElseFloat(falseBool, 0.1, 1.0), myIntToFloat(32)), passInt(myIntAdd(7, 3)))
MultiplyTransposed(myPCA(ARG0, TriState.FEATURES_TO_FEATURES, 32, falseBool), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myNot(falseBool))
MultiplyTransposed(myPCA(ARG0, TriState.FEATURES_TO_FEATURES, 32, falseBool), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myNot(falseBool))
Select3D(MatchedFiltering(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 55), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myNot(falseBool), greaterThanEqual(2.354334650705475, 0.1), equal(100.0, 4.616325607406051), greaterThanEqual(100.0, 2.0898273881851273), myIntSub(1, 64), myIntDiv(255, 50))
Select3D(MatchedFiltering(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 55), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myNot(falseBool), greaterThanEqual(2.354334650705475, 0.1), equal(100.0, 4.616325607406051), greaterThanEqual(100.0, 2.0898273881851273), myIntSub(1, 64), myIntDiv(255, 50))
WindowBlackman(SelectRange(MatchedFiltering2D(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 0, 0.1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myIntSub(7, 3), greaterThanEqual(-2.6846992061529296, 0.1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myFloatIntDiv(myIntToFloat(64), ifThenElseBool(trueBool, falseBool, trueBool)))
WindowBlackman(SelectRange(MatchedFiltering2D(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 0, 0.1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myIntSub(7, 3), greaterThanEqual(-2.6846992061529296, 0.1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myFloatIntDiv(myIntToFloat(64), ifThenElseBool(trueBool, falseBool, trueBool)))
Cv2Multiply(EmadeDataDividePair(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_2, Axis.AXIS_0), Cv2ScaleAbs(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, trueBool, 8), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_2))
Cv2Multiply(EmadeDataDividePair(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_2, Axis.AXIS_0), Cv2ScaleAbs(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, trueBool, 8), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_2))
Prerejection(ScalarDivide(Sine(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myIntToFloat(9729)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myOr(lessThan(-3.3131528187125117, 0.1), myOr(trueBool, trueBool)), myFloatToInt(myFloatSub(0.01, 10.0)), myFloatIntAdd(ifThenElseFloat(falseBool, 0.1, 100.0), myIntAdd(1, 6)))
Prerejection(ScalarDivide(Sine(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myIntToFloat(9729)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myOr(lessThan(-3.3131528187125117, 0.1), myOr(trueBool, trueBool)), myFloatToInt(myFloatSub(0.01, 10.0)), myFloatIntAdd(ifThenElseFloat(falseBool, 0.1, 100.0), myIntAdd(1, 6)))
ConvolveChannelMerge(MyCumSum(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 1), notEqual(10.0, 0.1))
ConvolveChannelMerge(MyCumSum(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 1), notEqual(10.0, 0.1))
ContoursMaxArea(Cv2AddWeighted(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_2, 0, 0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), passBool(falseBool))
ContoursMaxArea(Cv2AddWeighted(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_2, 0, 0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), passBool(falseBool))
myICA(ContoursConvexConcave(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, falseBool), passTriState(TriState.STREAM_TO_FEATURES), myOr(trueBool, falseBool), greaterThan(100.0, 0.01))
myICA(ContoursConvexConcave(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, falseBool), passTriState(TriState.STREAM_TO_FEATURES), myOr(trueBool, falseBool), greaterThan(100.0, 0.01))
ThresholdToZeroFloat(CenterOfMass(ARG0, passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), myFloatMult(myIntToFloat(passBool(lessThan(0.1, 100.0))), 100.0))
ThresholdToZeroFloat(CenterOfMass(ARG0, passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), myFloatMult(myIntToFloat(passBool(lessThan(0.1, 100.0))), 100.0))
myConcatenate(Cv2Divide(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.FULL, Axis.AXIS_1), mySubSampleData(ARG0, 150, 9), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0))
myConcatenate(Cv2Divide(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.FULL, Axis.AXIS_1), mySubSampleData(ARG0, 150, 9), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0))
MorphOpenCross(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 150, 100)
MorphOpenCross(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 150, 100)
Prerejection(LocalPoolingMean(MedianFilterHole(Exponetial(myVarThresh(ARG0, TriState.FEATURES_TO_FEATURES, 0.1), TriState.FEATURES_TO_FEATURES, passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), ifThenElseBool(greaterThanEqual(10.0, 10.0), myOr(falseBool, falseBool), myAnd(falseBool, trueBool)), greaterThan(10.0, myFloatSub(0.1, 1.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), greaterThan(myFloatDiv(myFloatIntAdd(0.1, 2), ifThenElseFloat(trueBool, 100.0, -1.144883930871774)), 0.1)), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), Axis.AXIS_1, lessThan(10.0, myFloatSub(myFloatAdd(myFloatIntAdd(-4.476964359869898, falseBool), 100.0), myFloatIntAdd(passFloat(0.01), myAnd(trueBool, falseBool)))), passBool(greaterThan(myFloatDiv(myFloatIntDiv(10.0, 4), myFloatAdd(1.0, 1.380145806634447)), 1.0)), myFloatIntSub(myFloatIntSub(myFloatMult(passFloat(1.0), myFloatAdd(10.0, 1.0)), 100), myNot(myAnd(ifThenElseBool(falseBool, trueBool, falseBool), notEqual(2.710201874034434, -3.3263233958062575)))))
Prerejection(LocalPoolingMean(MedianFilterHole(Exponetial(myVarThresh(ARG0, TriState.FEATURES_TO_FEATURES, 0.1), TriState.FEATURES_TO_FEATURES, passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), ifThenElseBool(greaterThanEqual(10.0, 10.0), myOr(falseBool, falseBool), myAnd(falseBool, trueBool)), greaterThan(10.0, myFloatSub(0.1, 1.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), greaterThan(myFloatDiv(myFloatIntAdd(0.1, 2), ifThenElseFloat(trueBool, 100.0, -1.144883930871774)), 0.1)), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), Axis.AXIS_1, lessThan(10.0, myFloatSub(myFloatAdd(myFloatIntAdd(-4.476964359869898, falseBool), 100.0), myFloatIntAdd(passFloat(0.01), myAnd(trueBool, falseBool)))), passBool(greaterThan(myFloatDiv(myFloatIntDiv(10.0, 4), myFloatAdd(1.0, 1.380145806634447)), 1.0)), myFloatIntSub(myFloatIntSub(myFloatMult(passFloat(1.0), myFloatAdd(10.0, 1.0)), 100), myNot(myAnd(ifThenElseBool(falseBool, trueBool, falseBool), notEqual(2.710201874034434, -3.3263233958062575)))))
LowpassFilterMedian(MyDWT(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 4925), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myIntDiv(6, 7))
LowpassFilterMedian(MyDWT(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 4925), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myIntDiv(6, 7))
Cv2DFTReal(ContourMaskRangeLength(MeanFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 9), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), greaterThan(10.0, -2.2352862744151016), myNot(falseBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)))
Cv2DFTReal(ContourMaskRangeLength(MeanFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 9), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), greaterThan(10.0, -2.2352862744151016), myNot(falseBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)))
Tokenizer(ARG0, 32, 5)
Tokenizer(ARG0, 32, 5)
Select1D(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 50, 4)
Select1D(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 50, 4)
ConvertBW(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2)
ConvertBW(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2)
BitwiseNOT(mySelGenUni(Cv2GreaterThan(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.AXIS_2), TriState.STREAM_TO_FEATURES, myIntAdd(128, 1), myNot(trueBool), myFloatMult(100.0, 10.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)))
BitwiseNOT(mySelGenUni(Cv2GreaterThan(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.AXIS_2), TriState.STREAM_TO_FEATURES, myIntAdd(128, 1), myNot(trueBool), myFloatMult(100.0, 10.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)))
CreateBBox(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_0, 100)
CreateBBox(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_0, 100)
Cv2Sqrt(ImageAlignmentECC(myIfThenElse(RandomUniform(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, -4, 4), Cv2iDCT(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1), LowpassFourierGaussian(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 255), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passInt(100)), ToFloatNorm(ArcCosine(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_2)), myIntSub(lessThanOrEqual(1.0, 10.0), greaterThan(1.0, 0.01)), myFloatIntDiv(passFloat(-1.1951896566834708), myIntMult(0, falseBool)), myAnd(equal(100.0, 0.1), ifThenElseBool(falseBool, falseBool, falseBool)), myOr(greaterThan(1.0, 0.01), notEqual(1.0, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))))
Cv2Sqrt(ImageAlignmentECC(myIfThenElse(RandomUniform(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, -4, 4), Cv2iDCT(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1), LowpassFourierGaussian(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 255), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passInt(100)), ToFloatNorm(ArcCosine(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_2)), myIntSub(lessThanOrEqual(1.0, 10.0), greaterThan(1.0, 0.01)), myFloatIntDiv(passFloat(-1.1951896566834708), myIntMult(0, falseBool)), myAnd(equal(100.0, 0.1), ifThenElseBool(falseBool, falseBool, falseBool)), myOr(greaterThan(1.0, 0.01), notEqual(1.0, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))))
MorphDilateCross(MyDWT(MorphTophatRect(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 64, 1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), lessThan(100.0, 1.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), notEqual(myFloatDiv(100.0, 0.1), ifThenElseFloat(falseBool, 1.778366270603625, 0.01)), notEqual(myFloatSub(0.01, 0.01), ifThenElseFloat(trueBool, 0.1, 100.0)), equal(myFloatIntMult(100.0, 2), myFloatMult(0.01, 0.1)))
MorphDilateCross(MyDWT(MorphTophatRect(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 64, 1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), lessThan(100.0, 1.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), notEqual(myFloatDiv(100.0, 0.1), ifThenElseFloat(falseBool, 1.778366270603625, 0.01)), notEqual(myFloatSub(0.01, 0.01), ifThenElseFloat(trueBool, 0.1, 100.0)), equal(myFloatIntMult(100.0, 2), myFloatMult(0.01, 0.1)))
ECDF(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 100)
ECDF(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 100)
myICA(ArcTangent(NumpyDivide(Cv2DCT(WindowPlanckTaper(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), SetToZeroIf>Data&Factor(LocalPoolingMedian(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, trueBool), WindowHann(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, falseBool), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_1), myFloatIntSub(2.351969454101937, 7)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passInt(myIntMult(myFloatToInt(passFloat(100.0)), myNot(notEqual(100.0, -3.5016043164886845)))), lessThanOrEqual(passFloat(myFloatDiv(myFloatIntDiv(3.7842163720029873, 6), myFloatIntSub(1.0, 55))), myFloatSub(myFloatIntSub(myFloatIntSub(1.0, 0), myOr(falseBool, trueBool)), myFloatIntDiv(passFloat(2.04794626486878), myFloatToInt(10.0)))))
myICA(ArcTangent(NumpyDivide(Cv2DCT(WindowPlanckTaper(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), SetToZeroIf>Data&Factor(LocalPoolingMedian(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, trueBool), WindowHann(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, falseBool), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_1), myFloatIntSub(2.351969454101937, 7)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passInt(myIntMult(myFloatToInt(passFloat(100.0)), myNot(notEqual(100.0, -3.5016043164886845)))), lessThanOrEqual(passFloat(myFloatDiv(myFloatIntDiv(3.7842163720029873, 6), myFloatIntSub(1.0, 55))), myFloatSub(myFloatIntSub(myFloatIntSub(1.0, 0), myOr(falseBool, trueBool)), myFloatIntDiv(passFloat(2.04794626486878), myFloatToInt(10.0)))))
LowpassFilterAverage(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, falseBool)
LowpassFilterAverage(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, falseBool)
HighpassSobelDerivative(HighpassLaplacian(MyNorm(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 100), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), greaterThanEqual(10.0, 100.0), lessThanOrEqual(0.1, 0.1), equal(0.01, 10.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myIntDiv(equal(0.1, 0.1), myIntAdd(64, 1)), lessThanOrEqual(passFloat(0.990695113037452), myFloatSub(-1.937633174387916, 10.0)), passBool(passBool(trueBool)), passBool(myAnd(falseBool, trueBool)), myIntDiv(myNot(trueBool), notEqual(1.0, 1.0955770847710022)))
HighpassSobelDerivative(HighpassLaplacian(MyNorm(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 100), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), greaterThanEqual(10.0, 100.0), lessThanOrEqual(0.1, 0.1), equal(0.01, 10.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myIntDiv(equal(0.1, 0.1), myIntAdd(64, 1)), lessThanOrEqual(passFloat(0.990695113037452), myFloatSub(-1.937633174387916, 10.0)), passBool(passBool(trueBool)), passBool(myAnd(falseBool, trueBool)), myIntDiv(myNot(trueBool), notEqual(1.0, 1.0955770847710022)))
MatchedFiltering(MorphGradientEllipse(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 50, 5), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), 1)
MatchedFiltering(MorphGradientEllipse(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 50, 5), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), 1)
Cv2Divide(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_0)
Cv2Divide(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_0)
Cv2Subtract(MedianFilterHole(PeakFinder(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 0.01, 6479), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myIntSub(8096, 0), lessThanOrEqual(0.1, 0.1)), HashingVectorizer(Cv2GreaterThan(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_1), trueBool, myIntSub(2, 100), lessThan(0.1, 100.0), myIntAdd(3, 10)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), Axis.AXIS_1, passAxis(passAxis(Axis.AXIS_1)))
Cv2Subtract(MedianFilterHole(PeakFinder(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 0.01, 6479), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myIntSub(8096, 0), lessThanOrEqual(0.1, 0.1)), HashingVectorizer(Cv2GreaterThan(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_1), trueBool, myIntSub(2, 100), lessThan(0.1, 100.0), myIntAdd(3, 10)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), Axis.AXIS_1, passAxis(passAxis(Axis.AXIS_1)))
MyProd(myConcatenate(CenterOfMass(ScalarMax(BitwiseNOT(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), passInt(128)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1))), WindowBlackmanHarris(MyAverager(CountVectorizer(ARG0, trueBool, 50, 50, 128), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), myOr(falseBool, falseBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), passAxis(passAxis(passAxis(Axis.AXIS_0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))))
MyProd(myConcatenate(CenterOfMass(ScalarMax(BitwiseNOT(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), passInt(128)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1))), WindowBlackmanHarris(MyAverager(CountVectorizer(ARG0, trueBool, 50, 50, 128), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), myOr(falseBool, falseBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), passAxis(passAxis(passAxis(Axis.AXIS_0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))))
Mutated 124 individuals
Mutating offspring (Swap Layer)
Cv2LessThanOrEqual(mySparsePCA(EmadeDataAddFloat(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 1.0), passTriState(TriState.STREAM_TO_FEATURES), lessThan(myFloatAdd(1.0, 1.0), myFloatSub(2.696341175037105, 0.01)), myFloatAdd(0.01, 1.0)), EqualizeAdaptHist(CornerDetectionHarris(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 255, 1, 100.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), passFloat(0.1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_1)))
Cv2LessThanOrEqual(mySparsePCA(EmadeDataAddFloat(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 1.0), passTriState(TriState.STREAM_TO_FEATURES), lessThan(myFloatAdd(1.0, 1.0), myFloatSub(2.696341175037105, 0.01)), myFloatAdd(0.01, 1.0)), EqualizeAdaptHist(CornerDetectionHarris(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 255, 1, 100.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), passFloat(0.1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_1)))
SetToZeroIf>Data&Factor(ContoursMaxLength(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 8), Cv2Add(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.AXIS_1), TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_0), myFloatIntSub(10.0, 4666))
SetToZeroIf>Data&Factor(ContoursMaxLength(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 8), Cv2Add(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.AXIS_1), TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_0), myFloatIntSub(10.0, 4666))
Select3D(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 59, falseBool, 150, 150, 32, 8)
Select3D(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 59, falseBool, 150, 150, 32, 8)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 9)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 9)
SetToZeroIf>Data&Factor(EmadeDataSubtractInt(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 128), ContoursMaxArea(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 92), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_2), myFloatDiv(1.0, 100.0))
SetToZeroIf>Data&Factor(EmadeDataSubtractInt(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 128), ContoursMaxArea(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 92), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_2), myFloatDiv(1.0, 100.0))
FractionTriple(RandomUniform(ConvertBW(Learner(SetToZeroIf<Data&Factor(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_1, 255), ModifyLearnerFloat(LearnerType('KNN', {'K': 3, 'weights': 0}), 0.01, falseBool), ModifyEnsembleInt(EnsembleType('GRID', None), 255, 2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myNot(lessThan(myFloatSub(100.0, 10.0), ifThenElseFloat(trueBool, 1.0, 0.01))), notEqual(myFloatIntSub(myFloatAdd(100.0, 1.0), myIntSub(9, 6)), myFloatMult(myFloatSub(0.1, 0.1), myFloatIntMult(0.01, 100)))), EmadeDataNumpyMultiplyFloat(MyBinaryThreshold(BitwiseOr(AdjustConstrastLog(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 100.0), GradientWeighted(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 1, 1.0, 100.0), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatSub(myIntToFloat(97), myFloatIntAdd(100.0, 29))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatIntAdd(myIntToFloat(greaterThan(0.01, 100.0)), passInt(myIntMult(11, 150)))), StdDeviationHole(MorphOpenCross(MorphCloseCross(MorphBlackhatRect(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 50, 10), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), greaterThanEqual(0.1, 0.1), myFloatToInt(-1.0399429945978267)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passBool(greaterThanEqual(1.8066201072486088, 100.0)), passBool(equal(10.0, -4.261701765953674))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myAnd(lessThan(myFloatIntDiv(-4.845624744776469, 10), myIntToFloat(3)), myNot(greaterThanEqual(0.1, 0.01))), myIntSub(greaterThanEqual(myFloatIntMult(1.5849853581349578, 8), myFloatMult(0.1, 0.01)), myAnd(passBool(falseBool), notEqual(0.01, 10.0)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), myIntAdd(myOr(lessThan(ifThenElseFloat(trueBool, -4.885915295047991, 100.0), myFloatIntSub(100.0, 10)), myAnd(myOr(falseBool, falseBool), myAnd(falseBool, trueBool))), myIntDiv(myAnd(equal(10.0, 0.9737817647001012), notEqual(10.0, 0.01)), myFloatToInt(myFloatAdd(1.0, 0.13351988622046562)))))
FractionTriple(RandomUniform(ConvertBW(Learner(SetToZeroIf<Data&Factor(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_1, 255), ModifyLearnerFloat(LearnerType('KNN', {'K': 3, 'weights': 0}), 0.01, falseBool), ModifyEnsembleInt(EnsembleType('GRID', None), 255, 2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myNot(lessThan(myFloatSub(100.0, 10.0), ifThenElseFloat(trueBool, 1.0, 0.01))), notEqual(myFloatIntSub(myFloatAdd(100.0, 1.0), myIntSub(9, 6)), myFloatMult(myFloatSub(0.1, 0.1), myFloatIntMult(0.01, 100)))), EmadeDataNumpyMultiplyFloat(MyBinaryThreshold(BitwiseOr(AdjustConstrastLog(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 100.0), GradientWeighted(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 1, 1.0, 100.0), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatSub(myIntToFloat(97), myFloatIntAdd(100.0, 29))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatIntAdd(myIntToFloat(greaterThan(0.01, 100.0)), passInt(myIntMult(11, 150)))), StdDeviationHole(MorphOpenCross(MorphCloseCross(MorphBlackhatRect(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 50, 10), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), greaterThanEqual(0.1, 0.1), myFloatToInt(-1.0399429945978267)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passBool(greaterThanEqual(1.8066201072486088, 100.0)), passBool(equal(10.0, -4.261701765953674))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myAnd(lessThan(myFloatIntDiv(-4.845624744776469, 10), myIntToFloat(3)), myNot(greaterThanEqual(0.1, 0.01))), myIntSub(greaterThanEqual(myFloatIntMult(1.5849853581349578, 8), myFloatMult(0.1, 0.01)), myAnd(passBool(falseBool), notEqual(0.01, 10.0)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), myIntAdd(myOr(lessThan(ifThenElseFloat(trueBool, -4.885915295047991, 100.0), myFloatIntSub(100.0, 10)), myAnd(myOr(falseBool, falseBool), myAnd(falseBool, trueBool))), myIntDiv(myAnd(equal(10.0, 0.9737817647001012), notEqual(10.0, 0.01)), myFloatToInt(myFloatAdd(1.0, 0.13351988622046562)))))
CornerDetectionHarris(mySelFdr(EmadeDataNumpyMultiplyFloat(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 10.0), passTriState(TriState.FEATURES_TO_FEATURES), passInt(64), myIntToFloat(32)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), Axis.AXIS_1, lessThan(myFloatMult(10.0, 1.0), ifThenElseFloat(falseBool, 0.01, 100.0)), myIntSub(lessThanOrEqual(0.1, 1.1004319767893689), myOr(falseBool, falseBool)), myFloatIntAdd(ifThenElseFloat(falseBool, 0.1, 0.01), passBool(falseBool)))
CornerDetectionHarris(mySelFdr(EmadeDataNumpyMultiplyFloat(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 10.0), passTriState(TriState.FEATURES_TO_FEATURES), passInt(64), myIntToFloat(32)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), Axis.AXIS_1, lessThan(myFloatMult(10.0, 1.0), ifThenElseFloat(falseBool, 0.01, 100.0)), myIntSub(lessThanOrEqual(0.1, 1.1004319767893689), myOr(falseBool, falseBool)), myFloatIntAdd(ifThenElseFloat(falseBool, 0.1, 0.01), passBool(falseBool)))
myICA(ContourMaskMinArea(ARG0, passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatIntMult(myFloatIntMult(0.01, 5), myIntMult(5, 1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), lessThan(myFloatIntSub(myFloatMult(0.1, 0.1), greaterThanEqual(-1.62545880996786, 0.01)), myFloatIntMult(myFloatIntAdd(100.0, 50), notEqual(0.01, 0.01))), lessThan(myFloatDiv(ifThenElseFloat(falseBool, 0.01, 0.1), myFloatIntDiv(10.0, 6)), myFloatMult(myFloatSub(10.0, 0.01), myFloatSub(0.01, 0.1))))
myICA(ContourMaskMinArea(ARG0, passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatIntMult(myFloatIntMult(0.01, 5), myIntMult(5, 1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), lessThan(myFloatIntSub(myFloatMult(0.1, 0.1), greaterThanEqual(-1.62545880996786, 0.01)), myFloatIntMult(myFloatIntAdd(100.0, 50), notEqual(0.01, 0.01))), lessThan(myFloatDiv(ifThenElseFloat(falseBool, 0.01, 0.1), myFloatIntDiv(10.0, 6)), myFloatMult(myFloatSub(10.0, 0.01), myFloatSub(0.01, 0.1))))
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(93, ARG0, randomUniformWeights, InputLayer(GradientMagnitude(Tokenizer(ARG0, 7, 518), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), lessThanOrEqual(0.1, 1.6548537041261326))))), 100)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(93, ARG0, randomUniformWeights, InputLayer(GradientMagnitude(Tokenizer(ARG0, 7, 518), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), lessThanOrEqual(0.1, 1.6548537041261326))))), 100)
ThresholdBinaryInverseMask(ifThenElseDataPair(equal(10.0, 10.0), EmadeDataNumpyMultiplyPair(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.FULL, Axis.AXIS_2), LowpassFilterUniform(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, trueBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), ifThenElseFloat(ifThenElseBool(falseBool, trueBool, trueBool), myFloatMult(0.1, 0.01), myFloatIntMult(-3.2750096983702024, 65)))
ThresholdBinaryInverseMask(ifThenElseDataPair(equal(10.0, 10.0), EmadeDataNumpyMultiplyPair(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.FULL, Axis.AXIS_2), LowpassFilterUniform(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, trueBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), ifThenElseFloat(ifThenElseBool(falseBool, trueBool, trueBool), myFloatMult(0.1, 0.01), myFloatIntMult(-3.2750096983702024, 65)))
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, heWeights, InputLayer(ARG0))), 4)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, heWeights, InputLayer(ARG0))), 4)
ThresholdBinaryInverse(ThresholdBinaryInverse(MinimumToZero(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myFloatIntMult(1.0, 4)), passTriState(TriState.STREAM_TO_STREAM), Axis.AXIS_2, myFloatIntDiv(1.0, passInt(10)))
ThresholdBinaryInverse(ThresholdBinaryInverse(MinimumToZero(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myFloatIntMult(1.0, 4)), passTriState(TriState.STREAM_TO_STREAM), Axis.AXIS_2, myFloatIntDiv(1.0, passInt(10)))
ContourMaskMaxSolidity(WindowTurkey(MatchedFiltering(SavitzkyGolayFilter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 87, 5, 2), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myAnd(falseBool, trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myFloatMult(myFloatAdd(-0.35649298395985163, 1.0), myIntToFloat(4))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myFloatMult(myFloatIntMult(ifThenElseFloat(falseBool, -3.2065381108254987, 1.0), myOr(falseBool, trueBool)), passFloat(myFloatIntMult(0.01, 128))))
ContourMaskMaxSolidity(WindowTurkey(MatchedFiltering(SavitzkyGolayFilter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 87, 5, 2), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myAnd(falseBool, trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myFloatMult(myFloatAdd(-0.35649298395985163, 1.0), myIntToFloat(4))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myFloatMult(myFloatIntMult(ifThenElseFloat(falseBool, -3.2065381108254987, 1.0), myOr(falseBool, trueBool)), passFloat(myFloatIntMult(0.01, 128))))
birch_clustering(WindowBlackman(ArcTangent(EmadeDataMultiplyInt(MyDWT(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 61), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), greaterThan(0.01, 0.1)), TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myFloatAdd(ifThenElseFloat(greaterThanEqual(10.0, 100.0), myFloatMult(0.1, 1.0), myFloatSub(0.1, 0.1)), myFloatSub(myFloatDiv(0.1, 0.1), myIntToFloat(6)))), myFloatDiv(myIntToFloat(greaterThanEqual(myFloatDiv(0.1, 1.0), passFloat(0.01))), myFloatIntSub(myFloatIntMult(myIntToFloat(6), lessThanOrEqual(-0.051486290484572095, -1.769474421690055)), myFloatToInt(myIntToFloat(55)))), myOr(trueBool, myOr(greaterThan(myFloatIntMult(1.0, 6), myFloatIntSub(0.01, 1)), lessThan(myFloatSub(0.1, 0.01), myFloatIntMult(0.1, 8)))), passInt(passInt(greaterThanEqual(100.0, myFloatSub(1.0, 0.01)))))
birch_clustering(WindowBlackman(ArcTangent(EmadeDataMultiplyInt(MyDWT(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 61), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), greaterThan(0.01, 0.1)), TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myFloatAdd(ifThenElseFloat(greaterThanEqual(10.0, 100.0), myFloatMult(0.1, 1.0), myFloatSub(0.1, 0.1)), myFloatSub(myFloatDiv(0.1, 0.1), myIntToFloat(6)))), myFloatDiv(myIntToFloat(greaterThanEqual(myFloatDiv(0.1, 1.0), passFloat(0.01))), myFloatIntSub(myFloatIntMult(myIntToFloat(6), lessThanOrEqual(-0.051486290484572095, -1.769474421690055)), myFloatToInt(myIntToFloat(55)))), myOr(trueBool, myOr(greaterThan(myFloatIntMult(1.0, 6), myFloatIntSub(0.01, 1)), lessThan(myFloatSub(0.1, 0.01), myFloatIntMult(0.1, 8)))), passInt(passInt(greaterThanEqual(100.0, myFloatSub(1.0, 0.01)))))
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(150, ARG0, randomUniformWeights, InputLayer(ConvolveChannelMerge(ARG0, 50)))), 100)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(150, ARG0, randomUniformWeights, InputLayer(ConvolveChannelMerge(ARG0, 50)))), 100)
mySelKBest(MorphGradientEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 4, 6), passTriState(TriState.FEATURES_TO_FEATURES), greaterThan(0.1, 100.0), lessThanOrEqual(100.0, 100.0))
mySelKBest(MorphGradientEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 4, 6), passTriState(TriState.FEATURES_TO_FEATURES), greaterThan(0.1, 100.0), lessThanOrEqual(100.0, 100.0))
Daisy(Cv2AbsDiff(Round(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), Prerejection(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 150, 3, 0.01), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThan(myFloatIntDiv(0.1, 95), myFloatIntMult(100.0, 1)), lessThanOrEqual(myFloatIntMult(-4.863904585918977, 13), myFloatIntSub(0.1, 4)), myNot(myNot(falseBool)), myOr(ifThenElseBool(trueBool, falseBool, falseBool), greaterThan(0.1, 1.0)), 55)
Daisy(Cv2AbsDiff(Round(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), Prerejection(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 150, 3, 0.01), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThan(myFloatIntDiv(0.1, 95), myFloatIntMult(100.0, 1)), lessThanOrEqual(myFloatIntMult(-4.863904585918977, 13), myFloatIntSub(0.1, 4)), myNot(myNot(falseBool)), myOr(ifThenElseBool(trueBool, falseBool, falseBool), greaterThan(0.1, 1.0)), 55)
ContourMaskRangeEquDiameter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 7, myIntSub(myFloatToInt(0.01), myFloatToInt(10.0)))
ContourMaskRangeEquDiameter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 7, myIntSub(myFloatToInt(0.01), myFloatToInt(10.0)))
Correlation(Exponetial(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), MedianFilterHole(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 6, 255), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.FULL))
Correlation(Exponetial(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), MedianFilterHole(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 6, 255), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.FULL))
Log(Cv2Sqrt(LocalPoolingMedian(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, myFloatToInt(3.090550872981341)), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)))
Log(Cv2Sqrt(LocalPoolingMedian(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, myFloatToInt(3.090550872981341)), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)))
NNLearner(ARG0, OutputLayer(SkiMedianFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 4), EmbeddingLayer(falseBool, ARG0, glorotUniformWeights, EmbeddingLayer(9, ContourMaskMaxExtentEnclosingCircle(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 100.0), randomUniformWeights, InputLayer(ARG0)))), 6)
NNLearner(ARG0, OutputLayer(SkiMedianFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 4), EmbeddingLayer(falseBool, ARG0, glorotUniformWeights, EmbeddingLayer(9, ContourMaskMaxExtentEnclosingCircle(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 100.0), randomUniformWeights, InputLayer(ARG0)))), 6)
ConvertToCounts(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL)
ConvertToCounts(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL)
SpectralClustering(StandardNorm(ARG0, TriState.STREAM_TO_STREAM, passAxis(passAxis(passAxis(Axis.AXIS_0)))), lessThan(myFloatIntAdd(myFloatIntDiv(myFloatSub(0.1, 0.1), passInt(10)), notEqual(-2.4033966752898586, 0.01)), myFloatSub(0.01, myIntToFloat(lessThanOrEqual(10.0, 100.0)))), 0.1)
SpectralClustering(StandardNorm(ARG0, TriState.STREAM_TO_STREAM, passAxis(passAxis(passAxis(Axis.AXIS_0)))), lessThan(myFloatIntAdd(myFloatIntDiv(myFloatSub(0.1, 0.1), passInt(10)), notEqual(-2.4033966752898586, 0.01)), myFloatSub(0.01, myIntToFloat(lessThanOrEqual(10.0, 100.0)))), 0.1)
ConvolveChannelMerge(ARG0, 94)
ConvolveChannelMerge(ARG0, 94)
HighpassFourierGaussian(CCorrObjectFilter(ARG0, mySelFdr(ARG0, passTriState(TriState.STREAM_TO_STREAM), myAnd(lessThanOrEqual(-0.7762674365595599, 0.1), greaterThanEqual(-0.7837111049192211, 4.164487072958346)), myFloatIntMult(myFloatSub(1.0, -3.0158739521276168), equal(4.4312049661198465, 100.0))), equal(myFloatIntSub(100.0, 7), myFloatIntMult(myFloatIntSub(10.0, 10), ifThenElseBool(falseBool, falseBool, falseBool))), myFloatIntSub(ifThenElseFloat(trueBool, ifThenElseFloat(trueBool, 0.1, 0.01), myFloatIntSub(100.0, -1)), myIntMult(6, myIntMult(32, 85)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), myAnd(lessThan(ifThenElseFloat(equal(100.0, 100.0), myFloatMult(10.0, 0.01), myFloatIntAdd(100.0, 0)), ifThenElseFloat(lessThanOrEqual(100.0, 0.01), myFloatDiv(0.1, 10.0), myFloatIntMult(1.0, 255))), falseBool))
HighpassFourierGaussian(CCorrObjectFilter(ARG0, mySelFdr(ARG0, passTriState(TriState.STREAM_TO_STREAM), myAnd(lessThanOrEqual(-0.7762674365595599, 0.1), greaterThanEqual(-0.7837111049192211, 4.164487072958346)), myFloatIntMult(myFloatSub(1.0, -3.0158739521276168), equal(4.4312049661198465, 100.0))), equal(myFloatIntSub(100.0, 7), myFloatIntMult(myFloatIntSub(10.0, 10), ifThenElseBool(falseBool, falseBool, falseBool))), myFloatIntSub(ifThenElseFloat(trueBool, ifThenElseFloat(trueBool, 0.1, 0.01), myFloatIntSub(100.0, -1)), myIntMult(6, myIntMult(32, 85)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), myAnd(lessThan(ifThenElseFloat(equal(100.0, 100.0), myFloatMult(10.0, 0.01), myFloatIntAdd(100.0, 0)), ifThenElseFloat(lessThanOrEqual(100.0, 0.01), myFloatDiv(0.1, 10.0), myFloatIntMult(1.0, 255))), falseBool))
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 95)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 95)
ContourMaskRangeAspectRatio(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 128, 0)
ContourMaskRangeAspectRatio(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 128, 0)
EmadeDataDivideInt(LinearPredictiveCoding(LocalPoolingMax(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 3001), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myIntMult(33, 10)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), myIntSub(greaterThanEqual(10.0, 2.8006264467555315), notEqual(-4.44963090831692, 1.0)))
EmadeDataDivideInt(LinearPredictiveCoding(LocalPoolingMax(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 3001), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myIntMult(33, 10)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), myIntSub(greaterThanEqual(10.0, 2.8006264467555315), notEqual(-4.44963090831692, 1.0)))
EmadeDataNumpyMultiplyInt(LabelObjects(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), TriState.STREAM_TO_STREAM, passAxis(Axis.AXIS_1), passBool(falseBool))
EmadeDataNumpyMultiplyInt(LabelObjects(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), TriState.STREAM_TO_STREAM, passAxis(Axis.AXIS_1), passBool(falseBool))
MinimumFilter(Daisy(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 255, 50, 6, falseBool, 64), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myIntMult(8, 50), myFloatIntSub(0.1, 8017))
MinimumFilter(Daisy(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 255, 50, 6, falseBool, 64), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myIntMult(8, 50), myFloatIntSub(0.1, 8017))
WindowBlackman(ThresholdToZeroFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 1.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatSub(1.0, 0.1))
WindowBlackman(ThresholdToZeroFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 1.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatSub(1.0, 0.1))
Cosine(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0)
Cosine(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0)
MorphTophatEllipse(MorphBlackhatEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 4, trueBool), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), lessThan(1.582532651394862, 0.1), greaterThanEqual(3.4383382473505044, 0.1))
MorphTophatEllipse(MorphBlackhatEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 4, trueBool), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), lessThan(1.582532651394862, 0.1), greaterThanEqual(3.4383382473505044, 0.1))
MySnapshot(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_1, 9)
MySnapshot(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_1, 9)
CCorrObjectFilter(MeanShiftClustering(HighpassIrst(ImageAlignmentECC(Tangent(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2), WindowTriangular(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_0), lessThanOrEqual(0.1, 0.1), myIntToFloat(128), myNot(falseBool), myOr(falseBool, falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)))), Learner(NormalLikelihood(ContourMaskMinLength(MyAverager(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 50), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myFloatIntSub(1.0, -9)), myIntSub(myIntSub(4, 32), passInt(7))), ModifyLearnerBool(ModifyLearnerFloat(ModifyLearnerFloat(LearnerType('BAYES', None), -4.482579599103281, 255), myFloatSub(10.0, 100.0), greaterThanEqual(0.1, 10.0)), myOr(myAnd(falseBool, falseBool), greaterThan(0.01, 0.1)), myFloatToInt(myFloatAdd(10.0, 1.0))), ModifyEnsembleFloat(ModifyEnsembleFloat(ModifyEnsembleInt(EnsembleType('SINGLE', None), 5, 150), myFloatMult(10.0, 4.073986019818111), lessThan(-3.657550698586066, 0.01)), myIntToFloat(greaterThanEqual(1.161631341843786, 4.539648415850349)), greaterThan(passFloat(100.0), myFloatSub(0.01, 100.0)))), myOr(myAnd(lessThanOrEqual(myFloatIntAdd(-3.213301091689804, 64), myFloatMult(2.6490802903519146, 1.0)), myOr(myNot(falseBool), lessThan(0.01, 10.0))), greaterThan(myFloatSub(myFloatSub(0.01, 100.0), passFloat(1.0)), passFloat(passFloat(1.0)))), myFloatSub(myFloatIntSub(ifThenElseFloat(passBool(trueBool), myFloatIntMult(1.0, 100), ifThenElseFloat(trueBool, 100.0, 100.0)), myIntAdd(equal(100.0, 0.6676828528247718), myNot(trueBool))), myFloatSub(myFloatIntMult(myFloatIntMult(0.37430275486475395, 64), myIntMult(trueBool, 55)), passFloat(myFloatIntSub(1.0, 9)))))
CCorrObjectFilter(MeanShiftClustering(HighpassIrst(ImageAlignmentECC(Tangent(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2), WindowTriangular(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_0), lessThanOrEqual(0.1, 0.1), myIntToFloat(128), myNot(falseBool), myOr(falseBool, falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)))), Learner(NormalLikelihood(ContourMaskMinLength(MyAverager(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 50), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myFloatIntSub(1.0, -9)), myIntSub(myIntSub(4, 32), passInt(7))), ModifyLearnerBool(ModifyLearnerFloat(ModifyLearnerFloat(LearnerType('BAYES', None), -4.482579599103281, 255), myFloatSub(10.0, 100.0), greaterThanEqual(0.1, 10.0)), myOr(myAnd(falseBool, falseBool), greaterThan(0.01, 0.1)), myFloatToInt(myFloatAdd(10.0, 1.0))), ModifyEnsembleFloat(ModifyEnsembleFloat(ModifyEnsembleInt(EnsembleType('SINGLE', None), 5, 150), myFloatMult(10.0, 4.073986019818111), lessThan(-3.657550698586066, 0.01)), myIntToFloat(greaterThanEqual(1.161631341843786, 4.539648415850349)), greaterThan(passFloat(100.0), myFloatSub(0.01, 100.0)))), myOr(myAnd(lessThanOrEqual(myFloatIntAdd(-3.213301091689804, 64), myFloatMult(2.6490802903519146, 1.0)), myOr(myNot(falseBool), lessThan(0.01, 10.0))), greaterThan(myFloatSub(myFloatSub(0.01, 100.0), passFloat(1.0)), passFloat(passFloat(1.0)))), myFloatSub(myFloatIntSub(ifThenElseFloat(passBool(trueBool), myFloatIntMult(1.0, 100), ifThenElseFloat(trueBool, 100.0, 100.0)), myIntAdd(equal(100.0, 0.6676828528247718), myNot(trueBool))), myFloatSub(myFloatIntMult(myFloatIntMult(0.37430275486475395, 64), myIntMult(trueBool, 55)), passFloat(myFloatIntSub(1.0, 9)))))
EmadeDataDivideFloat(SkiMedianFilter(EdgeDetectionCanny(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 9, 5, 55), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myIntSub(10, 7)), passTriState(TriState.STREAM_TO_FEATURES), passAxis(passAxis(Axis.AXIS_1)), myFloatIntMult(myIntToFloat(32), myIntAdd(255, 255)))
EmadeDataDivideFloat(SkiMedianFilter(EdgeDetectionCanny(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 9, 5, 55), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myIntSub(10, 7)), passTriState(TriState.STREAM_TO_FEATURES), passAxis(passAxis(Axis.AXIS_1)), myFloatIntMult(myIntToFloat(32), myIntAdd(255, 255)))
AdjustConstrastLog(SetToZeroIf>Data&Factor(ContourMaskRangeExtentEnclosingCircle(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 8, falseBool), FractionTriple(ARG0, ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_0, Axis.AXIS_0, trueBool), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_1), myFloatAdd(1.0450966939200557, 0.1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passFloat(myFloatDiv(1.0, 0.1)))
AdjustConstrastLog(SetToZeroIf>Data&Factor(ContourMaskRangeExtentEnclosingCircle(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 8, falseBool), FractionTriple(ARG0, ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_0, Axis.AXIS_0, trueBool), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_1), myFloatAdd(1.0450966939200557, 0.1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passFloat(myFloatDiv(1.0, 0.1)))
ContourMaskMinLength(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 3.8678377272836997)
ContourMaskMinLength(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 3.8678377272836997)
Cv2NotEqual(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.FULL)
Cv2NotEqual(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.FULL)
ContourMaskMaxSolidity(AbsDiff(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), ifThenElseFloat(falseBool, 100.0, 100.0))
ContourMaskMaxSolidity(AbsDiff(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), ifThenElseFloat(falseBool, 100.0, 100.0))
EmadeDataMultiplyInt(ContourMaskRangeLength(AbsoluteValue(LowpassFilterMedian(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 150), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), greaterThanEqual(myFloatIntSub(10.0, 2), myFloatMult(-3.627473698791701, -2.1000160235203467)), myOr(myNot(trueBool), equal(0.1, 0.1))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myIntMult(equal(myFloatIntMult(1.0, 2), myFloatIntSub(10.0, 7)), equal(myFloatIntMult(10.0, 55), myIntToFloat(8))))
EmadeDataMultiplyInt(ContourMaskRangeLength(AbsoluteValue(LowpassFilterMedian(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 150), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), greaterThanEqual(myFloatIntSub(10.0, 2), myFloatMult(-3.627473698791701, -2.1000160235203467)), myOr(myNot(trueBool), equal(0.1, 0.1))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myIntMult(equal(myFloatIntMult(1.0, 2), myFloatIntSub(10.0, 7)), equal(myFloatIntMult(10.0, 55), myIntToFloat(8))))
SpectralFilter(ContourMaskRangeEquDiameter(MorphOpenCross(BayesMulti(RandomUniform(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 8, 6)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), greaterThan(myFloatAdd(1.0681860033116575, 1.0), passFloat(0.1)), lessThan(myFloatIntSub(0.1, 0), myFloatIntAdd(100.0, 2))), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(passAxis(passAxis(Axis.AXIS_0))), 10, equal(myFloatSub(myFloatDiv(0.1, 0.1), myFloatIntDiv(0.01, 6)), myFloatIntAdd(10.0, passInt(10)))), MaximumWindow(ARG0, myIntAdd(notEqual(myFloatIntMult(1.0, 128), myFloatDiv(0.1, 1.0)), myIntMult(myAnd(falseBool, falseBool), myFloatToInt(0.01))), ifThenElseBool(notEqual(myFloatSub(0.01, 1.0), myFloatSub(10.0, 0.01)), lessThan(myFloatIntAdd(0.1, 150), myFloatIntSub(10.0, 55)), equal(ifThenElseFloat(trueBool, -2.897542497291231, 0.1), myFloatSub(100.0, 10.0))), passFloat(myIntToFloat(greaterThan(1.0, 1.0)))), GaussianFilter(RandomNormal(AdjustConstrastLog(ARG0, passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myFloatDiv(100.0, 4.682150619736657)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), 9, myIntSub(notEqual(1.0, 0.10412231354917001), passInt(7))), TriState.FEATURES_TO_FEATURES, passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatIntDiv(4.115153324802437, passInt(myIntAdd(falseBool, 1)))), MyBinaryThreshold(AbsDiff(CopyStreamToTarget(ContourMaskMaxExtent(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 6715)), SkiMedianFilter(HashingVectorizer(ARG0, trueBool, trueBool, 2, 1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), myIntAdd(7, 5382)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatIntSub(myIntToFloat(myAnd(trueBool, falseBool)), greaterThanEqual(ifThenElseFloat(trueBool, 1.0, 1.0), myFloatIntMult(-1.7635954076824212, 1079)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), Axis.AXIS_1, passAxis(passAxis(passAxis(Axis.AXIS_0))), Axis.AXIS_1, passAxis(passAxis(Axis.AXIS_1)))
SpectralFilter(ContourMaskRangeEquDiameter(MorphOpenCross(BayesMulti(RandomUniform(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 8, 6)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), greaterThan(myFloatAdd(1.0681860033116575, 1.0), passFloat(0.1)), lessThan(myFloatIntSub(0.1, 0), myFloatIntAdd(100.0, 2))), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(passAxis(passAxis(Axis.AXIS_0))), 10, equal(myFloatSub(myFloatDiv(0.1, 0.1), myFloatIntDiv(0.01, 6)), myFloatIntAdd(10.0, passInt(10)))), MaximumWindow(ARG0, myIntAdd(notEqual(myFloatIntMult(1.0, 128), myFloatDiv(0.1, 1.0)), myIntMult(myAnd(falseBool, falseBool), myFloatToInt(0.01))), ifThenElseBool(notEqual(myFloatSub(0.01, 1.0), myFloatSub(10.0, 0.01)), lessThan(myFloatIntAdd(0.1, 150), myFloatIntSub(10.0, 55)), equal(ifThenElseFloat(trueBool, -2.897542497291231, 0.1), myFloatSub(100.0, 10.0))), passFloat(myIntToFloat(greaterThan(1.0, 1.0)))), GaussianFilter(RandomNormal(AdjustConstrastLog(ARG0, passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myFloatDiv(100.0, 4.682150619736657)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), 9, myIntSub(notEqual(1.0, 0.10412231354917001), passInt(7))), TriState.FEATURES_TO_FEATURES, passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatIntDiv(4.115153324802437, passInt(myIntAdd(falseBool, 1)))), MyBinaryThreshold(AbsDiff(CopyStreamToTarget(ContourMaskMaxExtent(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 6715)), SkiMedianFilter(HashingVectorizer(ARG0, trueBool, trueBool, 2, 1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), myIntAdd(7, 5382)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatIntSub(myIntToFloat(myAnd(trueBool, falseBool)), greaterThanEqual(ifThenElseFloat(trueBool, 1.0, 1.0), myFloatIntMult(-1.7635954076824212, 1079)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), Axis.AXIS_1, passAxis(passAxis(passAxis(Axis.AXIS_0))), Axis.AXIS_1, passAxis(passAxis(Axis.AXIS_1)))
MorphCloseCross(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 1, 64)
MorphCloseCross(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 1, 64)
mySelKBest(WindowNuttal(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), myIntSub(6, 0), myIntDiv(255, 50))
mySelKBest(WindowNuttal(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), myIntSub(6, 0), myIntDiv(255, 50))
adf_1(ARG0)
adf_1(ARG0)
OtsuBinaryThreshold(Cv2iDCT(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), notEqual(0.1, 0.01))
OtsuBinaryThreshold(Cv2iDCT(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), notEqual(0.1, 0.01))
LocalPoolingMean(ContourMaskRangeExtent(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 10, 7), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), greaterThan(2.4325666852482506, 1.0))
LocalPoolingMean(ContourMaskRangeExtent(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 10, 7), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), greaterThan(2.4325666852482506, 1.0))
OtsuBinaryThreshold(MyNorm(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 5), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myOr(falseBool, trueBool))
OtsuBinaryThreshold(MyNorm(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 5), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myOr(falseBool, trueBool))
mySelKBest(MorphErosionRect(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 0, 9, 150), passTriState(TriState.STREAM_TO_STREAM), myIntMult(3, 5), notEqual(10.0, 0.01))
mySelKBest(MorphErosionRect(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 0, 9, 150), passTriState(TriState.STREAM_TO_STREAM), myIntMult(3, 5), notEqual(10.0, 0.01))
WindowBackmanNuttall(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1)
WindowBackmanNuttall(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1)
WienerFilter(EmadeDataSubtractPair(InRange(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 100, 9), Cv2NotEqual(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)))
WienerFilter(EmadeDataSubtractPair(InRange(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 100, 9), Cv2NotEqual(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)))
ImageAlignmentECC(Sentiment(ContourMaskMinAspectRatio(agglomerative_clustering(ARG0, 46), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myFloatIntAdd(-3.287870676610547, 0)), passBool(passBool(trueBool))), Log(BitwiseOr(ARG0, HighpassIrst(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2))), passAxis(Axis.FULL), equal(myFloatMult(passFloat(0.01), ifThenElseFloat(falseBool, 1.0, 1.0)), myFloatIntDiv(-2.5975951472094327, equal(0.1, 1.0))), myFloatIntAdd(myFloatIntMult(myFloatAdd(10.0, -1.7830310615497993), myOr(falseBool, falseBool)), notEqual(myIntToFloat(150), 10.0)), myIntAdd(myIntMult(myNot(trueBool), myIntMult(55, 32)), myOr(ifThenElseBool(trueBool, falseBool, falseBool), equal(1.0, 1.0))), 32)
ImageAlignmentECC(Sentiment(ContourMaskMinAspectRatio(agglomerative_clustering(ARG0, 46), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myFloatIntAdd(-3.287870676610547, 0)), passBool(passBool(trueBool))), Log(BitwiseOr(ARG0, HighpassIrst(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2))), passAxis(Axis.FULL), equal(myFloatMult(passFloat(0.01), ifThenElseFloat(falseBool, 1.0, 1.0)), myFloatIntDiv(-2.5975951472094327, equal(0.1, 1.0))), myFloatIntAdd(myFloatIntMult(myFloatAdd(10.0, -1.7830310615497993), myOr(falseBool, falseBool)), notEqual(myIntToFloat(150), 10.0)), myIntAdd(myIntMult(myNot(trueBool), myIntMult(55, 32)), myOr(ifThenElseBool(trueBool, falseBool, falseBool), equal(1.0, 1.0))), 32)
myPCA(GradientMagnitude(NormalLikelihood(ARG0, 55), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), notEqual(1.0, 1.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), myIntMult(myIntDiv(falseBool, falseBool), myAnd(trueBool, falseBool)), myAnd(equal(0.1, 1.0), myAnd(falseBool, falseBool)))
myPCA(GradientMagnitude(NormalLikelihood(ARG0, 55), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), notEqual(1.0, 1.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), myIntMult(myIntDiv(falseBool, falseBool), myAnd(trueBool, falseBool)), myAnd(equal(0.1, 1.0), myAnd(falseBool, falseBool)))
EmadeDataIntegerDividePair(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_2)
EmadeDataIntegerDividePair(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_2)
ThresholdBinaryFloat(MorphErosionCross(ContourMaskRangeEquDiameter(MorphOpenRect(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 0, 50), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), greaterThan(10.0, 10.0), myIntAdd(falseBool, 8)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatToInt(myFloatSub(-0.6974171637667306, 0.1)), myOr(greaterThanEqual(1.0, 100.0), equal(0.01, 0.01)), lessThanOrEqual(myFloatIntSub(0.01, 1), myIntToFloat(32))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myIntToFloat(myNot(greaterThanEqual(1.0, -1.9165816231832067))), myFloatDiv(myFloatIntSub(myFloatAdd(0.1, 1.0), notEqual(1.3409624802597628, 1.0)), myFloatIntDiv(ifThenElseFloat(falseBool, 0.1, -0.5347919246925557), myIntAdd(-2, 64))))
ThresholdBinaryFloat(MorphErosionCross(ContourMaskRangeEquDiameter(MorphOpenRect(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 0, 50), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), greaterThan(10.0, 10.0), myIntAdd(falseBool, 8)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatToInt(myFloatSub(-0.6974171637667306, 0.1)), myOr(greaterThanEqual(1.0, 100.0), equal(0.01, 0.01)), lessThanOrEqual(myFloatIntSub(0.01, 1), myIntToFloat(32))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myIntToFloat(myNot(greaterThanEqual(1.0, -1.9165816231832067))), myFloatDiv(myFloatIntSub(myFloatAdd(0.1, 1.0), notEqual(1.3409624802597628, 1.0)), myFloatIntDiv(ifThenElseFloat(falseBool, 0.1, -0.5347919246925557), myIntAdd(-2, 64))))
Cv2AbsDiff(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_2)
Cv2AbsDiff(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_2)
ContoursMinArea(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 50)
ContoursMinArea(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 50)
GetCentroids(AdjustConstrastGamma(MorphGradientRect(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 2, 50), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passFloat(10.0), myFloatMult(1.0, 1.880807422481599)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)))
GetCentroids(AdjustConstrastGamma(MorphGradientRect(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 2, 50), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passFloat(10.0), myFloatMult(1.0, 1.880807422481599)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)))
KalmanFilter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 100.0, 100.0)
KalmanFilter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 100.0, 100.0)
BackgroundSubtraction(ARG0, passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)))
BackgroundSubtraction(ARG0, passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)))
MinimumToZero(Tangent(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0))
MinimumToZero(Tangent(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0))
mySelPercentile(EmadeDataSubtractInt(ContoursConvexConcave(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, trueBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myNot(falseBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), lessThan(myFloatIntAdd(100.0, falseBool), myFloatIntDiv(100.0, 10)), lessThanOrEqual(ifThenElseFloat(trueBool, 0.01, 0.1), myFloatAdd(10.0, 0.1)))
mySelPercentile(EmadeDataSubtractInt(ContoursConvexConcave(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, trueBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myNot(falseBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), lessThan(myFloatIntAdd(100.0, falseBool), myFloatIntDiv(100.0, 10)), lessThanOrEqual(ifThenElseFloat(trueBool, 0.01, 0.1), myFloatAdd(10.0, 0.1)))
ThresholdBinaryMax(ArcCosine(Cv2TemplateMatching(agglomerative_clustering(ARG0, 7), myIntSub(4, 3), myIntAdd(8858, 5)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myIntSub(myIntAdd(myIntSub(128, 2), myNot(falseBool)), myIntDiv(greaterThan(10.0, -4.045780669046045), myIntAdd(255, 150))), ifThenElseFloat(greaterThanEqual(myFloatIntSub(4.802932533687832, 1), myFloatIntDiv(4.0910097337404405, -2)), myFloatIntMult(myFloatIntAdd(3.6743176286559667, 128), ifThenElseBool(falseBool, falseBool, trueBool)), myFloatIntSub(myFloatDiv(0.01, 100.0), ifThenElseBool(trueBool, trueBool, falseBool))))
ThresholdBinaryMax(ArcCosine(Cv2TemplateMatching(agglomerative_clustering(ARG0, 7), myIntSub(4, 3), myIntAdd(8858, 5)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myIntSub(myIntAdd(myIntSub(128, 2), myNot(falseBool)), myIntDiv(greaterThan(10.0, -4.045780669046045), myIntAdd(255, 150))), ifThenElseFloat(greaterThanEqual(myFloatIntSub(4.802932533687832, 1), myFloatIntDiv(4.0910097337404405, -2)), myFloatIntMult(myFloatIntAdd(3.6743176286559667, 128), ifThenElseBool(falseBool, falseBool, trueBool)), myFloatIntSub(myFloatDiv(0.01, 100.0), ifThenElseBool(trueBool, trueBool, falseBool))))
Cv2Subtract(AffinityPropagationClustering(RichardsonLucy(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 7), myFloatIntMult(1.0, 7)), Cosine(BitwiseOr(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.FULL, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_0)))
Cv2Subtract(AffinityPropagationClustering(RichardsonLucy(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 7), myFloatIntMult(1.0, 7)), Cosine(BitwiseOr(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.FULL, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_0)))
mySelPercentile(ARG0, TriState.FEATURES_TO_FEATURES, 150, falseBool)
mySelPercentile(ARG0, TriState.FEATURES_TO_FEATURES, 150, falseBool)
MorphErosionRect(MinimumToZero(AdjustConstrastGamma(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 4.78506080638415, 10.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myIntMult(greaterThan(0.01, 10.0), myIntDiv(9, -1)), lessThanOrEqual(myFloatMult(1.0, 10.0), myFloatIntMult(-0.9205472968835213, 150)), myFloatToInt(myFloatIntSub(100.0, 64)))
MorphErosionRect(MinimumToZero(AdjustConstrastGamma(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 4.78506080638415, 10.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myIntMult(greaterThan(0.01, 10.0), myIntDiv(9, -1)), lessThanOrEqual(myFloatMult(1.0, 10.0), myFloatIntMult(-0.9205472968835213, 150)), myFloatToInt(myFloatIntSub(100.0, 64)))
rmsHole(ScalarSubtract(CutDataLead(ContourMaskMaxExtentEnclosingCircle(WindowLanczos(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), myFloatIntSub(1.0, trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThanOrEqual(2.7237265080745052, myFloatMult(1.0, 3.2705202765994237))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myFloatIntDiv(myFloatIntMult(myFloatSub(0.1, 0.01), myNot(falseBool)), myIntMult(greaterThanEqual(10.0, 0.01), lessThanOrEqual(0.01, 100.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), passBool(greaterThanEqual(myIntToFloat(greaterThan(1.0, 10.0)), 10.0)), greaterThan(myFloatSub(0.05360539312707324, myFloatDiv(myFloatSub(10.0, 0.01), myFloatIntAdd(100.0, trueBool))), myFloatIntAdd(myFloatIntMult(myFloatDiv(10.0, 0.1), myAnd(falseBool, trueBool)), lessThanOrEqual(myFloatDiv(0.1, 0.01), passFloat(0.01)))))
rmsHole(ScalarSubtract(CutDataLead(ContourMaskMaxExtentEnclosingCircle(WindowLanczos(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), myFloatIntSub(1.0, trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThanOrEqual(2.7237265080745052, myFloatMult(1.0, 3.2705202765994237))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myFloatIntDiv(myFloatIntMult(myFloatSub(0.1, 0.01), myNot(falseBool)), myIntMult(greaterThanEqual(10.0, 0.01), lessThanOrEqual(0.01, 100.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), passBool(greaterThanEqual(myIntToFloat(greaterThan(1.0, 10.0)), 10.0)), greaterThan(myFloatSub(0.05360539312707324, myFloatDiv(myFloatSub(10.0, 0.01), myFloatIntAdd(100.0, trueBool))), myFloatIntAdd(myFloatIntMult(myFloatDiv(10.0, 0.1), myAnd(falseBool, trueBool)), lessThanOrEqual(myFloatDiv(0.1, 0.01), passFloat(0.01)))))
ToUint8Scale(LocalPoolingMax(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 5), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1))
ToUint8Scale(LocalPoolingMax(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 5), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1))
NormalLikelihood(ContourMaskRangeAspectRatio(MyNorm(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 1001), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myFloatToInt(1.0), myIntSub(6, 150)), myAnd(greaterThan(4.502892368511809, 100.0), greaterThanEqual(10.0, 0.01)))
NormalLikelihood(ContourMaskRangeAspectRatio(MyNorm(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 1001), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myFloatToInt(1.0), myIntSub(6, 150)), myAnd(greaterThan(4.502892368511809, 100.0), greaterThanEqual(10.0, 0.01)))
SubtractSaturate(ThresholdBinaryMax(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 35, 10.0), BackgroundSubtraction(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), TriState.STREAM_TO_FEATURES, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0))
SubtractSaturate(ThresholdBinaryMax(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 35, 10.0), BackgroundSubtraction(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), TriState.STREAM_TO_FEATURES, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0))
EmadeDataNumpyMultiplyFloat(MyCumSum(MyCumSum(CenterOfMass(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), lessThanOrEqual(0.01, 0.01)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), greaterThanEqual(myFloatDiv(-1.7849765477596624, 0.01), 0.1)), passTriState(TriState.STREAM_TO_STREAM), passAxis(passAxis(Axis.FULL)), myFloatSub(ifThenElseFloat(myOr(falseBool, trueBool), myFloatIntMult(1.0, 9), 1.0), passFloat(myFloatIntDiv(1.0, 5))))
EmadeDataNumpyMultiplyFloat(MyCumSum(MyCumSum(CenterOfMass(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), lessThanOrEqual(0.01, 0.01)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), greaterThanEqual(myFloatDiv(-1.7849765477596624, 0.01), 0.1)), passTriState(TriState.STREAM_TO_STREAM), passAxis(passAxis(Axis.FULL)), myFloatSub(ifThenElseFloat(myOr(falseBool, trueBool), myFloatIntMult(1.0, 9), 1.0), passFloat(myFloatIntDiv(1.0, 5))))
ContourMaskMaxEnclosingCircle(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 100.0)
ContourMaskMaxEnclosingCircle(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 100.0)
Sine(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL)
Sine(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL)
LowpassFilterEllipsoid(ToFloatNorm(WindowCosine(MorphTophatCross(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 55, 6), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(Axis.AXIS_1), equal(myFloatIntDiv(myFloatIntDiv(0.01, 4), equal(-0.6302238586548494, 0.1)), ifThenElseFloat(notEqual(0.1, -1.4177748689760783), 0.01, myFloatIntSub(-3.7981072633601256, 1))))
LowpassFilterEllipsoid(ToFloatNorm(WindowCosine(MorphTophatCross(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 55, 6), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(Axis.AXIS_1), equal(myFloatIntDiv(myFloatIntDiv(0.01, 4), equal(-0.6302238586548494, 0.1)), ifThenElseFloat(notEqual(0.1, -1.4177748689760783), 0.01, myFloatIntSub(-3.7981072633601256, 1))))
MorphErosionRect(ContourMaskRangeEquDiameter(MedianFilterHole(ContoursAll(EmadeDataAddPairTriple(ARG0, ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_1, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), passBool(lessThanOrEqual(10.0, 100.0)), passInt(ifThenElseBool(trueBool, falseBool, trueBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myIntSub(myIntAdd(myFloatToInt(10.0), passInt(150)), myIntDiv(myIntDiv(255, 255), myOr(falseBool, falseBool))), lessThan(passFloat(myFloatIntDiv(100.0, 4)), myFloatIntMult(passFloat(10.0), myIntMult(32, 12)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myAnd(greaterThan(myIntToFloat(greaterThan(0.01, -0.5956156197401983)), myFloatAdd(myFloatDiv(-2.7229837719407035, 4.3362734712465905), myFloatDiv(1.1197764073421776, 0.4765692406226254))), myNot(lessThan(myFloatIntDiv(0.1, 10), myFloatIntSub(100.0, 4)))), myIntMult(myFloatToInt(myIntToFloat(myOr(trueBool, falseBool))), equal(myFloatIntAdd(myFloatIntAdd(0.01, 4), notEqual(100.0, 0.01)), passFloat(myFloatIntSub(0.1, 0)))), equal(myFloatIntSub(myFloatIntAdd(myFloatIntSub(0.1, 255), myIntDiv(64, 32)), lessThanOrEqual(myFloatIntAdd(-0.4070547785511591, 0), myIntToFloat(5))), myFloatSub(myIntToFloat(greaterThanEqual(0.1, 0.1)), myFloatAdd(myIntToFloat(4), myFloatDiv(10.0, 10.0)))))
MorphErosionRect(ContourMaskRangeEquDiameter(MedianFilterHole(ContoursAll(EmadeDataAddPairTriple(ARG0, ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_1, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), passBool(lessThanOrEqual(10.0, 100.0)), passInt(ifThenElseBool(trueBool, falseBool, trueBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myIntSub(myIntAdd(myFloatToInt(10.0), passInt(150)), myIntDiv(myIntDiv(255, 255), myOr(falseBool, falseBool))), lessThan(passFloat(myFloatIntDiv(100.0, 4)), myFloatIntMult(passFloat(10.0), myIntMult(32, 12)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myAnd(greaterThan(myIntToFloat(greaterThan(0.01, -0.5956156197401983)), myFloatAdd(myFloatDiv(-2.7229837719407035, 4.3362734712465905), myFloatDiv(1.1197764073421776, 0.4765692406226254))), myNot(lessThan(myFloatIntDiv(0.1, 10), myFloatIntSub(100.0, 4)))), myIntMult(myFloatToInt(myIntToFloat(myOr(trueBool, falseBool))), equal(myFloatIntAdd(myFloatIntAdd(0.01, 4), notEqual(100.0, 0.01)), passFloat(myFloatIntSub(0.1, 0)))), equal(myFloatIntSub(myFloatIntAdd(myFloatIntSub(0.1, 255), myIntDiv(64, 32)), lessThanOrEqual(myFloatIntAdd(-0.4070547785511591, 0), myIntToFloat(5))), myFloatSub(myIntToFloat(greaterThanEqual(0.1, 0.1)), myFloatAdd(myIntToFloat(4), myFloatDiv(10.0, 10.0)))))
LognormalLM(Cv2ScaleAbs(MatchedFiltering(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 71), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myIntAdd(55, 3461), notEqual(100.0, 1.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)))
LognormalLM(Cv2ScaleAbs(MatchedFiltering(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 71), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myIntAdd(55, 3461), notEqual(100.0, 1.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)))
Learner(LowpassFilterEllipsoid(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 64), ModifyLearnerFloat(LearnerType('SVM', {'C': 1.0, 'kernel': 0}), 1.0, 128), ModifyEnsembleFloat(EnsembleType('SINGLE', None), 10.0, 1406))
Learner(LowpassFilterEllipsoid(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 64), ModifyLearnerFloat(LearnerType('SVM', {'C': 1.0, 'kernel': 0}), 1.0, 128), ModifyEnsembleFloat(EnsembleType('SINGLE', None), 10.0, 1406))
WindowBlackman(MorphOpenRect(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 3, 3), passTriState(TriState.FEATURES_TO_FEATURES), Axis.AXIS_2, myFloatIntSub(10.0, 55))
WindowBlackman(MorphOpenRect(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 3, 3), passTriState(TriState.FEATURES_TO_FEATURES), Axis.AXIS_2, myFloatIntSub(10.0, 55))
NumNamedEntities(ARG0)
NumNamedEntities(ARG0)
GradientMagnitude(WindowBackmanNuttall(LocalPoolingMean(StdDeviation(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 5), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), lessThanOrEqual(0.1, 1.0)), TriState.STREAM_TO_STREAM, passAxis(passAxis(Axis.AXIS_0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), Axis.AXIS_1, myNot(myNot(greaterThan(0.01, 0.1))))
GradientMagnitude(WindowBackmanNuttall(LocalPoolingMean(StdDeviation(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 5), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), lessThanOrEqual(0.1, 1.0)), TriState.STREAM_TO_STREAM, passAxis(passAxis(Axis.AXIS_0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), Axis.AXIS_1, myNot(myNot(greaterThan(0.01, 0.1))))
mySubSampleData(SavitzkyGolayFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 7, 0, 50), myOr(falseBool, trueBool), myFloatToInt(1.0))
mySubSampleData(SavitzkyGolayFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 7, 0, 50), myOr(falseBool, trueBool), myFloatToInt(1.0))
ConvolveChannelMerge(ScalarMin(HighpassSobelDerivative(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, falseBool, 1, 50, 6, 100), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myIntDiv(10, 55)), myOr(passBool(trueBool), greaterThan(0.1, 10.0)))
ConvolveChannelMerge(ScalarMin(HighpassSobelDerivative(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, falseBool, 1, 50, 6, 100), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myIntDiv(10, 55)), myOr(passBool(trueBool), greaterThan(0.1, 10.0)))
RichardsonLucy(RegionalMaxima(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0.1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), lessThanOrEqual(10.0, -3.789473645958065))
RichardsonLucy(RegionalMaxima(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0.1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), lessThanOrEqual(10.0, -3.789473645958065))
MorphDilateCross(HighpassIrst(MyProd(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), lessThanOrEqual(myFloatIntMult(1.0, 32), myIntToFloat(64)), ifThenElseBool(ifThenElseBool(trueBool, trueBool, trueBool), myNot(falseBool), ifThenElseBool(trueBool, falseBool, falseBool)), myOr(passBool(falseBool), myOr(trueBool, falseBool)))
MorphDilateCross(HighpassIrst(MyProd(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), lessThanOrEqual(myFloatIntMult(1.0, 32), myIntToFloat(64)), ifThenElseBool(ifThenElseBool(trueBool, trueBool, trueBool), myNot(falseBool), ifThenElseBool(trueBool, falseBool, falseBool)), myOr(passBool(falseBool), myOr(trueBool, falseBool)))
ThresholdNLargestBinary(ARG0, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), greaterThanEqual(0.1, 100.0))
ThresholdNLargestBinary(ARG0, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), greaterThanEqual(0.1, 100.0))
MorphGradientCross(mySelPercentile(ARG0, TriState.STREAM_TO_STREAM, 100, 4), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), greaterThanEqual(0.1, -2.6207889943760785), passInt(55))
MorphGradientCross(mySelPercentile(ARG0, TriState.STREAM_TO_STREAM, 100, 4), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), greaterThanEqual(0.1, -2.6207889943760785), passInt(55))
Cv2iDCT(ThresholdToZeroPixelFloat(ThresholdToZeroFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 3.791838582509021), mySelPercentile(ARG0, TriState.STREAM_TO_STREAM, 100, 4), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)))
Cv2iDCT(ThresholdToZeroPixelFloat(ThresholdToZeroFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 3.791838582509021), mySelPercentile(ARG0, TriState.STREAM_TO_STREAM, 100, 4), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)))
StdDeviation(AdjustConstrastLog(Cv2NotEqual(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.FULL, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatIntSub(1.0, 6103)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myIntSub(myIntAdd(8, 1), myIntMult(128, 2)))
StdDeviation(AdjustConstrastLog(Cv2NotEqual(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.FULL, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatIntSub(1.0, 6103)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myIntSub(myIntAdd(8, 1), myIntMult(128, 2)))
SubtractSaturate(StandardNorm(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2), MyDiff(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), passAxis(Axis.AXIS_0))
SubtractSaturate(StandardNorm(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2), MyDiff(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), passAxis(Axis.AXIS_0))
Prerejection(ContourMaskRangeEquDiameter(RandomUniform(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, falseBool, 255), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myIntDiv(1, 55), notEqual(-1.5339542588046107, 10.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), 3, myIntAdd(100, lessThanOrEqual(0.01, -4.674255599033462)), 100.0)
Prerejection(ContourMaskRangeEquDiameter(RandomUniform(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, falseBool, 255), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myIntDiv(1, 55), notEqual(-1.5339542588046107, 10.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), 3, myIntAdd(100, lessThanOrEqual(0.01, -4.674255599033462)), 100.0)
Cv2TemplateMatching(Cv2LessThan(ContourMaskRangeEquDiameter(MyAverager(MorphBlackhatEllipse(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 8, 150), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), lessThan(1.0, 10.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), greaterThanEqual(ifThenElseFloat(falseBool, 100.0, -1.4931119054945272), myFloatIntSub(0.01, 4)), greaterThan(myFloatAdd(1.0, 0.1), myIntToFloat(150))), AbsDiff(MaxLoc(MyProd(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL)), MorphBlackhatRect(ThresholdBinaryMax(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 150, -4.809814514312042), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), notEqual(0.1, 1.0), passBool(trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), passAxis(passAxis(passAxis(Axis.AXIS_0)))), passBool(lessThanOrEqual(ifThenElseFloat(greaterThan(-0.7111790658374577, 100.0), myFloatIntSub(0.01, 32), myIntToFloat(44)), ifThenElseFloat(equal(100.0, 0.01), myFloatAdd(10.0, 100.0), myIntToFloat(86)))), lessThanOrEqual(myFloatIntSub(passFloat(myFloatIntAdd(2.8612702212384775, 8505)), myIntMult(passInt(6), greaterThan(0.01, -3.047078711404433))), ifThenElseFloat(lessThanOrEqual(myFloatIntMult(0.1, 5), myFloatAdd(0.1, 2.856294308375917)), myFloatIntAdd(myFloatDiv(0.01, 2.233037287149128), myIntSub(32, 64)), myFloatAdd(passFloat(10.0), myFloatIntAdd(0.1, 0)))))
Cv2TemplateMatching(Cv2LessThan(ContourMaskRangeEquDiameter(MyAverager(MorphBlackhatEllipse(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 8, 150), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), lessThan(1.0, 10.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), greaterThanEqual(ifThenElseFloat(falseBool, 100.0, -1.4931119054945272), myFloatIntSub(0.01, 4)), greaterThan(myFloatAdd(1.0, 0.1), myIntToFloat(150))), AbsDiff(MaxLoc(MyProd(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL)), MorphBlackhatRect(ThresholdBinaryMax(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 150, -4.809814514312042), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), notEqual(0.1, 1.0), passBool(trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), passAxis(passAxis(passAxis(Axis.AXIS_0)))), passBool(lessThanOrEqual(ifThenElseFloat(greaterThan(-0.7111790658374577, 100.0), myFloatIntSub(0.01, 32), myIntToFloat(44)), ifThenElseFloat(equal(100.0, 0.01), myFloatAdd(10.0, 100.0), myIntToFloat(86)))), lessThanOrEqual(myFloatIntSub(passFloat(myFloatIntAdd(2.8612702212384775, 8505)), myIntMult(passInt(6), greaterThan(0.01, -3.047078711404433))), ifThenElseFloat(lessThanOrEqual(myFloatIntMult(0.1, 5), myFloatAdd(0.1, 2.856294308375917)), myFloatIntAdd(myFloatDiv(0.01, 2.233037287149128), myIntSub(32, 64)), myFloatAdd(passFloat(10.0), myFloatIntAdd(0.1, 0)))))
HighpassFourierEllipsoid(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 128)
HighpassFourierEllipsoid(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 128)
MultiplyTransposed(myPCA(ARG0, TriState.FEATURES_TO_FEATURES, 32, falseBool), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myNot(falseBool))
MultiplyTransposed(myPCA(ARG0, TriState.FEATURES_TO_FEATURES, 32, falseBool), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myNot(falseBool))
MultiplyTransposed(SpectralClustering(ContourMaskMinSolidity(LowpassFilterGaussian(WindowNuttal(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myIntMult(55, 3), myNot(falseBool), ifThenElseFloat(falseBool, 1.0, 100.0), myIntToFloat(falseBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), myIntSub(passBool(falseBool), greaterThan(10.0, 100.0))), myIntDiv(myNot(equal(-1.4413717539817283, 0.01)), greaterThanEqual(myFloatDiv(100.0, 0.1), myFloatSub(0.01, 0.1))), myFloatIntAdd(myFloatIntDiv(myFloatSub(0.1, 0.1), passInt(61)), myFloatToInt(myFloatAdd(0.1, 0.5068917493552574)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), notEqual(ifThenElseFloat(notEqual(myFloatDiv(0.01, -2.3101470018949), passFloat(0.01)), myIntToFloat(myIntMult(0, 55)), myFloatIntMult(ifThenElseFloat(trueBool, 1.0, 100.0), myFloatToInt(1.0))), myFloatSub(myFloatIntSub(ifThenElseFloat(falseBool, 0.01, 0.3165653142716751), lessThan(10.0, 10.0)), myFloatAdd(myFloatMult(0.01, 10.0), myFloatAdd(4.067249873067709, 100.0)))))
MultiplyTransposed(SpectralClustering(ContourMaskMinSolidity(LowpassFilterGaussian(WindowNuttal(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myIntMult(55, 3), myNot(falseBool), ifThenElseFloat(falseBool, 1.0, 100.0), myIntToFloat(falseBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), myIntSub(passBool(falseBool), greaterThan(10.0, 100.0))), myIntDiv(myNot(equal(-1.4413717539817283, 0.01)), greaterThanEqual(myFloatDiv(100.0, 0.1), myFloatSub(0.01, 0.1))), myFloatIntAdd(myFloatIntDiv(myFloatSub(0.1, 0.1), passInt(61)), myFloatToInt(myFloatAdd(0.1, 0.5068917493552574)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), notEqual(ifThenElseFloat(notEqual(myFloatDiv(0.01, -2.3101470018949), passFloat(0.01)), myIntToFloat(myIntMult(0, 55)), myFloatIntMult(ifThenElseFloat(trueBool, 1.0, 100.0), myFloatToInt(1.0))), myFloatSub(myFloatIntSub(ifThenElseFloat(falseBool, 0.01, 0.3165653142716751), lessThan(10.0, 10.0)), myFloatAdd(myFloatMult(0.01, 10.0), myFloatAdd(4.067249873067709, 100.0)))))
WindowBlackman(SelectRange(MatchedFiltering2D(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 0, 0.1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myIntSub(7, 3), greaterThanEqual(-2.6846992061529296, 0.1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myFloatIntDiv(myIntToFloat(64), ifThenElseBool(trueBool, falseBool, trueBool)))
WindowBlackman(SelectRange(MatchedFiltering2D(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 0, 0.1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myIntSub(7, 3), greaterThanEqual(-2.6846992061529296, 0.1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myFloatIntDiv(myIntToFloat(64), ifThenElseBool(trueBool, falseBool, trueBool)))
MyInformedSearch(ARG0, FractionTriple(ARG0, ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.FULL, Axis.AXIS_1, 1), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.FULL), 255, myFloatIntMult(10.0, 5))
MyInformedSearch(ARG0, FractionTriple(ARG0, ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.FULL, Axis.AXIS_1, 1), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.FULL), 255, myFloatIntMult(10.0, 5))
ContourMaskMaxArea(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 0.01)
ContourMaskMaxArea(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 0.01)
SubtractSaturate(MinimumToZero(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0), myPCA(ARG0, TriState.STREAM_TO_STREAM, 8, falseBool), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0))
SubtractSaturate(MinimumToZero(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0), myPCA(ARG0, TriState.STREAM_TO_STREAM, 8, falseBool), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0))
EqualizeHist(EqualizeHist(CornerDetectionEigen(StdDeviationHoleCustom(Cv2Subtract(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.FULL), SetToZeroIf>Data&Factor(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_0, -1.9967884891639098), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_2), lessThan(1.0, 1.0), equal(-3.2443671494734683, 100.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), greaterThan(myFloatIntDiv(0.1, 150), myFloatAdd(10.0, 1.0)), notEqual(myFloatDiv(1.0, 0.1), myFloatIntAdd(4.4060824977662385, 255)), myFloatIntAdd(myFloatSub(100.0, 10.0), greaterThanEqual(1.0, 10.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))))
EqualizeHist(EqualizeHist(CornerDetectionEigen(StdDeviationHoleCustom(Cv2Subtract(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.FULL), SetToZeroIf>Data&Factor(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_0, -1.9967884891639098), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_2), lessThan(1.0, 1.0), equal(-3.2443671494734683, 100.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), greaterThan(myFloatIntDiv(0.1, 150), myFloatAdd(10.0, 1.0)), notEqual(myFloatDiv(1.0, 0.1), myFloatIntAdd(4.4060824977662385, 255)), myFloatIntAdd(myFloatSub(100.0, 10.0), greaterThanEqual(1.0, 10.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))))
CountVectorizer(AbsoluteValue(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1), greaterThanEqual(10.0, 1.0), myAnd(trueBool, trueBool), passBool(trueBool), greaterThanEqual(1.0, 1.0))
CountVectorizer(AbsoluteValue(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1), greaterThanEqual(10.0, 1.0), myAnd(trueBool, trueBool), passBool(trueBool), greaterThanEqual(1.0, 1.0))
ContoursConvexConcave(ArcTangent(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), notEqual(1.0, 100.0))
ContoursConvexConcave(ArcTangent(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), notEqual(1.0, 100.0))
MyCumSum(DogDetection(ContourMaskMaxExtent(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 9), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), ifThenElseFloat(falseBool, 0.1, 10.0), myFloatIntDiv(0.01, 1), ifThenElseFloat(falseBool, 2.988279126968651, 1.0), myFloatSub(100.0, -2.1863723273212154), myFloatIntMult(2.4959483071760946, 2)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), Axis.AXIS_1, myOr(ifThenElseBool(falseBool, falseBool, trueBool), lessThan(0.01, 0.1)))
MyCumSum(DogDetection(ContourMaskMaxExtent(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 9), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), ifThenElseFloat(falseBool, 0.1, 10.0), myFloatIntDiv(0.01, 1), ifThenElseFloat(falseBool, 2.988279126968651, 1.0), myFloatSub(100.0, -2.1863723273212154), myFloatIntMult(2.4959483071760946, 2)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), Axis.AXIS_1, myOr(ifThenElseBool(falseBool, falseBool, trueBool), lessThan(0.01, 0.1)))
Prerejection(LocalPoolingMean(MedianFilterHole(Exponetial(myVarThresh(ARG0, TriState.FEATURES_TO_FEATURES, 0.1), TriState.FEATURES_TO_FEATURES, passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), ifThenElseBool(greaterThanEqual(10.0, 10.0), myOr(falseBool, falseBool), myAnd(falseBool, trueBool)), greaterThan(10.0, myFloatSub(0.1, 1.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), greaterThan(myFloatDiv(myFloatIntAdd(0.1, 2), ifThenElseFloat(trueBool, 100.0, -1.144883930871774)), 0.1)), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), Axis.AXIS_1, lessThan(10.0, myFloatSub(myFloatAdd(myFloatIntAdd(-4.476964359869898, falseBool), 100.0), myFloatIntAdd(passFloat(0.01), myAnd(trueBool, falseBool)))), passBool(greaterThan(myFloatDiv(myFloatIntDiv(10.0, 4), myFloatAdd(1.0, 1.380145806634447)), 1.0)), myFloatIntSub(myFloatIntSub(myFloatMult(passFloat(1.0), myFloatAdd(10.0, 1.0)), 100), myNot(myAnd(ifThenElseBool(falseBool, trueBool, falseBool), notEqual(2.710201874034434, -3.3263233958062575)))))
Prerejection(LocalPoolingMean(MedianFilterHole(Exponetial(myVarThresh(ARG0, TriState.FEATURES_TO_FEATURES, 0.1), TriState.FEATURES_TO_FEATURES, passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), ifThenElseBool(greaterThanEqual(10.0, 10.0), myOr(falseBool, falseBool), myAnd(falseBool, trueBool)), greaterThan(10.0, myFloatSub(0.1, 1.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), greaterThan(myFloatDiv(myFloatIntAdd(0.1, 2), ifThenElseFloat(trueBool, 100.0, -1.144883930871774)), 0.1)), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), Axis.AXIS_1, lessThan(10.0, myFloatSub(myFloatAdd(myFloatIntAdd(-4.476964359869898, falseBool), 100.0), myFloatIntAdd(passFloat(0.01), myAnd(trueBool, falseBool)))), passBool(greaterThan(myFloatDiv(myFloatIntDiv(10.0, 4), myFloatAdd(1.0, 1.380145806634447)), 1.0)), myFloatIntSub(myFloatIntSub(myFloatMult(passFloat(1.0), myFloatAdd(10.0, 1.0)), 100), myNot(myAnd(ifThenElseBool(falseBool, trueBool, falseBool), notEqual(2.710201874034434, -3.3263233958062575)))))
Learner(WienerFilter(LocalPoolingMean(FractionTriple(MorphOpenEllipse(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 50, 1), LinearPredictiveCoding(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 255), SpectralClustering(ARG0, 8277, 10.0), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_0), greaterThan(10.0, 0.01)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), notEqual(myFloatIntDiv(10.0, 7), myFloatIntSub(10.0, 150))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1)))), ModifyLearnerFloat(ModifyLearnerList(ModifyLearnerFloat(ModifyLearnerFloat(LearnerType('LIGHTGBM', {'max_depth': -1, 'learning_rate': 0.1, 'boosting_type': 0, 'num_leaves': 31}), -0.6519627058835358, falseBool), myFloatIntAdd(1.0, -4), myIntDiv(10, 128)), passList(myListAppend(EmbeddingLayer(falseBool, ARG0, glorotUniformWeights, InputLayer(ARG0)), EmbeddingLayer(9, ARG0, fasttextWeights, InputLayer(ARG0)))), notEqual(passFloat(10.0), myFloatDiv(0.1, -3.8752023772323687))), myFloatIntSub(myFloatMult(myFloatDiv(-1.8408536572696121, 0.01), ifThenElseFloat(falseBool, 1.0, 1.0)), passInt(myAnd(trueBool, trueBool))), ifThenElseBool(lessThan(myFloatSub(10.0, 1.0), myFloatSub(10.0, 100.0)), lessThan(myFloatSub(100.0, 0.1), myFloatMult(100.0, 100.0)), notEqual(myFloatIntMult(1.0, 32), myIntToFloat(0)))), ModifyEnsembleInt(ModifyEnsembleFloat(ModifyEnsembleFloat(ModifyEnsembleFloat(EnsembleType('BAGGED', None), 0.1, 10), myFloatMult(1.0, 100.0), ifThenElseBool(trueBool, falseBool, falseBool)), myFloatMult(myIntToFloat(0), myFloatIntDiv(-0.23376468561784414, 2)), greaterThan(myFloatSub(0.01, 100.0), myFloatIntSub(0.1, 6))), notEqual(passFloat(myFloatIntAdd(1.0, 255)), myFloatIntDiv(myFloatIntAdd(100.0, 0), myFloatToInt(1.0))), lessThan(myFloatIntMult(passFloat(0.1), myFloatToInt(0.1)), myFloatIntMult(myFloatSub(100.0, 0.01), ifThenElseBool(falseBool, falseBool, falseBool)))))
Learner(WienerFilter(LocalPoolingMean(FractionTriple(MorphOpenEllipse(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 50, 1), LinearPredictiveCoding(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 255), SpectralClustering(ARG0, 8277, 10.0), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_0), greaterThan(10.0, 0.01)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), notEqual(myFloatIntDiv(10.0, 7), myFloatIntSub(10.0, 150))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1)))), ModifyLearnerFloat(ModifyLearnerList(ModifyLearnerFloat(ModifyLearnerFloat(LearnerType('LIGHTGBM', {'max_depth': -1, 'learning_rate': 0.1, 'boosting_type': 0, 'num_leaves': 31}), -0.6519627058835358, falseBool), myFloatIntAdd(1.0, -4), myIntDiv(10, 128)), passList(myListAppend(EmbeddingLayer(falseBool, ARG0, glorotUniformWeights, InputLayer(ARG0)), EmbeddingLayer(9, ARG0, fasttextWeights, InputLayer(ARG0)))), notEqual(passFloat(10.0), myFloatDiv(0.1, -3.8752023772323687))), myFloatIntSub(myFloatMult(myFloatDiv(-1.8408536572696121, 0.01), ifThenElseFloat(falseBool, 1.0, 1.0)), passInt(myAnd(trueBool, trueBool))), ifThenElseBool(lessThan(myFloatSub(10.0, 1.0), myFloatSub(10.0, 100.0)), lessThan(myFloatSub(100.0, 0.1), myFloatMult(100.0, 100.0)), notEqual(myFloatIntMult(1.0, 32), myIntToFloat(0)))), ModifyEnsembleInt(ModifyEnsembleFloat(ModifyEnsembleFloat(ModifyEnsembleFloat(EnsembleType('BAGGED', None), 0.1, 10), myFloatMult(1.0, 100.0), ifThenElseBool(trueBool, falseBool, falseBool)), myFloatMult(myIntToFloat(0), myFloatIntDiv(-0.23376468561784414, 2)), greaterThan(myFloatSub(0.01, 100.0), myFloatIntSub(0.1, 6))), notEqual(passFloat(myFloatIntAdd(1.0, 255)), myFloatIntDiv(myFloatIntAdd(100.0, 0), myFloatToInt(1.0))), lessThan(myFloatIntMult(passFloat(0.1), myFloatToInt(0.1)), myFloatIntMult(myFloatSub(100.0, 0.01), ifThenElseBool(falseBool, falseBool, falseBool)))))
ThresholdToZero(RMS2D(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 1), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passFloat(10.0))
ThresholdToZero(RMS2D(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 1), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passFloat(10.0))
WindowPlanckTaper(Cv2Transpose(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myFloatIntMult(0.1, 32))
WindowPlanckTaper(Cv2Transpose(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myFloatIntMult(0.1, 32))
adf_1(mySpectralEmbedding(ContourMaskMinAspectRatio(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 0.01), passTriState(TriState.FEATURES_TO_FEATURES), myIntDiv(64, 150)))
adf_1(mySpectralEmbedding(ContourMaskMinAspectRatio(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 0.01), passTriState(TriState.FEATURES_TO_FEATURES), myIntDiv(64, 150)))
StdDeviationHoleCustom(WindowFlatTop(Cv2RMS(MyCumSum(Cv2LessThan(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.FULL, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), myAnd(falseBool, trueBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myFloatToInt(myFloatIntSub(100.0, 3))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL)))), LinearPredictiveCoding(SepDetectionWindow(mySelPercentile(LognormalLM(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), myIntMult(5, 3), myIntAdd(64, 100)), greaterThan(myIntToFloat(20), myFloatDiv(100.0, 100.0)), passInt(myIntDiv(64, 55)), myFloatDiv(ifThenElseFloat(trueBool, -1.864224535664162, 100.0), myIntToFloat(7))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), ifThenElseBool(equal(myFloatMult(100.0, 10.0), myFloatIntDiv(-1.914796249188, -10)), equal(myFloatIntSub(100.0, 8), myFloatSub(10.0, 10.0)), passBool(lessThanOrEqual(100.0, 1.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), passBool(lessThanOrEqual(myFloatIntSub(myIntToFloat(7), myAnd(trueBool, falseBool)), myIntToFloat(myIntMult(1, 50)))), lessThan(myFloatIntAdd(myFloatMult(myFloatDiv(10.0, 0.01), myFloatAdd(1.0, 3.054370444051859)), myAnd(myNot(falseBool), lessThan(0.01, 3.6318292114161235))), myFloatMult(myFloatIntMult(myFloatIntMult(1.0, 8), myIntDiv(5, 9)), ifThenElseFloat(notEqual(0.01, 0.01), myFloatIntDiv(100.0, 64), passFloat(10.0)))))
StdDeviationHoleCustom(WindowFlatTop(Cv2RMS(MyCumSum(Cv2LessThan(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.FULL, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), myAnd(falseBool, trueBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myFloatToInt(myFloatIntSub(100.0, 3))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL)))), LinearPredictiveCoding(SepDetectionWindow(mySelPercentile(LognormalLM(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), myIntMult(5, 3), myIntAdd(64, 100)), greaterThan(myIntToFloat(20), myFloatDiv(100.0, 100.0)), passInt(myIntDiv(64, 55)), myFloatDiv(ifThenElseFloat(trueBool, -1.864224535664162, 100.0), myIntToFloat(7))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), ifThenElseBool(equal(myFloatMult(100.0, 10.0), myFloatIntDiv(-1.914796249188, -10)), equal(myFloatIntSub(100.0, 8), myFloatSub(10.0, 10.0)), passBool(lessThanOrEqual(100.0, 1.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), passBool(lessThanOrEqual(myFloatIntSub(myIntToFloat(7), myAnd(trueBool, falseBool)), myIntToFloat(myIntMult(1, 50)))), lessThan(myFloatIntAdd(myFloatMult(myFloatDiv(10.0, 0.01), myFloatAdd(1.0, 3.054370444051859)), myAnd(myNot(falseBool), lessThan(0.01, 3.6318292114161235))), myFloatMult(myFloatIntMult(myFloatIntMult(1.0, 8), myIntDiv(5, 9)), ifThenElseFloat(notEqual(0.01, 0.01), myFloatIntDiv(100.0, 64), passFloat(10.0)))))
BitwiseNOT(mySelGenUni(Cv2GreaterThan(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.AXIS_2), TriState.STREAM_TO_FEATURES, myIntAdd(128, 1), myNot(trueBool), myFloatMult(100.0, 10.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)))
BitwiseNOT(mySelGenUni(Cv2GreaterThan(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.AXIS_2), TriState.STREAM_TO_FEATURES, myIntAdd(128, 1), myNot(trueBool), myFloatMult(100.0, 10.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)))
HighpassFourierUniform(EmadeDataAddFloat(ContourMaskMinEnclosingCircle(myIfThenElse(ARG0, ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, 10), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatIntMult(0.01, 5)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myFloatDiv(ifThenElseFloat(trueBool, 4.645336856249276, 10.0), myFloatSub(10.0, 100.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatToInt(myFloatIntMult(myFloatIntSub(0.1, 3), greaterThan(0.01, 1.0))))
HighpassFourierUniform(EmadeDataAddFloat(ContourMaskMinEnclosingCircle(myIfThenElse(ARG0, ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, 10), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatIntMult(0.01, 5)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myFloatDiv(ifThenElseFloat(trueBool, 4.645336856249276, 10.0), myFloatSub(10.0, 100.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatToInt(myFloatIntMult(myFloatIntSub(0.1, 3), greaterThan(0.01, 1.0))))
RandomNormal(NumpyDivide(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.FULL, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), myIntAdd(150, 10), myIntSub(1, 3))
RandomNormal(NumpyDivide(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.FULL, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), myIntAdd(150, 10), myIntSub(1, 3))
MorphDilateCross(MyDWT(MorphTophatRect(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 64, 1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), lessThan(100.0, 1.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), notEqual(myFloatDiv(100.0, 0.1), ifThenElseFloat(falseBool, 1.778366270603625, 0.01)), notEqual(myFloatSub(0.01, 0.01), ifThenElseFloat(trueBool, 0.1, 100.0)), equal(myFloatIntMult(100.0, 2), myFloatMult(0.01, 0.1)))
MorphDilateCross(MyDWT(MorphTophatRect(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 64, 1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), lessThan(100.0, 1.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), notEqual(myFloatDiv(100.0, 0.1), ifThenElseFloat(falseBool, 1.778366270603625, 0.01)), notEqual(myFloatSub(0.01, 0.01), ifThenElseFloat(trueBool, 0.1, 100.0)), equal(myFloatIntMult(100.0, 2), myFloatMult(0.01, 0.1)))
RemoveFeature(EdgeDetectionCanny(AccumulateWeighted(TfidfVectorizer(ARG0, falseBool, trueBool, 7957, 32), passTriState(TriState.STREAM_TO_STREAM), Axis.AXIS_2, myFloatIntDiv(100.0, 8)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myOr(lessThan(0.01, 2.5069505860262407), myOr(falseBool, trueBool)), passBool(lessThanOrEqual(0.01, 100.0)), myIntSub(passBool(trueBool), notEqual(10.0, 0.1))), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(passAxis(Axis.FULL))), myIntAdd(passBool(passBool(trueBool)), myIntAdd(myIntAdd(50, 1), myNot(falseBool))))
RemoveFeature(EdgeDetectionCanny(AccumulateWeighted(TfidfVectorizer(ARG0, falseBool, trueBool, 7957, 32), passTriState(TriState.STREAM_TO_STREAM), Axis.AXIS_2, myFloatIntDiv(100.0, 8)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myOr(lessThan(0.01, 2.5069505860262407), myOr(falseBool, trueBool)), passBool(lessThanOrEqual(0.01, 100.0)), myIntSub(passBool(trueBool), notEqual(10.0, 0.1))), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(passAxis(Axis.FULL))), myIntAdd(passBool(passBool(trueBool)), myIntAdd(myIntAdd(50, 1), myNot(falseBool))))
ThresholdToZeroFloat(MorphCloseEllipse(Cv2Multiply(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_2), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myOr(trueBool, trueBool), myIntMult(7, 7)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), myFloatMult(myFloatIntSub(10.0, 50), myFloatIntAdd(0.1, 50)))
ThresholdToZeroFloat(MorphCloseEllipse(Cv2Multiply(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_2), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myOr(trueBool, trueBool), myIntMult(7, 7)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), myFloatMult(myFloatIntSub(10.0, 50), myFloatIntAdd(0.1, 50)))
EmadeDataMultiplyPair(myConcatenate(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.FULL, Axis.FULL), Correlation(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), passAxis(Axis.FULL))
EmadeDataMultiplyPair(myConcatenate(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.FULL, Axis.FULL), Correlation(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), passAxis(Axis.FULL))
AbsDiff(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_2, Axis.FULL)
AbsDiff(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_2, Axis.FULL)
MatchedFiltering(MorphGradientEllipse(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 50, 5), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), 1)
MatchedFiltering(MorphGradientEllipse(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 50, 5), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), 1)
ThresholdBinaryFloat(HighpassUnsharpMask(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 5, 3, 3), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myFloatIntMult(1.9946364158821517, 9), passFloat(1.0))
ThresholdBinaryFloat(HighpassUnsharpMask(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 5, 3, 3), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myFloatIntMult(1.9946364158821517, 9), passFloat(1.0))
ContourMaskMaxLength(WindowBartlett(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatIntAdd(2.336408392915226, 0))
ContourMaskMaxLength(WindowBartlett(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatIntAdd(2.336408392915226, 0))
AbsDiff(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.FULL)
AbsDiff(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.FULL)
Mutated 120 individuals
Heal Offspring
Healed128 individuals
Already computed LabelObjects(MyDiff(MatchedFiltering(mySelKBest(ARG0, TriState.FEATURES_TO_FEATURES, 150, 128), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myIntMult(3591, 10)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0)))) with fitness (inf, inf) hash cff6467c2c86b4bd6648f357d2a95b7862365bb0ee722cf5da3956efbca72912 and age 0
Already computed SetToZeroIf>Data&Factor(ContoursMaxLength(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 8), Cv2Add(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.AXIS_1), TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_0), myFloatIntSub(10.0, 4666)) with fitness (inf, inf) hash f994a3455bb29bed5c42323b9b2c7aa8c909eb7edba06897a26adb5928c12bbe and age 0
Already computed FractionTriple(RandomUniform(ConvertBW(Learner(SetToZeroIf<Data&Factor(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_1, 255), ModifyLearnerFloat(LearnerType('KNN', {'K': 3, 'weights': 0}), 0.01, falseBool), ModifyEnsembleInt(EnsembleType('GRID', None), 255, 2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myNot(lessThan(myFloatSub(100.0, 10.0), ifThenElseFloat(trueBool, 1.0, 0.01))), notEqual(myFloatIntSub(myFloatAdd(100.0, 1.0), myIntSub(9, 6)), myFloatMult(myFloatSub(0.1, 0.1), myFloatIntMult(0.01, 100)))), EmadeDataNumpyMultiplyFloat(MyBinaryThreshold(BitwiseOr(AdjustConstrastLog(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 100.0), GradientWeighted(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 1, 1.0, 100.0), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatSub(myIntToFloat(97), myFloatIntAdd(100.0, 29))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatIntAdd(myIntToFloat(greaterThan(0.01, 100.0)), passInt(myIntMult(11, 150)))), StdDeviationHole(MorphOpenCross(MorphCloseCross(MorphBlackhatRect(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 50, 10), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), greaterThanEqual(0.1, 0.1), myFloatToInt(-1.0399429945978267)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passBool(greaterThanEqual(1.8066201072486088, 100.0)), passBool(equal(10.0, -4.261701765953674))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myAnd(lessThan(myFloatIntDiv(-4.845624744776469, 10), myIntToFloat(3)), myNot(greaterThanEqual(0.1, 0.01))), myIntSub(greaterThanEqual(myFloatIntMult(1.5849853581349578, 8), myFloatMult(0.1, 0.01)), myAnd(passBool(falseBool), notEqual(0.01, 10.0)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), myIntAdd(myOr(lessThan(ifThenElseFloat(trueBool, -4.885915295047991, 100.0), myFloatIntSub(100.0, 10)), myAnd(myOr(falseBool, falseBool), myAnd(falseBool, trueBool))), myIntDiv(myAnd(equal(10.0, 0.9737817647001012), notEqual(10.0, 0.01)), myFloatToInt(myFloatAdd(1.0, 0.13351988622046562))))) with fitness (inf, inf) hash 669928e1dc12235c41866fd2e047b8dbd74a66f5a991e8299d847e97a5bf1ef7 and age 0
Already computed ThresholdBinaryInverseMask(ifThenElseDataPair(equal(10.0, 10.0), EmadeDataNumpyMultiplyPair(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.FULL, Axis.AXIS_2), LowpassFilterUniform(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, trueBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), ifThenElseFloat(ifThenElseBool(falseBool, trueBool, trueBool), myFloatMult(0.1, 0.01), myFloatIntMult(-3.2750096983702024, 65))) with fitness (inf, inf) hash 67a78ba72d5c58fe905ab67bcc7d061255f0305d41ca495ad18c6ad4b7ad26a4 and age 0
Already computed ThresholdBinaryInverse(ThresholdBinaryInverse(MinimumToZero(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myFloatIntMult(1.0, 4)), passTriState(TriState.STREAM_TO_STREAM), Axis.AXIS_2, myFloatIntDiv(1.0, passInt(10))) with fitness (inf, inf) hash 18abb873e1f169bc49ddb4709b1cbc9a2c42d93e83c4c29f9e2e6c054be70f11 and age 0
Already computed ContourMaskMaxSolidity(WindowTurkey(MatchedFiltering(SavitzkyGolayFilter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 87, 5, 2), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myAnd(falseBool, trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myFloatMult(myFloatAdd(-0.35649298395985163, 1.0), myIntToFloat(4))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myFloatMult(myFloatIntMult(ifThenElseFloat(falseBool, -3.2065381108254987, 1.0), myOr(falseBool, trueBool)), passFloat(myFloatIntMult(0.01, 128)))) with fitness (inf, inf) hash 57960d2bf383faee9ac330f4a6824184044fef559d9f51b6eb37e3fee730bd37 and age 0
Already computed birch_clustering(WindowBlackman(ArcTangent(EmadeDataMultiplyInt(MyDWT(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 61), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), greaterThan(0.01, 0.1)), TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myFloatAdd(ifThenElseFloat(greaterThanEqual(10.0, 100.0), myFloatMult(0.1, 1.0), myFloatSub(0.1, 0.1)), myFloatSub(myFloatDiv(0.1, 0.1), myIntToFloat(6)))), myFloatDiv(myIntToFloat(greaterThanEqual(myFloatDiv(0.1, 1.0), passFloat(0.01))), myFloatIntSub(myFloatIntMult(myIntToFloat(6), lessThanOrEqual(-0.051486290484572095, -1.769474421690055)), myFloatToInt(myIntToFloat(55)))), myOr(trueBool, myOr(greaterThan(myFloatIntMult(1.0, 6), myFloatIntSub(0.01, 1)), lessThan(myFloatSub(0.1, 0.01), myFloatIntMult(0.1, 8)))), passInt(passInt(greaterThanEqual(100.0, myFloatSub(1.0, 0.01))))) with fitness (inf, inf) hash b45cbe07ead3dd8a35436e364a7a71fc018a589b0592ebf992c7dd3020308a8e and age 0
Already computed MaxLoc(BitwiseAnd(ContourMaskRangeLength(Round(StdDeviation(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 9), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), Axis.AXIS_0, equal(passFloat(10.0), myFloatDiv(0.01, 0.2274954885701046)), passBool(ifThenElseBool(falseBool, trueBool, falseBool))), ThresholdBinary(MyCumSum(LocalPoolingMax(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 6), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), 7), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), 100.0, myOr(greaterThanEqual(-4.171750319883218, 0.01), notEqual(10.0, 1.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), passAxis(passAxis(passAxis(Axis.AXIS_0)))), TriState.FEATURES_TO_FEATURES, passAxis(passAxis(passAxis(passAxis(Axis.FULL))))) with fitness (inf, inf) hash 2b8c06ac03a62fe975b7a11559bffd3aeaff2a2ed48ca654d54abc0b3033a2a6 and age 0
Already computed mySelKBest(MorphGradientEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 4, 6), passTriState(TriState.FEATURES_TO_FEATURES), greaterThan(0.1, 100.0), lessThanOrEqual(100.0, 100.0)) with fitness (inf, inf) hash f1c2f0deeb02cf53f438f4ef5b3b44f978a8d9eac497034460e985f7f37f330d and age 0
Already computed SpectralClustering(StandardNorm(ARG0, TriState.STREAM_TO_STREAM, passAxis(passAxis(passAxis(Axis.AXIS_0)))), lessThan(myFloatIntAdd(myFloatIntDiv(myFloatSub(0.1, 0.1), passInt(10)), notEqual(-2.4033966752898586, 0.01)), myFloatSub(0.01, myIntToFloat(lessThanOrEqual(10.0, 100.0)))), 0.1) with fitness (inf, inf) hash 0693201780a7708e679ea3a082313311559c28f5d3c94a33f0a43b2a98b45100 and age 0
Already computed NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 95) with fitness (0.046006590302840156, 800001.0) hash 5b4125bef33d66cd47741754dd929438ae170fe3ce2bc710756e786888187f78 and age 1.0
Already computed myIfThenElse(SepDetectionWindow(WindowGaussian(ConvertToCounts(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), ifThenElseFloat(falseBool, 1.0, 1.0)), myNot(myNot(falseBool)), notEqual(myFloatIntDiv(1.0, falseBool), myFloatAdd(0.9353847326723654, -1.1692407991663014)), myFloatMult(myFloatIntAdd(-4.457970858025218, 9), ifThenElseFloat(trueBool, 0.01, 0.01))), MeanWithHole(EmadeDataNumpyMultiplyFloat(MinimumToZero(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatSub(1.0, 0.1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), lessThanOrEqual(myFloatAdd(1.0, 1.4831844220014245), myFloatMult(-3.291612748715375, 0.01)), myFloatToInt(myFloatIntDiv(0.01, 5))), WindowKaiser(ToFloatNorm(RandomShuffle(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatIntDiv(myFloatIntSub(0.01, 15), greaterThanEqual(10.0, 10.0)), falseBool), passTriState(TriState.STREAM_TO_STREAM), TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, 150) with fitness (inf, inf) hash cb6a426feb8eb77eeebbd0cdb61997bed22d8ecdbdd975e2ad4c6d07fb2fe9e7 and age 0
Already computed LabelObjects(MyDiff(MatchedFiltering(mySelKBest(ARG0, TriState.FEATURES_TO_FEATURES, 150, 128), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myIntMult(3591, 10)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0)))) with fitness (inf, inf) hash cff6467c2c86b4bd6648f357d2a95b7862365bb0ee722cf5da3956efbca72912 and age 0
Already computed MatchedFiltering(ContourMask(HighpassFourierEllipsoid(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, trueBool), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myIntAdd(ifThenElseBool(falseBool, trueBool, trueBool), myIntAdd(255, 0))) with fitness (inf, inf) hash 13d931dac480b7029c46ea3fd0e0fbc9be57aafa55b9943e0d97ffdce8b7fb44 and age 0
Offspring has 128 elements before I remove those that are already being processed
Removing hashes:
[]
Removed 0 individuals that were already being processed left with 128
After matings and mutations 127 out of 128 are unique
Additionally 128 individuals are unique in memory
And 494 mains and adfs are unique
Adding 14 to evaluated offspring list of length 0
Making length 14
Recomputing fitnesses for 114 offspring
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:23:31.604849
After Uneval Count Query | 2020-08-22 21:23:31.650920
136 elements remaining in queue, query complete in 0.05 seconds
Starting cache optimization
Finished cache optimization
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:23:31.660317
After Uneval Count Query | 2020-08-22 21:23:31.664451
135 elements remaining in queue, query complete in 0.00 seconds
Good night
Good morning
Starting Gen 2
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:23:41.675385
After Uneval Count Query | 2020-08-22 21:23:41.680733
112 elements remaining in queue, query complete in 0.01 seconds
Good night
Good morning
Starting Gen 2
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:23:51.691180
After Uneval Count Query | 2020-08-22 21:23:51.695781
112 elements remaining in queue, query complete in 0.00 seconds
Good night
Good morning
Starting Gen 2
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:24:01.706845
After Uneval Count Query | 2020-08-22 21:24:01.815098
72 elements remaining in queue, query complete in 0.11 seconds
Good night
Good morning
Starting Gen 2
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:24:11.826150
After Uneval Count Query | 2020-08-22 21:24:11.830590
62 elements remaining in queue, query complete in 0.00 seconds
Good night
Good morning
Starting Gen 2
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:24:21.841158
After Uneval Count Query | 2020-08-22 21:24:21.868638
61 elements remaining in queue, query complete in 0.03 seconds
Good night
Good morning
Starting Gen 2
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:24:31.879699
After Uneval Count Query | 2020-08-22 21:24:31.979424
45 elements remaining in queue, query complete in 0.10 seconds
Good night
Good morning
Starting Gen 2
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:24:41.990414
After Uneval Count Query | 2020-08-22 21:24:41.994775
45 elements remaining in queue, query complete in 0.00 seconds
Good night
Good morning
Starting Gen 2
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:24:52.005178
After Uneval Count Query | 2020-08-22 21:24:52.010782
35 elements remaining in queue, query complete in 0.01 seconds
Good night
Good morning
Starting Gen 2
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:25:02.021749
After Uneval Count Query | 2020-08-22 21:25:02.143428
22 elements remaining in queue, query complete in 0.12 seconds
Updating population
Passed parents update
Before Recent Evaluated Query | 2020-08-22 21:25:02.143573
After Recent Evaluated Query | 2020-08-22 21:25:02.213371
TimeStamp | 2020-08-22 21:25:02.213967
Received: LabelObjects(MyDiff(MatchedFiltering(mySelKBest(ARG0, TriState.FEATURES_TO_FEATURES, 150, 128), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myIntMult(3591, 10)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))))
	With Hash cff6467c2c86b4bd6648f357d2a95b7862365bb0ee722cf5da3956efbca72912
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.214219
Received: SetToZeroIf>Data&Factor(ContoursMaxLength(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 8), Cv2Add(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.AXIS_1), TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_0), myFloatIntSub(10.0, 4666))
	With Hash f994a3455bb29bed5c42323b9b2c7aa8c909eb7edba06897a26adb5928c12bbe
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.214378
Received: FractionTriple(RandomUniform(ConvertBW(Learner(SetToZeroIf<Data&Factor(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_1, 255), ModifyLearnerFloat(LearnerType('KNN', {'K': 3, 'weights': 0}), 0.01, falseBool), ModifyEnsembleInt(EnsembleType('GRID', None), 255, 2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myNot(lessThan(myFloatSub(100.0, 10.0), ifThenElseFloat(trueBool, 1.0, 0.01))), notEqual(myFloatIntSub(myFloatAdd(100.0, 1.0), myIntSub(9, 6)), myFloatMult(myFloatSub(0.1, 0.1), myFloatIntMult(0.01, 100)))), EmadeDataNumpyMultiplyFloat(MyBinaryThreshold(BitwiseOr(AdjustConstrastLog(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 100.0), GradientWeighted(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 1, 1.0, 100.0), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatSub(myIntToFloat(97), myFloatIntAdd(100.0, 29))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatIntAdd(myIntToFloat(greaterThan(0.01, 100.0)), passInt(myIntMult(11, 150)))), StdDeviationHole(MorphOpenCross(MorphCloseCross(MorphBlackhatRect(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 50, 10), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), greaterThanEqual(0.1, 0.1), myFloatToInt(-1.0399429945978267)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passBool(greaterThanEqual(1.8066201072486088, 100.0)), passBool(equal(10.0, -4.261701765953674))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myAnd(lessThan(myFloatIntDiv(-4.845624744776469, 10), myIntToFloat(3)), myNot(greaterThanEqual(0.1, 0.01))), myIntSub(greaterThanEqual(myFloatIntMult(1.5849853581349578, 8), myFloatMult(0.1, 0.01)), myAnd(passBool(falseBool), notEqual(0.01, 10.0)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), myIntAdd(myOr(lessThan(ifThenElseFloat(trueBool, -4.885915295047991, 100.0), myFloatIntSub(100.0, 10)), myAnd(myOr(falseBool, falseBool), myAnd(falseBool, trueBool))), myIntDiv(myAnd(equal(10.0, 0.9737817647001012), notEqual(10.0, 0.01)), myFloatToInt(myFloatAdd(1.0, 0.13351988622046562)))))
	With Hash 669928e1dc12235c41866fd2e047b8dbd74a66f5a991e8299d847e97a5bf1ef7
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.215144
Received: ThresholdBinaryInverseMask(ifThenElseDataPair(equal(10.0, 10.0), EmadeDataNumpyMultiplyPair(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.FULL, Axis.AXIS_2), LowpassFilterUniform(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, trueBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), ifThenElseFloat(ifThenElseBool(falseBool, trueBool, trueBool), myFloatMult(0.1, 0.01), myFloatIntMult(-3.2750096983702024, 65)))
	With Hash 67a78ba72d5c58fe905ab67bcc7d061255f0305d41ca495ad18c6ad4b7ad26a4
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.215328
Received: ThresholdBinaryInverse(ThresholdBinaryInverse(MinimumToZero(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myFloatIntMult(1.0, 4)), passTriState(TriState.STREAM_TO_STREAM), Axis.AXIS_2, myFloatIntDiv(1.0, passInt(10)))
	With Hash 18abb873e1f169bc49ddb4709b1cbc9a2c42d93e83c4c29f9e2e6c054be70f11
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.215460
Received: ContourMaskMaxSolidity(WindowTurkey(MatchedFiltering(SavitzkyGolayFilter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 87, 5, 2), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myAnd(falseBool, trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myFloatMult(myFloatAdd(-0.35649298395985163, 1.0), myIntToFloat(4))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myFloatMult(myFloatIntMult(ifThenElseFloat(falseBool, -3.2065381108254987, 1.0), myOr(falseBool, trueBool)), passFloat(myFloatIntMult(0.01, 128))))
	With Hash 57960d2bf383faee9ac330f4a6824184044fef559d9f51b6eb37e3fee730bd37
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.215675
Received: birch_clustering(WindowBlackman(ArcTangent(EmadeDataMultiplyInt(MyDWT(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 61), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), greaterThan(0.01, 0.1)), TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myFloatAdd(ifThenElseFloat(greaterThanEqual(10.0, 100.0), myFloatMult(0.1, 1.0), myFloatSub(0.1, 0.1)), myFloatSub(myFloatDiv(0.1, 0.1), myIntToFloat(6)))), myFloatDiv(myIntToFloat(greaterThanEqual(myFloatDiv(0.1, 1.0), passFloat(0.01))), myFloatIntSub(myFloatIntMult(myIntToFloat(6), lessThanOrEqual(-0.051486290484572095, -1.769474421690055)), myFloatToInt(myIntToFloat(55)))), myOr(trueBool, myOr(greaterThan(myFloatIntMult(1.0, 6), myFloatIntSub(0.01, 1)), lessThan(myFloatSub(0.1, 0.01), myFloatIntMult(0.1, 8)))), passInt(passInt(greaterThanEqual(100.0, myFloatSub(1.0, 0.01)))))
	With Hash b45cbe07ead3dd8a35436e364a7a71fc018a589b0592ebf992c7dd3020308a8e
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.215998
Received: MaxLoc(BitwiseAnd(ContourMaskRangeLength(Round(StdDeviation(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 9), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), Axis.AXIS_0, equal(passFloat(10.0), myFloatDiv(0.01, 0.2274954885701046)), passBool(ifThenElseBool(falseBool, trueBool, falseBool))), ThresholdBinary(MyCumSum(LocalPoolingMax(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 6), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), 7), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), 100.0, myOr(greaterThanEqual(-4.171750319883218, 0.01), notEqual(10.0, 1.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), passAxis(passAxis(passAxis(Axis.AXIS_0)))), TriState.FEATURES_TO_FEATURES, passAxis(passAxis(passAxis(passAxis(Axis.FULL)))))
	With Hash 2b8c06ac03a62fe975b7a11559bffd3aeaff2a2ed48ca654d54abc0b3033a2a6
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.216308
Received: mySelKBest(MorphGradientEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 4, 6), passTriState(TriState.FEATURES_TO_FEATURES), greaterThan(0.1, 100.0), lessThanOrEqual(100.0, 100.0))
	With Hash f1c2f0deeb02cf53f438f4ef5b3b44f978a8d9eac497034460e985f7f37f330d
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.216424
Received: SpectralClustering(StandardNorm(ARG0, TriState.STREAM_TO_STREAM, passAxis(passAxis(passAxis(Axis.AXIS_0)))), lessThan(myFloatIntAdd(myFloatIntDiv(myFloatSub(0.1, 0.1), passInt(10)), notEqual(-2.4033966752898586, 0.01)), myFloatSub(0.01, myIntToFloat(lessThanOrEqual(10.0, 100.0)))), 0.1)
	With Hash 0693201780a7708e679ea3a082313311559c28f5d3c94a33f0a43b2a98b45100
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.216565
Received: NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 95)
	With Hash 5b4125bef33d66cd47741754dd929438ae170fe3ce2bc710756e786888187f78
	With Fitnesses: (0.046006590302840156, 800001.0)
	With Age: 1.0
TimeStamp | 2020-08-22 21:25:02.216662
Received: myIfThenElse(SepDetectionWindow(WindowGaussian(ConvertToCounts(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), ifThenElseFloat(falseBool, 1.0, 1.0)), myNot(myNot(falseBool)), notEqual(myFloatIntDiv(1.0, falseBool), myFloatAdd(0.9353847326723654, -1.1692407991663014)), myFloatMult(myFloatIntAdd(-4.457970858025218, 9), ifThenElseFloat(trueBool, 0.01, 0.01))), MeanWithHole(EmadeDataNumpyMultiplyFloat(MinimumToZero(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatSub(1.0, 0.1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), lessThanOrEqual(myFloatAdd(1.0, 1.4831844220014245), myFloatMult(-3.291612748715375, 0.01)), myFloatToInt(myFloatIntDiv(0.01, 5))), WindowKaiser(ToFloatNorm(RandomShuffle(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatIntDiv(myFloatIntSub(0.01, 15), greaterThanEqual(10.0, 10.0)), falseBool), passTriState(TriState.STREAM_TO_STREAM), TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, 150)
	With Hash cb6a426feb8eb77eeebbd0cdb61997bed22d8ecdbdd975e2ad4c6d07fb2fe9e7
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.217018
Received: LabelObjects(MyDiff(MatchedFiltering(mySelKBest(ARG0, TriState.FEATURES_TO_FEATURES, 150, 128), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myIntMult(3591, 10)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))))
	With Hash cff6467c2c86b4bd6648f357d2a95b7862365bb0ee722cf5da3956efbca72912
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.217168
Received: MatchedFiltering(ContourMask(HighpassFourierEllipsoid(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, trueBool), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myIntAdd(ifThenElseBool(falseBool, trueBool, trueBool), myIntAdd(255, 0)))
	With Hash 13d931dac480b7029c46ea3fd0e0fbc9be57aafa55b9943e0d97ffdce8b7fb44
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.217302
Received: HighpassFourierGaussian(CCorrObjectFilter(ARG0, mySelFdr(ARG0, passTriState(TriState.STREAM_TO_STREAM), myAnd(lessThanOrEqual(-0.7762674365595599, 0.1), greaterThanEqual(-0.7837111049192211, 4.164487072958346)), myFloatIntMult(myFloatSub(1.0, -3.0158739521276168), equal(4.4312049661198465, 100.0))), equal(myFloatIntSub(100.0, 7), myFloatIntMult(myFloatIntSub(10.0, 10), ifThenElseBool(falseBool, falseBool, falseBool))), myFloatIntSub(ifThenElseFloat(trueBool, ifThenElseFloat(trueBool, 0.1, 0.01), myFloatIntSub(100.0, -1)), myIntMult(6, myIntMult(32, 85)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), myAnd(lessThan(ifThenElseFloat(equal(100.0, 100.0), myFloatMult(10.0, 0.01), myFloatIntAdd(100.0, 0)), ifThenElseFloat(lessThanOrEqual(100.0, 0.01), myFloatDiv(0.1, 10.0), myFloatIntMult(1.0, 255))), falseBool))
	With Hash 023d1518a5df45b704b6a035699fa9168603978534fde89f00f0c1beb1b1a171
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.217589
Received: Select1D(mySelFpr(ThresholdBinaryInverse(Correlation(ScalarSubtract(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 10.0), NNLearner(ARG0, EmbeddingLayer(6, ARG0, fasttextWeights, InputLayer(ARG0)), 10), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), 1.0), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), greaterThanEqual(passFloat(myFloatIntDiv(10.0, 1)), 10.0), myFloatSub(myFloatDiv(myIntToFloat(4864), myFloatSub(10.0, 0.01)), myIntToFloat(myIntMult(55, 3)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), lessThan(myIntToFloat(greaterThan(myFloatSub(10.0, 3.4547949746613256), myFloatIntMult(100.0, 6))), myFloatSub(myFloatIntMult(myFloatMult(0.01, 1.0), lessThanOrEqual(0.1, 10.0)), myFloatDiv(myFloatAdd(100.0, 1.0), passFloat(1.0)))), myIntAdd(myNot(trueBool), notEqual(myFloatIntDiv(myFloatIntDiv(0.01, 5), lessThanOrEqual(1.0, -2.1769153148881317)), passFloat(myFloatIntAdd(10.0, 21)))))
	With Hash 026171ee955ccb4dcbd8601d8911805a2568354f7ac73fc3e1469b0a6f535a08
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.217934
Received: MultiplyTransposed(MorphCloseCross(Cv2Max(RXAnomalyDetector(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 1.0), NumNamedEntities(ARG0), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_0)), TriState.FEATURES_TO_FEATURES, passAxis(passAxis(Axis.AXIS_0)), greaterThan(myFloatSub(10.0, 1.421749024510163), ifThenElseFloat(falseBool, 100.0, 1.0)), passBool(myNot(falseBool))), TriState.STREAM_TO_STREAM, passAxis(passAxis(passAxis(Axis.FULL))), lessThanOrEqual(ifThenElseFloat(falseBool, myFloatSub(1.0, 3.385892724674113), 0.1), myFloatIntAdd(myFloatIntMult(1.0, 150), greaterThan(100.0, 100.0))))
	With Hash 0687ec198c7c78694bffc42b973bea0190ebc3db90da33af22a8ae9e2d083c06
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.218165
Received: SetToZeroIf>Data&Factor(EmadeDataSubtractInt(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 128), ContoursMaxArea(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 92), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_2), myFloatDiv(1.0, 100.0))
	With Hash 08cd93b3e34bdcbc1e50a45a158c300d77c1ee532968dcebbf14a3c10e633657
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.218297
Received: EmadeDataMultiplyFloat(EmadeDataDivideFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 100.0), TriState.STREAM_TO_STREAM, Axis.AXIS_2, passFloat(100.0))
	With Hash 09a03ae4c3c3845de63cf8c991bf3117ca904ed268b4ce187d473c25ed410050
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.218390
Received: ContourMaskMinExtentEnclosingCircle(EmadeDataMultiplyFloat(MultiplyTransposed(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, trueBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passFloat(0.1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myFloatDiv(myFloatAdd(0.1, 1.7935651108603787), myIntToFloat(82)))
	With Hash 0a3d635d0f6a492e5c33b4a7521e95bf3905946b790acf04233b234dde8bae0b
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.218545
Received: Prerejection(ScalarDivide(Sine(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myIntToFloat(9729)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myOr(lessThan(-3.3131528187125117, 0.1), myOr(trueBool, trueBool)), myFloatToInt(myFloatSub(0.01, 10.0)), myFloatIntAdd(ifThenElseFloat(falseBool, 0.1, 100.0), myIntAdd(1, 6)))
	With Hash 0c3d31a7c4e88bb6c54a595ce3aaba1384793b2daaff7eab3f81ba79927cc6bd
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.218716
Received: MorphDilateEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 128, falseBool, 100)
	With Hash 0e7187f72f48150c408d88992be80becbf5d530800515e0598e8b46518870535
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.218799
Received: Cosine(HighpassFourierShift(Sine(HighpassFourierShift(MyCumProd(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 6), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), myAnd(falseBool, falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), equal(myFloatIntAdd(ifThenElseFloat(trueBool, 0.01, 0.1), notEqual(100.0, 0.01)), myFloatDiv(myFloatIntAdd(100.0, 100), myIntToFloat(1)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))))
	With Hash 0f0c88d266cc61f9b6c01af31e210c7ae098bf4252d9e39811b469e17ecb5c71
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.219037
Received: rmsHole(ScalarSubtract(CutDataLead(ContourMaskMaxExtentEnclosingCircle(WindowLanczos(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), myFloatIntSub(1.0, trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThanOrEqual(2.7237265080745052, myFloatMult(1.0, 3.2705202765994237))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myFloatIntDiv(myFloatIntMult(myFloatSub(0.1, 0.01), myNot(falseBool)), myIntMult(greaterThanEqual(10.0, 0.01), lessThanOrEqual(0.01, 100.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), passBool(greaterThanEqual(myIntToFloat(greaterThan(1.0, 10.0)), 10.0)), greaterThan(myFloatSub(0.05360539312707324, myFloatDiv(myFloatSub(10.0, 0.01), myFloatIntAdd(100.0, trueBool))), myFloatIntAdd(myFloatIntMult(myFloatDiv(10.0, 0.1), myAnd(falseBool, trueBool)), lessThanOrEqual(myFloatDiv(0.1, 0.01), passFloat(0.01)))))
	With Hash 0fe4a0aaa6b73139bd908dbb55ad09cbe2ce382b8624db681761380fdcbb9867
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.219333
Received: Round(Cv2LessThan(FractionDouble(GaussianFilter(MyAutoCorr(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myFloatIntDiv(1.0, trueBool)), GaussianPeakEM(Round(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.AXIS_2)), passInt(myOr(falseBool, falseBool))), EmadeDataNumpyMultiplyPair(ConvertBW(MorphOpenEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 255, 8), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1)), ContoursAll(Stemmatizer(MyDCT(EmadeDataAddFloat(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 1.0792845646876845), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), myIntDiv(2, 10), myAnd(trueBool, falseBool)), 50, 3), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), passAxis(passAxis(passAxis(Axis.FULL)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))))
	With Hash 10e468876e1631c5c4d4fcc255a0849f9c83b035e091a8c0cb3bc8470ab49b9d
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.219697
Received: Hog(ContourMaskMinArea(EmadeDataMultiplyInt(ARG0, passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myFloatToInt(myFloatMult(1.0, 0.1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myFloatIntSub(passFloat(myFloatIntMult(0.1, falseBool)), myIntMult(myAnd(falseBool, trueBool), greaterThanEqual(10.0, 0.1)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), notEqual(passFloat(myFloatSub(ifThenElseFloat(falseBool, 100.0, 100.0), myFloatSub(-2.4732734177376594, 100.0))), passFloat(ifThenElseFloat(lessThan(2.8231043353087752, 0.1), myFloatIntDiv(0.01, 150), myFloatSub(10.0, 0.01)))), myOr(lessThanOrEqual(myFloatDiv(myFloatMult(10.0, 0.1), myFloatIntMult(1.0, 255)), ifThenElseFloat(notEqual(10.0, 1.0), myFloatIntSub(10.0, 2), myFloatIntMult(1.0, falseBool))), greaterThan(myFloatAdd(myFloatSub(-0.15203650318878204, 0.01), myFloatDiv(0.01, 100.0)), ifThenElseFloat(greaterThan(0.1, 4.422632359897774), myFloatIntDiv(0.01, 0), passFloat(10.0)))), myIntAdd(lessThan(myFloatDiv(myFloatIntMult(0.1, 0), ifThenElseFloat(trueBool, 1.0, 100.0)), passFloat(myFloatSub(-1.6543005146323364, -0.0877611542883514))), myIntSub(lessThanOrEqual(myFloatDiv(0.01, 0.01), myFloatDiv(0.01, 0.1)), myFloatToInt(myFloatMult(0.0298962306284265, 0.01)))), lessThan(myFloatIntSub(myFloatSub(ifThenElseFloat(trueBool, 1.0, 0.1), myFloatSub(10.0, 100.0)), passBool(myNot(falseBool))), myFloatIntAdd(myIntToFloat(lessThanOrEqual(1.0, 100.0)), equal(myFloatDiv(0.1, 10.0), myFloatDiv(0.01, 100.0)))))
	With Hash 13e26cb100e3b4ea9f4d17edc53f669c94c757473f5bbd9e718bd93593b370b6
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.220158
Received: SubtractSaturate(ThresholdBinaryMax(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 35, 10.0), BackgroundSubtraction(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), TriState.STREAM_TO_FEATURES, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0))
	With Hash 15424776b14bb47040fd7376ccf069668b5139ca34012e191d8a29e1b17e2d6d
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.220276
Received: Learner(WienerFilter(LocalPoolingMean(FractionTriple(MorphOpenEllipse(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 50, 1), LinearPredictiveCoding(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 255), SpectralClustering(ARG0, 8277, 10.0), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_0), greaterThan(10.0, 0.01)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), notEqual(myFloatIntDiv(10.0, 7), myFloatIntSub(10.0, 150))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1)))), ModifyLearnerFloat(ModifyLearnerList(ModifyLearnerFloat(ModifyLearnerFloat(LearnerType('LIGHTGBM', {'max_depth': -1, 'learning_rate': 0.1, 'boosting_type': 0, 'num_leaves': 31}), -0.6519627058835358, falseBool), myFloatIntAdd(1.0, -4), myIntDiv(10, 128)), passList(myListAppend(EmbeddingLayer(falseBool, ARG0, glorotUniformWeights, InputLayer(ARG0)), EmbeddingLayer(9, ARG0, fasttextWeights, InputLayer(ARG0)))), notEqual(passFloat(10.0), myFloatDiv(0.1, -3.8752023772323687))), myFloatIntSub(myFloatMult(myFloatDiv(-1.8408536572696121, 0.01), ifThenElseFloat(falseBool, 1.0, 1.0)), passInt(myAnd(trueBool, trueBool))), ifThenElseBool(lessThan(myFloatSub(10.0, 1.0), myFloatSub(10.0, 100.0)), lessThan(myFloatSub(100.0, 0.1), myFloatMult(100.0, 100.0)), notEqual(myFloatIntMult(1.0, 32), myIntToFloat(0)))), ModifyEnsembleInt(ModifyEnsembleFloat(ModifyEnsembleFloat(ModifyEnsembleFloat(EnsembleType('BAGGED', None), 0.1, 10), myFloatMult(1.0, 100.0), ifThenElseBool(trueBool, falseBool, falseBool)), myFloatMult(myIntToFloat(0), myFloatIntDiv(-0.23376468561784414, 2)), greaterThan(myFloatSub(0.01, 100.0), myFloatIntSub(0.1, 6))), notEqual(passFloat(myFloatIntAdd(1.0, 255)), myFloatIntDiv(myFloatIntAdd(100.0, 0), myFloatToInt(1.0))), lessThan(myFloatIntMult(passFloat(0.1), myFloatToInt(0.1)), myFloatIntMult(myFloatSub(100.0, 0.01), ifThenElseBool(falseBool, falseBool, falseBool)))))
	With Hash 1721eef67e50c299d02cc36111abfafd1b77239b7a9d511f4d2a5aef08325a14
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.220805
Received: MySnapshot(EmadeDataDivideInt(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, falseBool), ContoursMaxArea(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 5), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_2), lessThan(0.01, -4.50338460590796))
	With Hash 1aa16a0923315a45529e843ca92c62b57970852c3ffdceebe2bb4ad7218abc2f
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.220937
Received: MinimumFilter(ARG0, passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), lessThanOrEqual(ifThenElseFloat(passBool(falseBool), myFloatDiv(myFloatAdd(-1.9375893314771728, 10.0), myFloatDiv(100.0, 0.1)), myFloatMult(myFloatIntMult(0.01, trueBool), myFloatIntDiv(0.01, 0))), myFloatIntMult(myFloatSub(ifThenElseFloat(falseBool, 100.0, 100.0), myFloatIntAdd(1.0, 6)), 64)), myFloatMult(myFloatIntMult(0.01, myIntAdd(1, greaterThan(10.0, 1.0))), passFloat(myFloatIntSub(myFloatIntSub(10.0, 100), greaterThanEqual(10.0, 100.0)))))
	With Hash 1caa3773f266b63100c23bbb3ab920f87fbe4b6da15dacf2e764fcff67670bfe
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.221153
Received: Cv2Sqrt(ImageAlignmentECC(myIfThenElse(RandomUniform(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, -4, 4), Cv2iDCT(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1), LowpassFourierGaussian(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 255), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passInt(100)), ToFloatNorm(ArcCosine(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_2)), myIntSub(lessThanOrEqual(1.0, 10.0), greaterThan(1.0, 0.01)), myFloatIntDiv(passFloat(-1.1951896566834708), myIntMult(0, falseBool)), myAnd(equal(100.0, 0.1), ifThenElseBool(falseBool, falseBool, falseBool)), myOr(greaterThan(1.0, 0.01), notEqual(1.0, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))))
	With Hash 28cd22d104fc1657b28af59e5469b47032e8d3d358dbe90691f8b3e9b4e92ffb
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.221437
Received: LowpassFilterEllipsoid(ToFloatNorm(WindowCosine(MorphTophatCross(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 55, 6), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(Axis.AXIS_1), equal(myFloatIntDiv(myFloatIntDiv(0.01, 4), equal(-0.6302238586548494, 0.1)), ifThenElseFloat(notEqual(0.1, -1.4177748689760783), 0.01, myFloatIntSub(-3.7981072633601256, 1))))
	With Hash 28ceee1e00f96188e55a9e9f5cc7222f3d4e36f3ab30fa893ed657e8afd3150a
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.221613
Received: BackgroundSubtraction(ARG0, passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)))
	With Hash 2f44dd310729ed3aecdb4e37d7597c9918d0fbb970e5c1510838b1f453f83b56
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.221694
Received: ImageAlignmentECC(Sentiment(ContourMaskMinAspectRatio(agglomerative_clustering(ARG0, 46), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myFloatIntAdd(-3.287870676610547, 0)), passBool(passBool(trueBool))), Log(BitwiseOr(ARG0, HighpassIrst(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2))), passAxis(Axis.FULL), equal(myFloatMult(passFloat(0.01), ifThenElseFloat(falseBool, 1.0, 1.0)), myFloatIntDiv(-2.5975951472094327, equal(0.1, 1.0))), myFloatIntAdd(myFloatIntMult(myFloatAdd(10.0, -1.7830310615497993), myOr(falseBool, falseBool)), notEqual(myIntToFloat(150), 10.0)), myIntAdd(myIntMult(myNot(trueBool), myIntMult(55, 32)), myOr(ifThenElseBool(trueBool, falseBool, falseBool), equal(1.0, 1.0))), 32)
	With Hash 2f67d42e4a804b1e37906a432c9a0cf5befec84d0253f9f3d754cd8797d8f337
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.222007
Received: ThresholdToZeroFloat(CenterOfMass(ARG0, passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), myFloatMult(myIntToFloat(passBool(lessThan(0.1, 100.0))), 100.0))
	With Hash 318f0ffe07b2a74eac4c606a2d844d17349046d362627822fea3c1500f734c2a
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.222145
Received: MaxLoc(Rebase(LognormalLM(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)))
	With Hash 352e75969a39aacd6c6b282eef0cefa02effcf7b1748f246268574475d311100
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.222249
Received: MorphCloseCross(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 1, 64)
	With Hash 372f972629e6765e875b8c9cabfda4ebb2188fb51c4fa8849c0f2b115cd6a0b3
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.222324
Received: WindowBartlett(MorphOpenRect(CenterOfMass(RandomNormal(WindowBackmanNuttall(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passBool(trueBool), myIntSub(6, 1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), notEqual(0.01, myFloatAdd(myFloatAdd(1.0, 10.0), myFloatSub(1.0, 0.01))), myIntMult(myFloatToInt(myFloatIntSub(100.0, 7)), myFloatToInt(myFloatDiv(1.0, 10.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))))
	With Hash 380440b4ab85ffb1013d041e8d83106d26bd6ab262e0051a627faf5b4ba82093
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.222538
Received: Cv2GreaterThanOrEqual(MeanFilter(EqualizeDisk(MorphBlackhatRect(HighpassLaplacian(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, falseBool, 64, 255), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myIntAdd(10, falseBool), passInt(7)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myIntAdd(myAnd(trueBool, falseBool), lessThan(1.0, 1.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatToInt(myFloatIntSub(myFloatIntDiv(0.968110984050111, 76), notEqual(2.0982900695199804, 100.0)))), ContourMaskRangeExtent(EmadeDataAddPairTriple(LowpassFilterAverage(MyAverager(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 7), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), notEqual(1.0, 0.01)), Cv2Log(HighpassFourierUniform(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 3), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), SpectralClustering(BitwiseXOr(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_1), passInt(trueBool), passFloat(1.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myIntAdd(myIntMult(passBool(falseBool), notEqual(1.0, 0.6386540724958039)), lessThanOrEqual(myFloatAdd(100.0, 100.0), myFloatDiv(100.0, 100.0))), notEqual(myFloatAdd(myFloatDiv(0.01, 10.0), myFloatSub(-4.557037013812614, 3.7273031525989726)), myFloatIntSub(myFloatMult(0.01, 0.1), myNot(trueBool)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))))
	With Hash 38cf6f0d947d3561148b31bef4f92864baf4cab4503e4877c5f70123943132f5
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.223046
Received: StdDeviationHoleCustom(WindowFlatTop(Cv2RMS(MyCumSum(Cv2LessThan(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.FULL, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), myAnd(falseBool, trueBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myFloatToInt(myFloatIntSub(100.0, 3))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL)))), LinearPredictiveCoding(SepDetectionWindow(mySelPercentile(LognormalLM(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), myIntMult(5, 3), myIntAdd(64, 100)), greaterThan(myIntToFloat(20), myFloatDiv(100.0, 100.0)), passInt(myIntDiv(64, 55)), myFloatDiv(ifThenElseFloat(trueBool, -1.864224535664162, 100.0), myIntToFloat(7))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), ifThenElseBool(equal(myFloatMult(100.0, 10.0), myFloatIntDiv(-1.914796249188, -10)), equal(myFloatIntSub(100.0, 8), myFloatSub(10.0, 10.0)), passBool(lessThanOrEqual(100.0, 1.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), passBool(lessThanOrEqual(myFloatIntSub(myIntToFloat(7), myAnd(trueBool, falseBool)), myIntToFloat(myIntMult(1, 50)))), lessThan(myFloatIntAdd(myFloatMult(myFloatDiv(10.0, 0.01), myFloatAdd(1.0, 3.054370444051859)), myAnd(myNot(falseBool), lessThan(0.01, 3.6318292114161235))), myFloatMult(myFloatIntMult(myFloatIntMult(1.0, 8), myIntDiv(5, 9)), ifThenElseFloat(notEqual(0.01, 0.01), myFloatIntDiv(100.0, 64), passFloat(10.0)))))
	With Hash 39f23610a4beb207ad8a13355958f90da6ec6290d9d9248277fc36e68d24e668
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.223515
Received: SelectRange(HighpassFourierGaussian(birch_clustering(MyAutoCorr(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), myFloatIntMult(-0.7011652898121898, 6), myNot(trueBool), myOr(falseBool, trueBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), greaterThan(myIntToFloat(falseBool), myFloatAdd(0.9330117075429358, -1.8017337169583056))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), greaterThanEqual(myFloatMult(myIntToFloat(32), myFloatSub(100.0, 0.1)), myFloatIntDiv(myFloatMult(0.01, 0.33893679283958456), passBool(trueBool))), lessThan(myFloatDiv(myFloatIntAdd(0.1, 4), myFloatIntSub(1.0, trueBool)), myFloatIntDiv(myFloatIntSub(100.0, 6), myAnd(trueBool, trueBool))))
	With Hash 3a45899dbb2433e52b2c54a0f44db82d7f98e9746b2564fda63601ee2d217f4b
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.223745
Received: LocalPoolingMean(ContourMaskRangeExtent(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 10, 7), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), greaterThan(2.4325666852482506, 1.0))
	With Hash 3e7a819d85ca36751c6bea5c811b546990b9e4b5831490aa60e9efef232a2af4
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.223847
Received: ConvolveChannelMerge(ScalarMin(HighpassSobelDerivative(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, falseBool, 1, 50, 6, 100), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myIntDiv(10, 55)), myOr(passBool(trueBool), greaterThan(0.1, 10.0)))
	With Hash 3f5c650f35cee05b71d603774ae272ccb35617ab2bbadbe9efc75f38ea41d3eb
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.223981
Received: GradientMagnitude(WindowBackmanNuttall(LocalPoolingMean(StdDeviation(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 5), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), lessThanOrEqual(0.1, 1.0)), TriState.STREAM_TO_STREAM, passAxis(passAxis(Axis.AXIS_0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), Axis.AXIS_1, myNot(myNot(greaterThan(0.01, 0.1))))
	With Hash 3f85386236bd399e19a73d38c9dac619d034147d46b2ca42d6d923f5c50dfebd
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.224123
Received: LowpassFilterAverage(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, falseBool)
	With Hash 3fbacd13ab15c30ab1baf678fc94bd22350320c492efa84ce811fd240941cb24
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.224196
Received: SpectralFilter(ContourMaskRangeEquDiameter(MorphOpenCross(BayesMulti(RandomUniform(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 8, 6)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), greaterThan(myFloatAdd(1.0681860033116575, 1.0), passFloat(0.1)), lessThan(myFloatIntSub(0.1, 0), myFloatIntAdd(100.0, 2))), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(passAxis(passAxis(Axis.AXIS_0))), 10, equal(myFloatSub(myFloatDiv(0.1, 0.1), myFloatIntDiv(0.01, 6)), myFloatIntAdd(10.0, passInt(10)))), MaximumWindow(ARG0, myIntAdd(notEqual(myFloatIntMult(1.0, 128), myFloatDiv(0.1, 1.0)), myIntMult(myAnd(falseBool, falseBool), myFloatToInt(0.01))), ifThenElseBool(notEqual(myFloatSub(0.01, 1.0), myFloatSub(10.0, 0.01)), lessThan(myFloatIntAdd(0.1, 150), myFloatIntSub(10.0, 55)), equal(ifThenElseFloat(trueBool, -2.897542497291231, 0.1), myFloatSub(100.0, 10.0))), passFloat(myIntToFloat(greaterThan(1.0, 1.0)))), GaussianFilter(RandomNormal(AdjustConstrastLog(ARG0, passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myFloatDiv(100.0, 4.682150619736657)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), 9, myIntSub(notEqual(1.0, 0.10412231354917001), passInt(7))), TriState.FEATURES_TO_FEATURES, passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatIntDiv(4.115153324802437, passInt(myIntAdd(falseBool, 1)))), MyBinaryThreshold(AbsDiff(CopyStreamToTarget(ContourMaskMaxExtent(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 6715)), SkiMedianFilter(HashingVectorizer(ARG0, trueBool, trueBool, 2, 1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), myIntAdd(7, 5382)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatIntSub(myIntToFloat(myAnd(trueBool, falseBool)), greaterThanEqual(ifThenElseFloat(trueBool, 1.0, 1.0), myFloatIntMult(-1.7635954076824212, 1079)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), Axis.AXIS_1, passAxis(passAxis(passAxis(Axis.AXIS_0))), Axis.AXIS_1, passAxis(passAxis(Axis.AXIS_1)))
	With Hash 42fb5a47f160985b99a304f1a0efe905cde4d3dc58b31b478d492424c57e7af9
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.224799
Received: StdDeviation(ToUint8(ScalarAdd(SpectralFilter(ARG0, ARG0, ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, Axis.FULL, Axis.AXIS_2, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatIntAdd(-0.41058554298253114, 2)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), equal(myIntToFloat(equal(100.0, 1.0)), passFloat(myFloatIntDiv(0.1, 150))))
	With Hash 444c57bbe27e4d2636f9dbaffdbb069766ed389fead0d4ca68b75f9fd682ecec
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.225018
Received: HighpassFourierUniform(EmadeDataAddFloat(ContourMaskMinEnclosingCircle(myIfThenElse(ARG0, ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, 10), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatIntMult(0.01, 5)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myFloatDiv(ifThenElseFloat(trueBool, 4.645336856249276, 10.0), myFloatSub(10.0, 100.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatToInt(myFloatIntMult(myFloatIntSub(0.1, 3), greaterThan(0.01, 1.0))))
	With Hash 465cc362baa54ec1ab65bd77f28ffdfab94215cca48d5f5e67302f637c329809
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.225215
Received: NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(8, ARG0, randomUniformWeights, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))))), 93)
	With Hash 48aae9ab94be2a82367a9c1650f490d7ef9c19627f6b7cdac9ac07e18ea5a2dc
	With Fitnesses: (0.09565353836497725, 764102.0)
	With Age: 1.0
TimeStamp | 2020-08-22 21:25:02.225319
Received: Cv2LessThan(Cv2Divide(ContourMaskMaxArea(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 10.0), WindowBlackman(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 1.0), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_1)), Tangent(Cv2Divide(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), passAxis(passAxis(Axis.AXIS_2)))
	With Hash 4a5232396c22e3bd7c7e656b7ff0c660344f04b3f77d0ec53139af391053644e
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.225503
Received: NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(myIntMult(10, 7), ARG0, randomUniformWeights, InputLayer(ARG0))), 128)
	With Hash 4aac089c5b74589e524dd1f5d08ab5aba7033548db52db71b645c9f92c18a6d3
	With Fitnesses: (0.045096500863015865, 560001.0)
	With Age: 1.0
TimeStamp | 2020-08-22 21:25:02.225596
Received: MyCumSum(DogDetection(ContourMaskMaxExtent(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 9), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), ifThenElseFloat(falseBool, 0.1, 10.0), myFloatIntDiv(0.01, 1), ifThenElseFloat(falseBool, 2.988279126968651, 1.0), myFloatSub(100.0, -2.1863723273212154), myFloatIntMult(2.4959483071760946, 2)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), Axis.AXIS_1, myOr(ifThenElseBool(falseBool, falseBool, trueBool), lessThan(0.01, 0.1)))
	With Hash 4c43d59dc60c64006f7dc7a130312ff0813a9c40ad1d351c8ddf2bf01075435c
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.225766
Received: Cv2Max(MorphErosionEllipse(HighpassSobelDerivative(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 2, 255, 100, 3, -5), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), passInt(55), lessThanOrEqual(-4.804152804782879, 10.0), passInt(50)), Cv2iDCT(BayesMulti(ARG0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.AXIS_0)))
	With Hash 4fee821512b921060bb712c6f1259c839b25a4580876bb03e17c27afa3289241
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.225937
Received: ThresholdNLargestBinary(ARG0, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), greaterThanEqual(0.1, 100.0))
	With Hash 4fef0e41111c75b3a030517ef67e39cb07bd4218656c5498d32fdfe57a796df1
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.226035
Received: EmadeDataNumpyMultiplyFloat(MyCumSum(MyCumSum(CenterOfMass(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), lessThanOrEqual(0.01, 0.01)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), greaterThanEqual(myFloatDiv(-1.7849765477596624, 0.01), 0.1)), passTriState(TriState.STREAM_TO_STREAM), passAxis(passAxis(Axis.FULL)), myFloatSub(ifThenElseFloat(myOr(falseBool, trueBool), myFloatIntMult(1.0, 9), 1.0), passFloat(myFloatIntDiv(1.0, 5))))
	With Hash 537ca7841ae05a7b5942a845b5ef12e2e084b8a2d62bd07762744ca3a3bf41b7
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.226208
Received: MorphErosionCross(EdgeDetectionCanny(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 4, 3179, 100), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), lessThanOrEqual(0.1, 0.1), myIntMult(2, 64), 64)
	With Hash 54987d7bb889c58970d868f5adaefd909fa02618af6987e496da6fc0fcb793b1
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.226320
Received: ToUint8Scale(LocalPoolingMax(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 5), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1))
	With Hash 55be9d371a5de667a356508ea7972fd2e66bde7eeb999f0b04a83a4cad67d6ff
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.226406
Received: CCorrObjectFilter(MeanShiftClustering(HighpassIrst(ImageAlignmentECC(Tangent(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2), WindowTriangular(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_0), lessThanOrEqual(0.1, 0.1), myIntToFloat(128), myNot(falseBool), myOr(falseBool, falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)))), Learner(NormalLikelihood(ContourMaskMinLength(MyAverager(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 50), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myFloatIntSub(1.0, -9)), myIntSub(myIntSub(4, 32), passInt(7))), ModifyLearnerBool(ModifyLearnerFloat(ModifyLearnerFloat(LearnerType('BAYES', None), -4.482579599103281, 255), myFloatSub(10.0, 100.0), greaterThanEqual(0.1, 10.0)), myOr(myAnd(falseBool, falseBool), greaterThan(0.01, 0.1)), myFloatToInt(myFloatAdd(10.0, 1.0))), ModifyEnsembleFloat(ModifyEnsembleFloat(ModifyEnsembleInt(EnsembleType('SINGLE', None), 5, 150), myFloatMult(10.0, 4.073986019818111), lessThan(-3.657550698586066, 0.01)), myIntToFloat(greaterThanEqual(1.161631341843786, 4.539648415850349)), greaterThan(passFloat(100.0), myFloatSub(0.01, 100.0)))), myOr(myAnd(lessThanOrEqual(myFloatIntAdd(-3.213301091689804, 64), myFloatMult(2.6490802903519146, 1.0)), myOr(myNot(falseBool), lessThan(0.01, 10.0))), greaterThan(myFloatSub(myFloatSub(0.01, 100.0), passFloat(1.0)), passFloat(passFloat(1.0)))), myFloatSub(myFloatIntSub(ifThenElseFloat(passBool(trueBool), myFloatIntMult(1.0, 100), ifThenElseFloat(trueBool, 100.0, 100.0)), myIntAdd(equal(100.0, 0.6676828528247718), myNot(trueBool))), myFloatSub(myFloatIntMult(myFloatIntMult(0.37430275486475395, 64), myIntMult(trueBool, 55)), passFloat(myFloatIntSub(1.0, 9)))))
	With Hash 58b669f672017fd923a591fd49a789f3b8c71abcee693d437c67acd24d8b99b0
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.226875
Received: EqualizeHist(EqualizeHist(CornerDetectionEigen(StdDeviationHoleCustom(Cv2Subtract(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.FULL), SetToZeroIf>Data&Factor(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_0, -1.9967884891639098), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_2), lessThan(1.0, 1.0), equal(-3.2443671494734683, 100.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), greaterThan(myFloatIntDiv(0.1, 150), myFloatAdd(10.0, 1.0)), notEqual(myFloatDiv(1.0, 0.1), myFloatIntAdd(4.4060824977662385, 255)), myFloatIntAdd(myFloatSub(100.0, 10.0), greaterThanEqual(1.0, 10.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))))
	With Hash 5924dd354b34d99eb6e46812812ad3fd8d338de190553f2519d1aa98164f1665
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.227178
Received: MultiplySpectrum(ContourMaskRangeSolidity(MyCumProd(NumNamedEntities(EdgeDetectionCanny(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, trueBool, 1, 7)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), equal(myIntToFloat(trueBool), myFloatDiv(0.01, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatMult(myFloatIntDiv(passFloat(-3.2479022142095095), myFloatToInt(0.01)), myFloatIntMult(myFloatMult(10.0, 0.1), myIntMult(4, 32))), myFloatIntAdd(ifThenElseFloat(lessThanOrEqual(10.0, 100.0), ifThenElseFloat(falseBool, 0.01, 0.01), myIntToFloat(0)), myIntAdd(myIntAdd(6, -12), myFloatToInt(0.1)))), Cv2Sqrt(ContoursMaxLength(ScalarMultiply(AdjustConstrastLog(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatSub(10.0, 0.01)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passInt(myIntAdd(50, 6))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))))
	With Hash 59357765e0b1c415641cf5878f6fbc91a54040af1e33a4c34370052b4bade70c
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.227541
Received: ContoursConvexConcave(ArcTangent(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), notEqual(1.0, 100.0))
	With Hash 594b27d36499e9c6fe2dfa845388910fdf390fb20f219b88f4b370a0d2338246
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.227638
Received: Cv2AbsDiff(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_2)
	With Hash 5acf150bb638df07c21d9aecf9574a8a9d09159dd740131e443ce263a99724a7
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.227718
Received: myIfThenElse(LowpassFilterUniform(NormalLikelihood(ARG0, myIntDiv(myNot(trueBool), myIntMult(64, 5))), passTriState(TriState.STREAM_TO_FEATURES), passAxis(passAxis(passAxis(Axis.FULL))), myIntMult(passBool(lessThanOrEqual(1.0, 0.1)), notEqual(passFloat(0.01), myFloatIntMult(0.01, 3)))), HighpassIrst(MorphTophatCross(MorphCloseRect(ImageAlignmentECC(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.FULL, 50, 0.01, 0, 6), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), lessThan(0.01, 1.0), greaterThan(0.1, 1.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), Axis.FULL, passBool(passBool(trueBool)), ifThenElseBool(lessThanOrEqual(4.380143170692655, 0.1), notEqual(1.0, 0.1), myNot(falseBool))), passTriState(passTriState(TriState.STREAM_TO_STREAM)), Axis.FULL), ThresholdBinaryMax(WindowTriangular(MultiplyTransposed(MorphTophatRect(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 128, 8), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myNot(falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), ifThenElseBool(myOr(ifThenElseBool(falseBool, trueBool, trueBool), trueBool), myOr(falseBool, equal(100.0, 10.0)), myAnd(myNot(falseBool), passBool(trueBool))), myFloatIntMult(0.1, greaterThanEqual(myFloatMult(10.0, 100.0), myFloatIntAdd(0.1, 37)))), TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), lessThan(-3.44827990764206, passFloat(myFloatAdd(myFloatAdd(-3.619544440264839, 0.1), myFloatIntDiv(0.01, 0)))))
	With Hash 5ee5c770f7ba20578db4b0f7f2851029296475c2d7c8a043349f686ed55db1f3
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.228163
Received: SubtractSaturate(StandardNorm(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2), MyDiff(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), passAxis(Axis.AXIS_0))
	With Hash 62099a3e60f61845d36dd6757387ed9b0ebfd103580a3a6d4a6d0439d2160af3
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.228273
Received: Prerejection(ContourMaskRangeEquDiameter(RandomUniform(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, falseBool, 255), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myIntDiv(1, 55), notEqual(-1.5339542588046107, 10.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), 3, myIntAdd(100, lessThanOrEqual(0.01, -4.674255599033462)), 100.0)
	With Hash 623da7bcc5b796432df03f2de34e4689f2d11b99e86b58396cf412fd09347a54
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.228417
Received: MyProd(myConcatenate(CenterOfMass(ScalarMax(BitwiseNOT(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), passInt(128)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1))), WindowBlackmanHarris(MyAverager(CountVectorizer(ARG0, trueBool, 50, 50, 128), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), myOr(falseBool, falseBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), passAxis(passAxis(passAxis(Axis.AXIS_0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))))
	With Hash 62e9eea52cbe5a62df3b5e47bb98d9a824340e193d1d3e7c83115d8f04159c87
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.228651
Received: ContourMaskMinArea(ARG0, passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myFloatSub(myFloatDiv(0.1, 3.318901895439245), myFloatAdd(1.0, 0.1)))
	With Hash 677e1abf5b323d32af2b61b03572fb9e69207c7354326fcb52a58aba37c0710b
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.228753
Received: Prerejection(LocalPoolingMean(MedianFilterHole(Exponetial(myVarThresh(ARG0, TriState.FEATURES_TO_FEATURES, 0.1), TriState.FEATURES_TO_FEATURES, passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), ifThenElseBool(greaterThanEqual(10.0, 10.0), myOr(falseBool, falseBool), myAnd(falseBool, trueBool)), greaterThan(10.0, myFloatSub(0.1, 1.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), greaterThan(myFloatDiv(myFloatIntAdd(0.1, 2), ifThenElseFloat(trueBool, 100.0, -1.144883930871774)), 0.1)), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), Axis.AXIS_1, lessThan(10.0, myFloatSub(myFloatAdd(myFloatIntAdd(-4.476964359869898, falseBool), 100.0), myFloatIntAdd(passFloat(0.01), myAnd(trueBool, falseBool)))), passBool(greaterThan(myFloatDiv(myFloatIntDiv(10.0, 4), myFloatAdd(1.0, 1.380145806634447)), 1.0)), myFloatIntSub(myFloatIntSub(myFloatMult(passFloat(1.0), myFloatAdd(10.0, 1.0)), 100), myNot(myAnd(ifThenElseBool(falseBool, trueBool, falseBool), notEqual(2.710201874034434, -3.3263233958062575)))))
	With Hash 6e3e86646290e8c0e9667173e87d9a4e1ef03db032245e44c992557cce42e037
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.229078
Received: adf_0(ARG0)
adf_0: MorphErosionEllipse(SepDetectionWindow(ARG0, 5, 62, 0.1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), notEqual(0.3347887821723097, 0.01), myNot(falseBool), myIntAdd(10, 64))
	With Hash 737c90fe4e4726d5dcc56798e52b06fd85135eefc62b84b4371bafa27b0d2b3c
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.229331
Received: MyDiff(ARG0, passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)))
	With Hash 761fc436c750622aa9ec1cf5f8a089f07d778008cfe41b4646a37223c4cf377d
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.229418
Received: ThresholdBinaryMax(ArcCosine(Cv2TemplateMatching(agglomerative_clustering(ARG0, 7), myIntSub(4, 3), myIntAdd(8858, 5)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myIntSub(myIntAdd(myIntSub(128, 2), myNot(falseBool)), myIntDiv(greaterThan(10.0, -4.045780669046045), myIntAdd(255, 150))), ifThenElseFloat(greaterThanEqual(myFloatIntSub(4.802932533687832, 1), myFloatIntDiv(4.0910097337404405, -2)), myFloatIntMult(myFloatIntAdd(3.6743176286559667, 128), ifThenElseBool(falseBool, falseBool, trueBool)), myFloatIntSub(myFloatDiv(0.01, 100.0), ifThenElseBool(trueBool, trueBool, falseBool))))
	With Hash 7ae8f4b103985529d996829c651a583de390b3aed77580081aaaac63433171d5
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.229641
Received: ContoursMinArea(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 50)
	With Hash 7b0e1928bcd9f080a2b34fbff005396b34953abb652c3135792799480734819d
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.229714
Received: WindowPlanckTaper(EmadeDataMultiplyPair(Tangent(Cv2Pow(DogDetection(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 1.0, 10.0, 0.01, 0.01, 10.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myIntSub(64, 2)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), Axis.FULL), TfidfVectorizer(ContourMaskMaxExtentEnclosingCircle(HighpassSobelDerivative(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 2, 150, 0, 64, 100), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatMult(0.38169670497076513, 100.0)), passBool(greaterThan(100.0, -3.6156775163290353)), notEqual(passFloat(10.0), myFloatSub(0.1, 1.0)), lessThan(myIntToFloat(50), ifThenElseFloat(trueBool, 100.0, 2.1130843797060486)), equal(myFloatAdd(0.1, 1.0), passFloat(0.1))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), TriState.STREAM_TO_FEATURES, passAxis(passAxis(passAxis(Axis.FULL))), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myFloatIntAdd(myFloatIntMult(myFloatAdd(1.0, myIntToFloat(7662)), greaterThan(ifThenElseFloat(trueBool, 0.1, 1.0), myFloatAdd(0.1, 100.0))), notEqual(myFloatIntDiv(myFloatIntDiv(0.1, 10), myIntDiv(255, 9)), myFloatSub(myFloatIntDiv(1.3155389106398196, trueBool), myFloatIntDiv(1.0, 9)))))
	With Hash 7ca6fe4f5762dede9f31a39a91f3c4181bbe58da4cda300cfb24ffd6fd2b98b2
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.230090
Received: MeanFilter(adf_0(ARG0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), lessThanOrEqual(100.0, 2.211944758392791))
adf_0: LowpassFilterBilateral(MeanShiftClustering(ARG0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), greaterThan(10.0, 0.01), myIntSub(3, 1), myIntDiv(1, trueBool))
	With Hash 7d9c07cab08f438bec1854c45e8d30015d19b87376739d494f86a345045cb044
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.230316
Received: EmadeDataDividePair(MeanWithHole(ContourMaskRangeLength(LabelByCenterOfMass(MyCumSum(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 150), Cv2Add(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myIntDiv(lessThan(1.0, 1.0), myNot(falseBool)), myIntSub(ifThenElseBool(falseBool, falseBool, falseBool), ifThenElseBool(trueBool, falseBool, falseBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL))), notEqual(myFloatIntMult(myIntToFloat(64), myNot(trueBool)), myFloatIntDiv(myFloatIntAdd(-0.3276603520618888, 6), myAnd(trueBool, trueBool))), myIntMult(passInt(greaterThan(0.1, 100.0)), greaterThanEqual(myFloatMult(3.5386361237165342, 10.0), myFloatIntMult(0.46327185101329516, 9062)))), MyAutoCorr(MyAutoCorr(rmsHole(ArcTangent(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), ifThenElseBool(trueBool, falseBool, trueBool), myOr(trueBool, falseBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))))
	With Hash 802326f43cbbce15ab8f1b55f0c9b5763b96fcf15dd1ff84a46eef50d8926582
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.230699
Received: WindowBlackman(MorphOpenRect(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 3, 3), passTriState(TriState.FEATURES_TO_FEATURES), Axis.AXIS_2, myFloatIntSub(10.0, 55))
	With Hash 8077e3f984f797bf77c4aa7f1faf706629d89c8e932c7856c06364c2377a9f6f
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.230794
Received: Learner(LowpassFilterEllipsoid(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 64), ModifyLearnerFloat(LearnerType('SVM', {'C': 1.0, 'kernel': 0}), 1.0, 128), ModifyEnsembleFloat(EnsembleType('SINGLE', None), 10.0, 1406))
	With Hash 81567316fd3efbc70c88539faf126070ab72b13b5bc28cdc1065ada12f3b68eb
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.230892
Received: LowpassFourierShift(MySnapshot(MorphCloseRect(ContourMaskMaxSolidity(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 1.0), TriState.STREAM_TO_FEATURES, passAxis(Axis.FULL), equal(0.01, 10.0), passBool(falseBool)), Round(ContourMaskMaxExtentEnclosingCircle(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 0.1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(Axis.FULL), myIntAdd(myIntAdd(4, 7), myOr(falseBool, falseBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL))), 7)
	With Hash 81dadc986e98c7b9e58f917d56cc6c213a1a79ccecbabd2ed68573908fcecf3d
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.231099
Received: WindowBlackman(SelectRange(MatchedFiltering2D(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 0, 0.1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myIntSub(7, 3), greaterThanEqual(-2.6846992061529296, 0.1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myFloatIntDiv(myIntToFloat(64), ifThenElseBool(trueBool, falseBool, trueBool)))
	With Hash 85c0bfbf3101be4bc7d20a41ead4f6ff40957eac475534a3b2e2cfc7071655dd
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.231237
Received: MatchedFiltering(MorphGradientEllipse(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 50, 5), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), 1)
	With Hash 8aef984cbb50f17f43632e5e1bde5b4c9871971f5fd36250bb2844bdf96b2898
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.231323
Received: EmadeDataDivideFloat(SkiMedianFilter(EdgeDetectionCanny(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 9, 5, 55), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myIntSub(10, 7)), passTriState(TriState.STREAM_TO_FEATURES), passAxis(passAxis(Axis.AXIS_1)), myFloatIntMult(myIntToFloat(32), myIntAdd(255, 255)))
	With Hash 8c892d757183822a223a6f586e5c6bc0d346a28521dbdb38dbde6001f3bb301e
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.231456
Received: MultiplyTransposed(myPCA(ARG0, TriState.FEATURES_TO_FEATURES, 32, falseBool), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myNot(falseBool))
	With Hash 8cab37f999a1fdbc56f0f10a865eb06a347d88c17d2e854edeae9d187da6a69a
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.231544
Received: RemoveFeature(EdgeDetectionCanny(AccumulateWeighted(TfidfVectorizer(ARG0, falseBool, trueBool, 7957, 32), passTriState(TriState.STREAM_TO_STREAM), Axis.AXIS_2, myFloatIntDiv(100.0, 8)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myOr(lessThan(0.01, 2.5069505860262407), myOr(falseBool, trueBool)), passBool(lessThanOrEqual(0.01, 100.0)), myIntSub(passBool(trueBool), notEqual(10.0, 0.1))), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(passAxis(Axis.FULL))), myIntAdd(passBool(passBool(trueBool)), myIntAdd(myIntAdd(50, 1), myNot(falseBool))))
	With Hash 90bd68d8195023bbe17b635dc1316211b16b2871eff65c6b0cca66d49034bb0d
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.231734
Received: RichardsonLucy(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 8)
	With Hash 90d582ee9321e48a4436d51bea28ce5dba6904d53c40f7acef065ef62eb77664
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.231801
Received: ThresholdToZeroFloat(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 0.8206458690020755)
	With Hash 91ef86f09deb574d6b3240eb04d6db41fe737083abb9987feb5ec79d3a9aa2db
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.231871
Received: SpectralClustering(WindowBartlett(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), passBool(lessThan(myFloatIntDiv(passFloat(0.01), equal(0.1, 0.01)), myFloatAdd(myFloatAdd(-4.404746095441986, 10.0), myFloatIntSub(4.3254805991726375, 100)))), myFloatAdd(myFloatIntMult(myFloatDiv(myFloatIntDiv(1.0, 50), 1.0), -4), 100.0))
	With Hash 93e1ba79284a81d2537a0d42eed61b56b16037d25fa1d85d05d31dccf11be9bf
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.232011
Received: MyCumSum(Cv2RMS(SubtractSaturate(ThresholdToZeroFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 100.0), MultiplyTransposed(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, falseBool), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myNot(lessThan(100.0, 100.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), passInt(myIntDiv(myIntAdd(3, falseBool), passBool(falseBool))))
	With Hash 95fe5f08b96008a9675466044b6e5b937b9985112e17f90b24f22eb0aba7a890
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.232187
Received: ThresholdToZeroPixelFloat(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_2)
	With Hash 983008f4b8df45cc4afafc64c505749311d630458ad109161d9f37e30b310bfd
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.232263
Received: MorphTophatEllipse(MorphBlackhatEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 4, trueBool), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), lessThan(1.582532651394862, 0.1), greaterThanEqual(3.4383382473505044, 0.1))
	With Hash 9989640a3bfd3f1b60d5941d95732beaad270e69b338576b1fbaa20a298632bd
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.232374
Received: CrossCorrelation(InRange(ScalarAdd(ContourMaskMinExtentEnclosingCircle(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 0.1), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), myIntToFloat(100)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), greaterThan(myIntToFloat(0), ifThenElseFloat(trueBool, 0.1, 0.1)), myAnd(lessThanOrEqual(0.1, 0.1), myAnd(trueBool, trueBool))), CutDataLead(WindowHamming(EmadeDataDividePair(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), equal(0.01, 0.1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), greaterThan(myFloatSub(10.0, 1.0), ifThenElseFloat(trueBool, 100.0, -1.5117680474715458))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), passAxis(passAxis(passAxis(Axis.FULL))))
	With Hash 9a43c68bed175726159cca47a24a1f09a61ee5794bedf3fd8b585302136fafe8
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.232637
Received: ThresholdBinaryFloat(MorphErosionCross(ContourMaskRangeEquDiameter(MorphOpenRect(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 0, 50), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), greaterThan(10.0, 10.0), myIntAdd(falseBool, 8)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatToInt(myFloatSub(-0.6974171637667306, 0.1)), myOr(greaterThanEqual(1.0, 100.0), equal(0.01, 0.01)), lessThanOrEqual(myFloatIntSub(0.01, 1), myIntToFloat(32))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myIntToFloat(myNot(greaterThanEqual(1.0, -1.9165816231832067))), myFloatDiv(myFloatIntSub(myFloatAdd(0.1, 1.0), notEqual(1.3409624802597628, 1.0)), myFloatIntDiv(ifThenElseFloat(falseBool, 0.1, -0.5347919246925557), myIntAdd(-2, 64))))
	With Hash 9e0bce0a60a3978031693fb02473a06583defe1f80a6fd2a3cc447a136f98059
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.232871
Received: Daisy(Cv2AbsDiff(Round(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), Prerejection(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 150, 3, 0.01), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThan(myFloatIntDiv(0.1, 95), myFloatIntMult(100.0, 1)), lessThanOrEqual(myFloatIntMult(-4.863904585918977, 13), myFloatIntSub(0.1, 4)), myNot(myNot(falseBool)), myOr(ifThenElseBool(trueBool, falseBool, falseBool), greaterThan(0.1, 1.0)), 55)
	With Hash 9f31b72a96521941d16526445fe657879d541997488b4804acad89f721bda50c
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.233071
Received: AdjustConstrastGamma(ThresholdToZeroPixelFloat(MyDCT(InRange(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 55, 128), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), equal(100.0, 2.395052402168427), myFloatToInt(-1.6529932828410998)), LowpassFourierGaussian(ARG0, passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), notEqual(1.0, 10.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatIntMult(myFloatIntDiv(myIntToFloat(falseBool), lessThan(100.0, -1.1744514945515205)), myAnd(equal(2.7259880510323518, 10.0), ifThenElseBool(falseBool, trueBool, falseBool))), myFloatIntMult(myFloatMult(myIntToFloat(9), myFloatIntDiv(1.0, 55)), 2))
	With Hash a0f9c018e0da5ca606353f0895a5a8db6682968a7c9393308417eb97edda2158
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.233307
Received: SetToZeroIf<Data&Factor(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_2, 9)
	With Hash a6806aaf49fb4e91329e613351f4362bd4b1783000936acd6a4a973f40f96a5b
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.233384
Received: MedianFilterHole(WindowNuttal(StandardNorm(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), ifThenElseBool(notEqual(0.1, 100.0), equal(1.9212728815236169, 0.01), passBool(falseBool)), greaterThanEqual(myFloatIntAdd(0.1, 7), myFloatMult(-1.5963432170939438, 0.01)))
	With Hash a8e3d1e412487674f5d53ac851de9c109048c56efbcf289c43411ba411c58a25
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.233538
Received: ThresholdToZero(RMS2D(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 1), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passFloat(10.0))
	With Hash a902fca6ae53e831bea37cdd256ab6b1fc20289e4b8c31f1fa818bb45847f205
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.233630
Received: GetCentroids(AdjustConstrastGamma(MorphGradientRect(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 2, 50), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passFloat(10.0), myFloatMult(1.0, 1.880807422481599)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)))
	With Hash a99eb34241c8bfa89eaa678af9a39cd45f05625366ff61f3ec2d4a46b736fde5
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.233747
Received: NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 88)
	With Hash ad4133a5851fe541a4498fb17d5454767e3a935468d4a39d25d58aa9ddf9fa16
	With Fitnesses: (0.04437470579005176, 800001.0)
	With Age: 1.0
TimeStamp | 2020-08-22 21:25:02.233830
Received: Tangent(RegionalMaxima(Fraction(WindowKaiser(CCorrObjectFilter(ARG0, ARG0, 3, 100.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatIntAdd(0.1, 150), passBool(falseBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), greaterThan(myFloatMult(0.01, 100.0), myFloatIntSub(0.01, 255))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), ifThenElseFloat(greaterThanEqual(myFloatIntSub(0.1, 150), myFloatSub(10.0, 1.0)), myFloatSub(myFloatIntMult(10.0, 8), myFloatMult(2.1989312720416603, 100.0)), myFloatIntDiv(myFloatIntAdd(1.0, 100), myIntSub(1, 69)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))))
	With Hash ad9f6294e4f15ce2c1f219d9a405fc94a7e2689e5db7a4c8674b6da239ff1a51
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.234070
Received: MorphDilateRect(GaussianFilter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myIntMult(6536, 2), ifThenElseBool(trueBool, trueBool, trueBool), myIntAdd(6, falseBool))
	With Hash afefa380f175d7003e06af7da0bd8b821d202e52c4563479e3d175a0dda9577b
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.234178
Received: MultiplyTransposed(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, trueBool)
	With Hash b3413a6546d99af5967113e5099570cc29ce5cfb6641b111778cbe07cf5ac289
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.234245
Received: NNLearner(ARG0, OutputLayer(SkiMedianFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 4), EmbeddingLayer(falseBool, ARG0, glorotUniformWeights, EmbeddingLayer(9, ContourMaskMaxExtentEnclosingCircle(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 100.0), randomUniformWeights, InputLayer(ARG0)))), 6)
	With Hash b4a87e22c9574588fabc3535f3a7039747c27da0a062697e6997ed49d8892256
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.234356
Received: WindowBlackman(MorphOpenCross(Cv2iDCT(Exponetial(StandardNorm(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(Axis.AXIS_1)), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), Axis.AXIS_1, passInt(myIntMult(myAnd(falseBool, trueBool), greaterThan(100.0, 100.0))), 64), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(Axis.AXIS_2)), myIntToFloat(6))
	With Hash b70afa7c41a9c6e88fe766c1712d185096f48a1e32ad62a3e18f16d0196a5597
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.234515
Received: LowpassFilterUniform(ImagePeakFinder(SobelFilter(ThresholdBinaryMax(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 10, 0.01), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), passTriState(TriState.STREAM_TO_FEATURES), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2))), passBool(lessThan(myFloatIntMult(100.0, 64), myFloatSub(4.589164718005721, 0.1))))
	With Hash bb22859b6644a0097f1ba3faa0c4b792a93749c0316c0d8a21b25e4f12e0020b
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.234661
Received: mySubSampleData(SavitzkyGolayFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 7, 0, 50), myOr(falseBool, trueBool), myFloatToInt(1.0))
	With Hash bbe4c0aa24d3d8015e45a442e74baa4777fe7df8bf1cb9bc04dd3ede420035ce
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.234749
Received: adf_1(mySpectralEmbedding(ContourMaskMinAspectRatio(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 0.01), passTriState(TriState.FEATURES_TO_FEATURES), myIntDiv(64, 150)))
adf_1: ContourMaskRangeAspectRatio(ContourMaskRangeExtentEnclosingCircle(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, trueBool, 55), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myIntAdd(255, 55), myIntMult(7, 9))
	With Hash be230519a8354aaac980b4884034130a3c77f26417eb7e33b18d4b3351040564
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.234993
Received: ContourMaskRangeEquDiameter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 7, myIntSub(myFloatToInt(0.01), myFloatToInt(10.0)))
	With Hash c000ca381b0217ccabc51a63726e62cd2f4b6ec1db1111a6ead12e44845e584e
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.235079
Received: MorphTophatCross(ARG0, passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myIntAdd(myIntSub(5, 29), passInt(1)), greaterThanEqual(myFloatIntAdd(1.0, 9), myFloatDiv(1.0, -1.8274707763944087)))
	With Hash c2477f996c7dba5dd88588a1e1aaf1de051c76618d84b05cf23c023fd687cfe1
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.235187
Received: EmadeDataMultiplyInt(ContourMaskRangeLength(AbsoluteValue(LowpassFilterMedian(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 150), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), greaterThanEqual(myFloatIntSub(10.0, 2), myFloatMult(-3.627473698791701, -2.1000160235203467)), myOr(myNot(trueBool), equal(0.1, 0.1))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myIntMult(equal(myFloatIntMult(1.0, 2), myFloatIntSub(10.0, 7)), equal(myFloatIntMult(10.0, 55), myIntToFloat(8))))
	With Hash c2a8bb399dd8b0346fa82ac32f73e66b0295377b750b59eb6aa74bf33b4a05fe
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.235376
Received: OtsuBinaryThreshold(Cv2iDCT(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), notEqual(0.1, 0.01))
	With Hash c653ed07978f9f33a19389b5c6e3e11aa93391008ff4a2d918917d54929a2d03
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.235465
Received: Cosine(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL)
	With Hash c85ce3c6a415dae5665134025a5fc7b69d0df3146e1aa46d213e16910bd187c5
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.235529
Received: MorphErosionRect(ContourMaskRangeEquDiameter(MedianFilterHole(ContoursAll(EmadeDataAddPairTriple(ARG0, ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_1, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), passBool(lessThanOrEqual(10.0, 100.0)), passInt(ifThenElseBool(trueBool, falseBool, trueBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myIntSub(myIntAdd(myFloatToInt(10.0), passInt(150)), myIntDiv(myIntDiv(255, 255), myOr(falseBool, falseBool))), lessThan(passFloat(myFloatIntDiv(100.0, 4)), myFloatIntMult(passFloat(10.0), myIntMult(32, 12)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myAnd(greaterThan(myIntToFloat(greaterThan(0.01, -0.5956156197401983)), myFloatAdd(myFloatDiv(-2.7229837719407035, 4.3362734712465905), myFloatDiv(1.1197764073421776, 0.4765692406226254))), myNot(lessThan(myFloatIntDiv(0.1, 10), myFloatIntSub(100.0, 4)))), myIntMult(myFloatToInt(myIntToFloat(myOr(trueBool, falseBool))), equal(myFloatIntAdd(myFloatIntAdd(0.01, 4), notEqual(100.0, 0.01)), passFloat(myFloatIntSub(0.1, 0)))), equal(myFloatIntSub(myFloatIntAdd(myFloatIntSub(0.1, 255), myIntDiv(64, 32)), lessThanOrEqual(myFloatIntAdd(-0.4070547785511591, 0), myIntToFloat(5))), myFloatSub(myIntToFloat(greaterThanEqual(0.1, 0.1)), myFloatAdd(myIntToFloat(4), myFloatDiv(10.0, 10.0)))))
	With Hash ccd65003f53287eeeb806080e604ff5a216e7a94b9c64c019c9f8e3bdca821f2
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.235938
Received: BackgroundSubtraction(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL)
	With Hash ce152c2dacbc807c3c7f3875a15b748b8bb897af1e6cf32a3b657ecfe0270295
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.236021
Received: NumNamedEntities(ARG0)
	With Hash d47d54213d8b8efdf8327856c49ed609ab74864e71afc6e96c3220981e0c080c
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.236080
Received: myICA(ArcTangent(NumpyDivide(Cv2DCT(WindowPlanckTaper(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), SetToZeroIf>Data&Factor(LocalPoolingMedian(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, trueBool), WindowHann(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, falseBool), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_1), myFloatIntSub(2.351969454101937, 7)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passInt(myIntMult(myFloatToInt(passFloat(100.0)), myNot(notEqual(100.0, -3.5016043164886845)))), lessThanOrEqual(passFloat(myFloatDiv(myFloatIntDiv(3.7842163720029873, 6), myFloatIntSub(1.0, 55))), myFloatSub(myFloatIntSub(myFloatIntSub(1.0, 0), myOr(falseBool, trueBool)), myFloatIntDiv(passFloat(2.04794626486878), myFloatToInt(10.0)))))
	With Hash d67559cf72920bf8cfe473f4c793e3b0ec00f34bf539cdc8768f60bb5b73d8b4
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.236365
Received: DohDetection(ObjectDetection(WindowKaiser(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, -0.2995833490699944, trueBool), passBool(falseBool), passFloat(0.01), myFloatIntAdd(0.1, 55)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatSub(myIntToFloat(5), myIntToFloat(50)), myIntToFloat(myAnd(falseBool, trueBool)), myOr(passBool(falseBool), greaterThan(10.0, 1.0)), myFloatIntMult(myFloatDiv(4.073476600118314, 0.1), 32), myFloatIntAdd(myFloatSub(0.1, 0.1), notEqual(0.01, 100.0)))
	With Hash dbae5ca604b543e3b719f1de0974724264c51b496b0da44b8c14e3398cdab572
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.236541
Received: StdDeviation(AdjustConstrastLog(Cv2NotEqual(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.FULL, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatIntSub(1.0, 6103)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myIntSub(myIntAdd(8, 1), myIntMult(128, 2)))
	With Hash dbf0bce954012d4e1f0aaec0b15b52ab1ad5731090c131dd5d2a19faa56564bf
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.236670
Received: MyInformedSearch(ARG0, FractionTriple(ARG0, ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.FULL, Axis.AXIS_1, 1), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.FULL), 255, myFloatIntMult(10.0, 5))
	With Hash de14c0b4f2d816e2543378a2a7f01d62c32f1bcd2d93282a312cbcaa353d20ae
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.236790
Received: Hog(Learner(ARG0, LearnerType('DECISION_TREE', {'criterion': 0, 'splitter': 0}), EnsembleType('SINGLE', None)), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myOr(falseBool, falseBool), myIntSub(317, 128), greaterThan(10.0, 0.1), greaterThanEqual(0.01, 10.0))
	With Hash e15f5f2604387b364162c5049cc932578916a998030a77711f0158c704ba5c8a
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.236904
Received: ZeroOneNorm(ECDF(myICA(ARG0, TriState.STREAM_TO_FEATURES, 4, trueBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passBool(trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)))
	With Hash e2301cb2e1508783003a14e3a9dbab313af0ed3ccf956a71bf127061c42c112e
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.237018
Received: TfidfVectorizer(BackgroundSubtraction(ContoursMinArea(EmadeDataAddFloat(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 2.3888396650632036), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myNot(falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1))), ifThenElseBool(ifThenElseBool(passBool(trueBool), passBool(trueBool), ifThenElseBool(trueBool, falseBool, trueBool)), myOr(myOr(trueBool, falseBool), greaterThanEqual(0.01, 10.0)), lessThanOrEqual(myIntToFloat(0), passFloat(10.0))), myIntMult(myAnd(passBool(falseBool), myAnd(trueBool, trueBool)), myIntDiv(myIntSub(2, 10), myFloatToInt(1.0))), myIntMult(greaterThan(passFloat(100.0), myFloatIntDiv(1.0, 4)), greaterThan(myFloatDiv(0.01, 1.0), ifThenElseFloat(trueBool, 10.0, 0.1))), myIntSub(passBool(myNot(trueBool)), myOr(myOr(falseBool, trueBool), ifThenElseBool(falseBool, falseBool, trueBool))))
	With Hash e2a4a4f9e43d4c663855abb8ecc4fe46792987db37822b99b53402e934040ea6
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.237268
Received: MorphErosionCross(WindowLanczos(MeanWithHole(SkiMedianFilter(SEPObjectDetection(ARG0, 64, 10.0, 1.3907739214601715), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passBool(falseBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), 2, ifThenElseBool(myNot(falseBool), myAnd(trueBool, falseBool), greaterThan(1.0, 10.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1)))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myIntSub(greaterThanEqual(passFloat(myFloatIntMult(1.0, 3365)), 0.1), equal(ifThenElseFloat(myNot(falseBool), myFloatIntAdd(1.9621240081754996, 100), myFloatSub(1.0, 1.0)), myFloatIntAdd(myFloatIntAdd(100.0, 8), myIntAdd(50, trueBool)))), passInt(myIntSub(myIntSub(ifThenElseBool(falseBool, falseBool, trueBool), notEqual(0.01, 100.0)), myAnd(trueBool, lessThan(0.01, 10.0)))), 5)
	With Hash e399c081828d95508de14e456b64c00e1e59f5c010eb3d44e85e6d8567586f8e
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.237536
Received: BitwiseNOT(mySelGenUni(Cv2GreaterThan(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.AXIS_2), TriState.STREAM_TO_FEATURES, myIntAdd(128, 1), myNot(trueBool), myFloatMult(100.0, 10.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)))
	With Hash e5483c1ed564259ce34181f4245efb6505ac0881bf7143351932a45831c19be4
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.237654
Received: NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 99)
	With Hash e840eba2a6c37812c1013c49aff834a9e2af179d21f83bc4ea9db4c0ddb0ef7c
	With Fitnesses: (0.046571473403420716, 800001.0)
	With Age: 1.0
TimeStamp | 2020-08-22 21:25:02.237738
Received: ThresholdBinaryFloat(HighpassUnsharpMask(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 5, 3, 3), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myFloatIntMult(1.9946364158821517, 9), passFloat(1.0))
	With Hash e8e68939fab643e15a4898921335b7dc42f15765c7ecc5ac43521ad0716a203d
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.237840
Received: AbsDiff(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_2, Axis.FULL)
	With Hash e8e88177291aee75013f11a44309b63f7364a6c55eafa34f6932d181f985fb6a
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.237930
Received: ContourMaskMaxLength(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 3.3617056088785517)
	With Hash ee85a309813677526ae2718667e8bfd33c55466a5db562edd7a4a9605be872e1
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.238017
Received: MultiplyTransposed(SpectralClustering(ContourMaskMinSolidity(LowpassFilterGaussian(WindowNuttal(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myIntMult(55, 3), myNot(falseBool), ifThenElseFloat(falseBool, 1.0, 100.0), myIntToFloat(falseBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), myIntSub(passBool(falseBool), greaterThan(10.0, 100.0))), myIntDiv(myNot(equal(-1.4413717539817283, 0.01)), greaterThanEqual(myFloatDiv(100.0, 0.1), myFloatSub(0.01, 0.1))), myFloatIntAdd(myFloatIntDiv(myFloatSub(0.1, 0.1), passInt(61)), myFloatToInt(myFloatAdd(0.1, 0.5068917493552574)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), notEqual(ifThenElseFloat(notEqual(myFloatDiv(0.01, -2.3101470018949), passFloat(0.01)), myIntToFloat(myIntMult(0, 55)), myFloatIntMult(ifThenElseFloat(trueBool, 1.0, 100.0), myFloatToInt(1.0))), myFloatSub(myFloatIntSub(ifThenElseFloat(falseBool, 0.01, 0.3165653142716751), lessThan(10.0, 10.0)), myFloatAdd(myFloatMult(0.01, 10.0), myFloatAdd(4.067249873067709, 100.0)))))
	With Hash eeb6edcb0869d25da5d542464e97f37cdeae09310b23b36c1a8997428a696c65
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.238327
Received: ZeroOneNorm(ThresholdBinaryInverse(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 0.01), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1))
	With Hash f4079896bc11fa5c226edd152d2c918d5eca3eecc3ae3ccc676cf3428eb4cff3
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.238412
Received: CCorrObjectFilter(ARG0, ARG0, 255, 10.0)
	With Hash f61d9886c39d2095ff2f5d269bab257739f4d2b1d7ea0bc792dc7b67aacae12d
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:25:02.238478
Received: Cv2Sqrt(LabelByCenterOfMass(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), Axis.AXIS_1)
	With Hash f6ae357a2a5828f5bf4e5b0f7c7324c11212f98f98c93d1c68b89f8d6b09cbab
	With Fitnesses: (inf, inf)
	With Age: 0
Elite Pool has: 51 individuals, and 51 are unique
evaluated offspring has: 131 individuals, and 130 are unique
Gene Pool has: 182 individuals, and 176 are unique
Got Redundant ContourMaskMaxSolidity(WindowTurkey(MatchedFiltering(SavitzkyGolayFilter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 87, 5, 2), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myAnd(falseBool, trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myFloatMult(myFloatAdd(-0.35649298395985163, 1.0), myIntToFloat(4))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myFloatMult(myFloatIntMult(ifThenElseFloat(falseBool, -3.2065381108254987, 1.0), myOr(falseBool, trueBool)), passFloat(myFloatIntMult(0.01, 128)))) (inf, inf) 57960d2bf383faee9ac330f4a6824184044fef559d9f51b6eb37e3fee730bd37
Got Redundant MaxLoc(BitwiseAnd(ContourMaskRangeLength(Round(StdDeviation(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 9), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), Axis.AXIS_0, equal(passFloat(10.0), myFloatDiv(0.01, 0.2274954885701046)), passBool(ifThenElseBool(falseBool, trueBool, falseBool))), ThresholdBinary(MyCumSum(LocalPoolingMax(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 6), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), 7), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), 100.0, myOr(greaterThanEqual(-4.171750319883218, 0.01), notEqual(10.0, 1.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), passAxis(passAxis(passAxis(Axis.AXIS_0)))), TriState.FEATURES_TO_FEATURES, passAxis(passAxis(passAxis(passAxis(Axis.FULL))))) (inf, inf) 2b8c06ac03a62fe975b7a11559bffd3aeaff2a2ed48ca654d54abc0b3033a2a6
Got Redundant SpectralClustering(StandardNorm(ARG0, TriState.STREAM_TO_STREAM, passAxis(passAxis(passAxis(Axis.AXIS_0)))), lessThan(myFloatIntAdd(myFloatIntDiv(myFloatSub(0.1, 0.1), passInt(10)), notEqual(-2.4033966752898586, 0.01)), myFloatSub(0.01, myIntToFloat(lessThanOrEqual(10.0, 100.0)))), 0.1) (inf, inf) 0693201780a7708e679ea3a082313311559c28f5d3c94a33f0a43b2a98b45100
Got Redundant NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 95) (0.046006590302840156, 800001.0) 5b4125bef33d66cd47741754dd929438ae170fe3ce2bc710756e786888187f78
Got Redundant LabelObjects(MyDiff(MatchedFiltering(mySelKBest(ARG0, TriState.FEATURES_TO_FEATURES, 150, 128), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myIntMult(3591, 10)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0)))) (inf, inf) cff6467c2c86b4bd6648f357d2a95b7862365bb0ee722cf5da3956efbca72912
Got Redundant MatchedFiltering(ContourMask(HighpassFourierEllipsoid(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, trueBool), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myIntAdd(ifThenElseBool(falseBool, trueBool, trueBool), myIntAdd(255, 0))) (inf, inf) 13d931dac480b7029c46ea3fd0e0fbc9be57aafa55b9943e0d97ffdce8b7fb44
Sanity check after removal of redundant individuals
Elite Pool has: 51 individuals, and 51 are unique
evaluated offspring has: 131 individuals, and 130 are unique
Gene Pool has: 176 individuals, and 176 are unique
Before History Addition | 2020-08-22 21:25:03.097614
After History Addition | 2020-08-22 21:25:09.675436
19 FullDataSet individuals
Gene pool assembled
After adjust for data set 176 out of 176 are unique
After select nsga2 176 out of 176 are unique
NSGAII Completed
19 FullDataSet individuals
176 total individuals
Before Uneval Count Query | 2020-08-22 21:25:23.572350
After Uneval Count Query | 2020-08-22 21:25:23.768530
297 individuals evaluated thus far
Right before binary tournament 176 out of 176 are unique
Parents Selected 32 from 176
31 out of 32 are unique
[0.7695652173913143, 0.23043478260868563, 0.5130434782607993, inf, inf, inf, inf, inf, inf, inf, 1.0, inf, 1.0, inf, inf, inf, inf, inf, inf, inf, inf, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Updating Pareto Front
Pareto Front Updated
Before Pareto Front Addition | 2020-08-22 21:25:24.149711
After Pareto Front Addition | 2020-08-22 21:25:24.854722
Pareto Front Updated
(0.04437470579005176, 800001.0)
(0.04446885297348191, 792001.0)
(0.04456300015691195, 752001.0)
(0.04506511846853911, 744001.0)
(0.045096500863015865, 560001.0)
Hypervolume:  44910003.52898157
Pareto Individual 0 after gen 2 is NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 88)(0.04437470579005176, 800001.0) Age 1.0
Pareto Individual 1 after gen 2 is NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(99, ARG0, randomUniformWeights, InputLayer(ARG0))), 100)(0.04446885297348191, 792001.0) Age 1.0
Pareto Individual 2 after gen 2 is NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(94, ARG0, randomUniformWeights, InputLayer(ARG0))), 100)(0.04456300015691195, 752001.0) Age 1.0
Pareto Individual 3 after gen 2 is NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(93, ARG0, randomUniformWeights, InputLayer(ARG0))), 100)(0.04506511846853911, 744001.0) Age 1.0
Pareto Individual 4 after gen 2 is NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(myIntMult(10, 7), ARG0, randomUniformWeights, InputLayer(ARG0))), 128)(0.045096500863015865, 560001.0) Age 1.0
Updated Elite Pool
Finished Calculating Statistics
Starting Gen 3
Producing offspring
After cloning from parents 31 out of 32 are unique
Additionally 32 individuals are unique in memory
And 107 mains and adfs are unique
Mating offspring
Mated 60 individuals
Mating offspring Ephemerals
Mated 58 individuals ephermerals
Mating offspring headless chicken
Mated 10 individuals
Mating offspring Ephemerals headless chicken
Mated 30 individuals ephermerals
Mutating offspring (Node Replace)
Mutated 119 individuals
Heal Offspring
[<deap.gp.Terminal object at 0x7f46a6ad0120>]
[<deap.gp.Primitive object at 0x7f46a6a5be58>, <deap.gp.Primitive object at 0x7f46a6a644a8>, <deap.gp.Primitive object at 0x7f46a6a54a98>, <deap.gp.Primitive object at 0x7f46a6ad2a48>, <deap.gp.Primitive object at 0x7f46a6a553b8>, <deap.gp.Terminal object at 0x7f46a6ad0120>, <deap.gp.TriStateGen object at 0x7f469edf2410>, <deap.gp.AxisGen object at 0x7f469edf2468>, <deap.gp.Terminal object at 0x7f46a6a6a630>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.TriStateGen object at 0x7f469edf24c0>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.AxisGen object at 0x7f469edf2ca8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.TriStateGen object at 0x7f469edf2d00>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.AxisGen object at 0x7f469edf2d58>, <deap.gp.Primitive object at 0x7f46a6a64db8>, <deap.gp.Primitive object at 0x7f46a6a66458>, <deap.gp.Terminal object at 0x7f46a6a6a120>, <deap.gp.Terminal object at 0x7f46a6a6a090>, <deap.gp.Primitive object at 0x7f46a6a66278>, <deap.gp.Terminal object at 0x7f46a6a6a120>, <deap.gp.Terminal object at 0x7f46a6a6a510>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.TriStateGen object at 0x7f469edf2db0>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.AxisGen object at 0x7f469edf2e08>, <deap.gp.Primitive object at 0x7f46a6a664a8>, <deap.gp.Primitive object at 0x7f46a6a64f48>, <deap.gp.Primitive object at 0x7f46a6a64cc8>, <deap.gp.Terminal object at 0x7f46a6a6a090>, <deap.gp.Terminal object at 0x7f46a6a6a120>, <deap.gp.Primitive object at 0x7f46a6a66278>, <deap.gp.Terminal object at 0x7f46a6a6a090>, <deap.gp.myRandInt object at 0x7f469edf2e60>, <deap.gp.Primitive object at 0x7f46a6a64f48>, <deap.gp.Terminal object at 0x7f46a6a6a048>, <deap.gp.Terminal object at 0x7f46a6a6a1b0>, <deap.gp.Terminal object at 0x7f46a6a6a0d8>, <deap.gp.Primitive object at 0x7f46a6a64e58>, <deap.gp.Primitive object at 0x7f46a6a64ef8>, <deap.gp.Terminal object at 0x7f46a6a6a048>, <deap.gp.Primitive object at 0x7f46a6a64d18>, <deap.gp.Terminal object at 0x7f46a6a6a090>, <deap.gp.Terminal object at 0x7f46a6a6a090>, <deap.gp.Primitive object at 0x7f46a6a66188>, <deap.gp.Primitive object at 0x7f46a6a664a8>, <deap.gp.Primitive object at 0x7f46a6a663b8>, <deap.gp.Terminal object at 0x7f46a6a6a168>, <deap.gp.Terminal object at 0x7f46a6a6a3f0>, <deap.gp.Primitive object at 0x7f46a6a64d18>, <deap.gp.Terminal object at 0x7f46a6a6a1b0>, <deap.gp.myGenFloat object at 0x7f469edf2eb8>, <deap.gp.Primitive object at 0x7f46a6a66318>, <deap.gp.Primitive object at 0x7f46a6a64db8>, <deap.gp.myGenFloat object at 0x7f469edf2f10>, <deap.gp.Terminal object at 0x7f46a6a6a120>, <deap.gp.Primitive object at 0x7f46a6a661d8>, <deap.gp.Terminal object at 0x7f46a6a6a558>, <deap.gp.Terminal object at 0x7f46a6a6a510>, <deap.gp.Primitive object at 0x7f46a6a64ea8>, <deap.gp.Primitive object at 0x7f46a6a64ef8>, <deap.gp.Primitive object at 0x7f46a6ace8b8>, <deap.gp.Terminal object at 0x7f46a6a6a1b0>, <deap.gp.Terminal object at 0x7f46a6a6a1b0>, <deap.gp.Primitive object at 0x7f46a6a64e08>, <deap.gp.Primitive object at 0x7f46a6a66228>, <deap.gp.Terminal object at 0x7f46a6a6a090>, <deap.gp.myGenFloat object at 0x7f469edf2f68>, <deap.gp.Primitive object at 0x7f46a6a66138>, <deap.gp.Terminal object at 0x7f46a6a6a120>, <deap.gp.Terminal object at 0x7f46a6a6a0d8>, <deap.gp.Primitive object at 0x7f46a6a64f48>, <deap.gp.Primitive object at 0x7f46a6a64c28>, <deap.gp.Primitive object at 0x7f46a6a66188>, <deap.gp.Terminal object at 0x7f46a6a6a1b0>, <deap.gp.Terminal object at 0x7f46a6a6a708>, <deap.gp.Primitive object at 0x7f46a6a66368>, <deap.gp.Terminal object at 0x7f46a6a6a120>, <deap.gp.Terminal object at 0x7f46a6a6a168>, <deap.gp.Primitive object at 0x7f46a6a66458>, <deap.gp.Primitive object at 0x7f46a6a66228>, <deap.gp.Terminal object at 0x7f46a6a6a120>, <deap.gp.Terminal object at 0x7f46a6a6a1b0>, <deap.gp.Primitive object at 0x7f46a6a66638>, <deap.gp.Terminal object at 0x7f46a6a6a120>, <deap.gp.Primitive object at 0x7f46a6a66458>, <deap.gp.Primitive object at 0x7f46a6a663b8>, <deap.gp.Terminal object at 0x7f46a6a6a090>, <deap.gp.Terminal object at 0x7f46a6a6a318>, <deap.gp.Primitive object at 0x7f46a6a668b8>, <deap.gp.myBigRandInt object at 0x7f469edf2fc0>, <deap.gp.Primitive object at 0x7f46a6a64f48>, <deap.gp.Primitive object at 0x7f46a6a64ef8>, <deap.gp.Primitive object at 0x7f46a6a64e58>, <deap.gp.Terminal object at 0x7f46a6ad0fc0>, <deap.gp.Terminal object at 0x7f46a6a6a048>, <deap.gp.Primitive object at 0x7f46a6a66138>, <deap.gp.Primitive object at 0x7f46a6a66188>, <deap.gp.Terminal object at 0x7f46a6a6a168>, <deap.gp.Terminal object at 0x7f46a6a6a708>, <deap.gp.Primitive object at 0x7f46a6a66368>, <deap.gp.Terminal object at 0x7f46a6a6a1b0>, <deap.gp.Terminal object at 0x7f46a6a6a0d8>, <deap.gp.Primitive object at 0x7f46a6a663b8>, <deap.gp.Primitive object at 0x7f46a6a64f48>, <deap.gp.Terminal object at 0x7f46a6ad0fc0>, <deap.gp.Terminal object at 0x7f46a6a6a1b0>, <deap.gp.Terminal object at 0x7f46a6a6a090>, <deap.gp.Primitive object at 0x7f46a6a66318>, <deap.gp.Terminal object at 0x7f46a6a6a3a8>, <deap.gp.Terminal object at 0x7f46a6a6a2d0>, <deap.gp.Primitive object at 0x7f46a6ad2bd8>, <deap.gp.Primitive object at 0x7f46a6a55598>, <deap.gp.Primitive object at 0x7f46a6acec78>, <deap.gp.Primitive object at 0x7f46a6a675e8>, <deap.gp.Terminal object at 0x7f46a6ad0120>, <deap.gp.Primitive object at 0x7f46a6a67188>, <deap.gp.Terminal object at 0x7f46a6a6a3f0>, <deap.gp.Terminal object at 0x7f46a6ad0120>, <deap.gp.Terminal object at 0x7f46a6a6a948>, <deap.gp.Primitive object at 0x7f46a6a67138>, <deap.gp.Terminal object at 0x7f46a6ad0120>, <deap.gp.myMedRandInt object at 0x7f469ed9d0a0>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.TriStateGen object at 0x7f469ed9d0f8>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.AxisGen object at 0x7f469ed9d150>, <deap.gp.Primitive object at 0x7f46a6a64ea8>, <deap.gp.Terminal object at 0x7f46a6a6a048>, <deap.gp.Terminal object at 0x7f46a6ad0fc0>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.TriStateGen object at 0x7f469ed9d1a8>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.AxisGen object at 0x7f469ed9d200>, <deap.gp.Primitive object at 0x7f46a6a64db8>, <deap.gp.Primitive object at 0x7f46a6a66638>, <deap.gp.Terminal object at 0x7f46a6a6a1b0>, <deap.gp.Primitive object at 0x7f46a6a66228>, <deap.gp.Terminal object at 0x7f46a6a6a090>, <deap.gp.Terminal object at 0x7f46a6a6a1b0>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.TriStateGen object at 0x7f469ed9d258>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.AxisGen object at 0x7f469ed9d2b0>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.TriStateGen object at 0x7f469ed9d308>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.TriStateGen object at 0x7f469ed9d360>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.AxisGen object at 0x7f469ed9d3b8>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.AxisGen object at 0x7f469ed9d410>]
<class 'deap.gp.PrimitiveTree'>
[<deap.gp.Terminal object at 0x7f46a6ad0120>]
[<deap.gp.Primitive object at 0x7f46a6a66d18>, <deap.gp.Primitive object at 0x7f46a6a59408>, <deap.gp.Primitive object at 0x7f46a6a642c8>, <deap.gp.Terminal object at 0x7f46a6ad0120>, <deap.gp.TriStateGen object at 0x7f469f29c938>, <deap.gp.AxisGen object at 0x7f469f29c990>, <deap.gp.Terminal object at 0x7f46a6a6a6c0>, <deap.gp.Terminal object at 0x7f46a6a6a0d8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.TriStateGen object at 0x7f469f29c9e8>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.AxisGen object at 0x7f469f29ca40>, <deap.gp.Primitive object at 0x7f46a6a66ea8>, <deap.gp.Primitive object at 0x7f46a6a66e58>, <deap.gp.learnerGen object at 0x7f469f29ca98>, <deap.gp.Terminal object at 0x7f46a6a6a168>, <deap.gp.Terminal object at 0x7f46a6a6a2d0>, <deap.gp.Primitive object at 0x7f46a6a666d8>, <deap.gp.Primitive object at 0x7f46a6a67188>, <deap.gp.Terminal object at 0x7f46a6a6a5e8>, <deap.gp.Terminal object at 0x7f46a6ad0120>, <deap.gp.Terminal object at 0x7f46a6a6a948>, <deap.gp.Primitive object at 0x7f46a6a67138>, <deap.gp.Terminal object at 0x7f46a6ad0120>, <deap.gp.Primitive object at 0x7f46a6a64d18>, <deap.gp.Terminal object at 0x7f46a6a6a0d8>, <deap.gp.Terminal object at 0x7f46a6a6a168>, <deap.gp.Primitive object at 0x7f46a6a66ef8>, <deap.gp.Primitive object at 0x7f46a6a66f48>, <deap.gp.ensembleGen object at 0x7f469f29cb48>, <deap.gp.Terminal object at 0x7f46a6a6a090>, <deap.gp.Terminal object at 0x7f46a6a6a4c8>, <deap.gp.Primitive object at 0x7f46a6ace8b8>, <deap.gp.Terminal object at 0x7f46a6a6a090>, <deap.gp.Terminal object at 0x7f46a6a6a120>, <deap.gp.Primitive object at 0x7f46a6a665e8>, <deap.gp.Terminal object at 0x7f46a6a6a558>]
<class 'deap.gp.PrimitiveTree'>
Healed128 individuals
Mutating offspring (Add Layer)
Correlation(AffinityPropagationClustering(ARG0, 1.0), MorphCloseEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 150, 100), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_1))
18
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(93, ARG0, randomUniformWeights, InputLayer(Cv2AddWeighted(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.FULL, 0, 92)))), 255)
19
index
2
2
18
add node
AttentionLayer
after make
NNLearner(ARG0, OutputLayer(ARG0, AttentionLayer([], EmbeddingLayer(93, ARG0, randomUniformWeights, InputLayer(Cv2AddWeighted(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.FULL, 0, 92))))), 255)
NNLearner(ARG0, OutputLayer(ARG0, AttentionLayer(EmbeddingLayer(93, ARG0, randomUniformWeights, InputLayer(Cv2AddWeighted(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.FULL, 0, 92))), EmbeddingLayer(93, ARG0, randomUniformWeights, InputLayer(Cv2AddWeighted(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.FULL, 0, 92))))), 255)
ContourMaskRangeExtentEnclosingCircle(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 3, 8)
6
BitwiseOr(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, Axis.FULL)
7
Prerejection(ContourMaskRangeEquDiameter(RandomUniform(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, falseBool, 255), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myIntDiv(1, 55), notEqual(-1.5339542588046107, 0.01)), TriState.STREAM_TO_STREAM, passAxis(passAxis(Axis.AXIS_0)), 3, myIntAdd(100, lessThanOrEqual(0.01, -4.674255599033462)), 100.0)
29
EmadeDataDivideFloat(Fraction(BayesMulti(ARG0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatToInt(10.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), ifThenElseFloat(notEqual(0.01, 4.017077491468269), myFloatAdd(10.0, 100.0), passFloat(10.0)))
25
LinearPredictiveCoding(Cv2iDCT(EmadeDataAddFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 1.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThanOrEqual(myFloatIntSub(0.1, 2), passFloat(0.01)))
23
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(8, ARG0, randomUniformWeights, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))))), 26)
17
index
8
8
16
add node
GlobalMaxPoolingLayer2D
after make
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(8, ARG0, randomUniformWeights, OutputLayer(ARG0, GlobalMaxPoolingLayer2D(EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)))))), 26)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(8, ARG0, randomUniformWeights, OutputLayer(ARG0, GlobalMaxPoolingLayer2D(EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)))))), 26)
RemoveFeature(MultiplyTransposed(LowpassFilterUniform(KalmanFilter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 10.0, 0.01), TriState.STREAM_TO_FEATURES, Axis.FULL, 55), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myAnd(falseBool, trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myIntMult(myNot(trueBool), lessThan(0.1, 0.1)))
31
SubtractSaturate(ThresholdBinaryMax(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 35, 10.0), BackgroundSubtraction(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), TriState.STREAM_TO_FEATURES, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0))
18
WindowPlanckTaper(EmadeDataMultiplyPair(Tangent(Cv2Pow(DogDetection(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 1.0, 10.0, 0.01, 0.01, 10.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myIntSub(64, 2)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), Axis.FULL), TfidfVectorizer(ContourMaskMaxExtentEnclosingCircle(HighpassSobelDerivative(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 2, 150, 0, 64, 100), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatMult(0.38169670497076513, 100.0)), passBool(greaterThan(100.0, -3.6156775163290353)), notEqual(passFloat(0.1), myFloatSub(0.1, 1.0)), lessThan(myIntToFloat(50), ifThenElseFloat(trueBool, 100.0, 2.1130843797060486)), equal(myFloatAdd(0.1, 1.0), passFloat(0.1))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), TriState.STREAM_TO_FEATURES, passAxis(passAxis(passAxis(Axis.FULL))), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myFloatIntAdd(myFloatIntMult(myFloatAdd(1.0, myIntToFloat(7662)), greaterThan(ifThenElseFloat(trueBool, 0.1, 1.0), myFloatAdd(0.1, 100.0))), notEqual(myFloatIntDiv(myFloatIntDiv(0.1, 10), myIntDiv(255, 9)), myFloatSub(myFloatIntDiv(1.3155389106398196, trueBool), myFloatIntDiv(1.0, 9)))))
115
EmadeDataNumpyMultiplyFloat(MyCumSum(MyCumSum(CenterOfMass(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), lessThanOrEqual(0.01, 0.01)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), greaterThanEqual(myFloatDiv(-1.7849765477596624, 0.01), 0.1)), passTriState(TriState.STREAM_TO_STREAM), passAxis(passAxis(Axis.FULL)), myFloatSub(ifThenElseFloat(myOr(falseBool, trueBool), myFloatIntMult(1.0, 9), 1.0), passFloat(myFloatIntDiv(1.0, 5))))
43
Cv2Sqrt(LabelByCenterOfMass(Cv2Equal(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.AXIS_1), ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), Axis.AXIS_1)
17
MyAverager(EmadeDataSubtractPair(FilterCentroids(ARG0), EmadeDataDivideInt(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 5), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.FULL)), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(Axis.AXIS_2)), passBool(equal(100.0, 100.0)))
28
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 91)
11
index
2
2
10
add node
DropoutLayer
after make
NNLearner(ARG0, OutputLayer(ARG0, DropoutLayer(1.0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)))), 91)
NNLearner(ARG0, OutputLayer(ARG0, DropoutLayer(1.0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)))), 91)
ImagePeakFinder(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2)
4
MeanFilter(adf_0(ARG0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), greaterThan(100.0, 2.211944758392791))
10
MorphCloseCross(MorphCloseEllipse(GradientWeighted(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 7, 1.6592650150839496, 1.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), ifThenElseBool(falseBool, trueBool, trueBool), equal(-2.4180575544654737, 100.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myIntAdd(lessThanOrEqual(0.1, 10.0), lessThanOrEqual(1.0, 1.0)), myAnd(lessThan(0.01, 10.0), lessThanOrEqual(0.01, 100.0)))
40
ContourMaskMinExtent(EmadeDataNumpyMultiplyFloat(ThresholdToZeroFloat(EmadeDataNumpyMultiplyFloat(LowpassFilterUniform(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 100), TriState.FEATURES_TO_FEATURES, passAxis(Axis.FULL), myFloatDiv(1.0, 1.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), myFloatMult(myFloatAdd(-1.290955640033229, 10.0), 0.1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatDiv(10.0, myFloatSub(myFloatDiv(0.01, 0.01), passFloat(1.0)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), falseBool)
52
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(0, ARG0, randomUniformWeights, InputLayer(ARG0))), 93)
11
index
2
2
10
add node
AttentionLayer
after make
NNLearner(ARG0, OutputLayer(ARG0, AttentionLayer([], EmbeddingLayer(0, ARG0, randomUniformWeights, InputLayer(ARG0)))), 93)
NNLearner(ARG0, OutputLayer(ARG0, AttentionLayer(EmbeddingLayer(0, ARG0, randomUniformWeights, InputLayer(ARG0)), EmbeddingLayer(0, ARG0, randomUniformWeights, InputLayer(ARG0)))), 93)
Daisy(Cv2AbsDiff(Round(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), Prerejection(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 150, 3, 0.01), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThan(myFloatIntDiv(0.1, 95), myFloatIntMult(100.0, 1)), lessThanOrEqual(myFloatIntMult(-2.4033966752898586, 13), myFloatIntSub(0.1, 4)), myNot(myNot(falseBool)), myOr(ifThenElseBool(trueBool, falseBool, falseBool), greaterThan(0.1, 1.0)), 55)
53
myPCA(ARG0, TriState.FEATURES_TO_FEATURES, 100, falseBool)
5
RXAnomalyDetector(mySelFwe(ARG0, TriState.FEATURES_TO_FEATURES, 33, 10.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), ifThenElseFloat(trueBool, 1.0, 100.0))
14
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(93, ARG0, randomUniformWeights, InputLayer(ARG0))), 100)
11
index
2
2
10
add node
MaxPoolingLayer2D
after make
NNLearner(ARG0, OutputLayer(ARG0, MaxPoolingLayer2D(55, EmbeddingLayer(93, ARG0, randomUniformWeights, InputLayer(ARG0)))), 100)
NNLearner(ARG0, OutputLayer(ARG0, MaxPoolingLayer2D(55, EmbeddingLayer(93, ARG0, randomUniformWeights, InputLayer(ARG0)))), 100)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(8, ARG0, randomUniformWeights, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))))), 97)
17
index
8
8
16
add node
GlobalMaxPoolingLayer1D
after make
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(8, ARG0, randomUniformWeights, OutputLayer(ARG0, GlobalMaxPoolingLayer1D(EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)))))), 97)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(8, ARG0, randomUniformWeights, OutputLayer(ARG0, GlobalMaxPoolingLayer1D(EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)))))), 97)
HighpassFourierUniform(EmadeDataAddFloat(ContourMaskMinEnclosingCircle(myIfThenElse(ARG0, ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, 10), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatIntMult(0.01, 5)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myFloatDiv(ifThenElseFloat(trueBool, 4.645336856249276, 10.0), myFloatSub(10.0, 0.1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatToInt(myFloatIntMult(myFloatIntSub(0.1, 3), greaterThan(0.01, 1.0))))
48
Sine(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2)
4
MorphOpenCross(EqualizeDisk(EmadeDataIntegerDivide(HighpassUnsharpMask(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 2, 4, 32), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), ifThenElseFloat(falseBool, 0.01, 10.0)), TriState.STREAM_TO_STREAM, passAxis(passAxis(Axis.AXIS_2)), -3), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL))), myOr(myNot(trueBool), lessThan(myFloatSub(10.0, 1.0), passFloat(10.0))), passBool(greaterThan(myFloatMult(1.0, 1.2137787611428665), myFloatIntSub(3.854469707383876, 9))))
48
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(128, ARG0, randomUniformWeights, InputLayer(ARG0))), 2)
11
index
2
2
10
add node
LeakyReLULayer
after make
NNLearner(ARG0, OutputLayer(ARG0, LeakyReLULayer(falseBool, EmbeddingLayer(128, ARG0, randomUniformWeights, InputLayer(ARG0)))), 2)
NNLearner(ARG0, OutputLayer(ARG0, LeakyReLULayer(falseBool, EmbeddingLayer(128, ARG0, randomUniformWeights, InputLayer(ARG0)))), 2)
LocalPoolingMean(ContourMaskRangeExtent(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 10, 7), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), falseBool)
12
ContourMaskMaxArea(ECDF(Cv2LessThan(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), ifThenElseBool(falseBool, falseBool, trueBool)), TriState.STREAM_TO_FEATURES, Axis.FULL, 0.01)
20
ScalarAdd(StdDeviationHole(MySum(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), ifThenElseBool(falseBool, trueBool, falseBool), notEqual(10.0, 0.01)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), passFloat(passFloat(100.0)))
26
WindowBartlett(CopyStreamToTarget(ContourMaskRangeEquDiameter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 128, 4)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)))
14
ScalarAdd(ScalarMin(NormalLikelihood(ARG0, 64), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passInt(falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatAdd(ifThenElseFloat(trueBool, 0.01, 0.1), myFloatMult(10.0, 100.0)))
25
SavitzkyGolayFilter(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, -3, 7, 3)
7
MorphDilateCross(GetCentroids(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), greaterThan(0.01, -0.11553853002848147), lessThan(10.0, 0.01), 128)
16
Select1D(Cv2iDCT(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), passInt(64), ifThenElseBool(trueBool, falseBool, trueBool))
15
birch_clustering(Fraction(MyInformedSearch(ContourMaskMaxArea(BitwiseOr(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatDiv(3.902935830697686, 10.0)), mySelPercentile(ArcCosine(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), myNot(trueBool), myFloatToInt(10.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.FULL)), greaterThanEqual(myFloatAdd(0.1, 1.0), myFloatIntSub(10.0, 150)), ifThenElseFloat(myAnd(trueBool, trueBool), myFloatDiv(-1.069937810499355, 100.0), myFloatMult(0.1, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myAnd(greaterThan(ifThenElseFloat(trueBool, 100.0, 100.0), myFloatIntSub(10.0, 100)), lessThan(passFloat(100.0), myFloatIntDiv(4.381976693959436, 6)))), ifThenElseFloat(myNot(myNot(passBool(falseBool))), passFloat(myFloatMult(myFloatAdd(-4.570421268450316, 0.01), myFloatIntSub(0.1, 18))), myFloatMult(myFloatIntSub(myFloatAdd(0.01, 10.0), myFloatToInt(100.0)), passFloat(myFloatIntMult(0.01, 32)))), myNot(ifThenElseBool(passBool(ifThenElseBool(trueBool, trueBool, falseBool)), equal(myIntToFloat(3), myFloatSub(0.1, 0.1)), lessThanOrEqual(myFloatIntMult(100.0, 2), myFloatIntMult(4.84979375267932, 3)))), myIntSub(greaterThanEqual(myFloatIntDiv(myFloatDiv(100.0, 1.1005220885659615), ifThenElseBool(trueBool, trueBool, falseBool)), myFloatIntAdd(myIntToFloat(4), myNot(falseBool))), lessThanOrEqual(myFloatIntAdd(myFloatIntAdd(10.0, 50), myIntMult(5, 3)), myFloatSub(myFloatAdd(1.0, 0.1), ifThenElseFloat(falseBool, 1.0, 0.1)))))
156
MaxLoc(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2)
4
RichardsonLucy(ToUint8Scale(ThresholdBinaryFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 0.01, 1.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), passBool(greaterThan(100.0, 10.0)))
22
ContourMaskMaxEquDiameter(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 3)
5
Cv2GreaterThan(DohDetection(EqualizeDisk(ArcTangent(HighpassFourierShift(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 128), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), equal(myFloatSub(1.0, 100.0), myFloatIntMult(1.0, 32))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myFloatIntSub(ifThenElseFloat(greaterThan(100.0, 1.0), myFloatIntMult(100.0, -6), ifThenElseFloat(falseBool, 0.01, 10.0)), myAnd(myNot(falseBool), greaterThanEqual(100.0, 100.0))), myFloatIntDiv(myFloatIntSub(myFloatIntAdd(0.1, 7), greaterThanEqual(0.01, 1.149773193854145)), myIntMult(equal(-1.0006354747544122, 1.0), myIntDiv(50, 32))), myOr(myNot(lessThan(0.01, 0.01)), notEqual(myFloatMult(100.0, 1.710747811868588), myFloatDiv(1.0, 10.0))), ifThenElseFloat(lessThanOrEqual(myFloatIntDiv(0.01, 55), myFloatAdd(1.0, 0.1)), myFloatSub(myFloatMult(1.0, 0.01), passFloat(1.0)), myFloatSub(myFloatIntAdd(100.0, 4), myIntToFloat(3731))), ifThenElseFloat(myNot(myAnd(trueBool, falseBool)), myFloatDiv(myFloatIntDiv(0.1, 55), myFloatAdd(0.01, 10.0)), myFloatIntAdd(ifThenElseFloat(trueBool, 0.01, 100.0), myIntMult(6, 3)))), Log(LowpassFilterMedian(WindowHamming(NNLearner(ARG0, EmbeddingLayer(7, ARG0, randomUniformWeights, InputLayer(ARG0)), 39), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myOr(falseBool, trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), equal(passFloat(0.01), myFloatMult(100.0, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))))
178
SVCMulti(ARG0)
2
LowpassFilterAverage(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 5)
5
LowpassFilterGaussian(HighpassFourierGaussian(ObjectDetection(LowpassFilterEllipsoid(FractionDouble(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_1, 150), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), greaterThanEqual(0.01, 1.1431636772955667)), equal(myFloatDiv(100.0, 100.0), myFloatSub(0.1, 2.861585867378899)), myFloatIntSub(myFloatDiv(100.0, 0.01), greaterThanEqual(10.0, 10.0)), passFloat(myFloatIntSub(1.0, 150))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(Axis.AXIS_2)), ifThenElseBool(notEqual(myFloatIntMult(0.1, 2), passFloat(0.01)), lessThan(myFloatSub(0.01, 0.01), myIntToFloat(128)), greaterThanEqual(myFloatSub(-4.607665311816691, 10.0), passFloat(100.0)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), myAnd(notEqual(myFloatMult(myFloatIntDiv(1.0, 50), myFloatIntDiv(100.0, 150)), 0.12068462746823183), myNot(lessThanOrEqual(ifThenElseFloat(falseBool, 10.0, 1.0), 10.0))), equal(myFloatIntAdd(2.395309711455159, myIntDiv(myIntAdd(55, 4), myOr(trueBool, trueBool))), passFloat(myFloatDiv(myFloatAdd(0.1, 0.1), myFloatDiv(10.0, 0.1)))), myFloatMult(myFloatIntAdd(myFloatDiv(myFloatAdd(0.1, 3.599236787526239), myFloatIntAdd(100.0, 150)), myNot(ifThenElseBool(falseBool, trueBool, trueBool))), 0.9726263569726115), myFloatSub(ifThenElseFloat(ifThenElseBool(equal(0.01, 1.0), greaterThanEqual(0.1, 10.0), greaterThan(100.0, 0.01)), myFloatIntSub(passFloat(100.0), myNot(falseBool)), 0.01), myFloatIntAdd(myFloatIntDiv(passFloat(0.01), myIntDiv(150, 255)), myIntMult(lessThan(100.0, 1.0), myIntDiv(1, 55)))))
155
Cv2TemplateMatching(MaximumWindow(myConcatenate(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_0), notEqual(0.01, 0.1), lessThanOrEqual(100.0, 100.0), myFloatMult(0.5989678752557221, 10.0)), notEqual(myFloatSub(100.0, 1.0), myFloatIntAdd(0.1, 32)), myAnd(lessThanOrEqual(100.0, 10.0), equal(0.1, 100.0)))
32
ConvertBW(SelectRange(ThresholdToZeroPixelFloat(TfidfVectorizer(Cv2Add(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, Axis.FULL), greaterThan(1.0, 100.0), myNot(trueBool), passInt(64), myIntSub(7, 2)), ThresholdToZeroPixelFloat(Stemmatizer(ARG0, falseBool, 8), LowpassFilterGaussian(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 255, 64, 0.1, 0.01), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), ifThenElseBool(greaterThan(myFloatIntSub(10.0, 7), myFloatIntSub(2.879830603263221, 128)), myOr(lessThan(10.0, 100.0), lessThan(1.0, 10.0)), lessThan(myFloatSub(0.1, 1.0), myFloatSub(0.01, 100.0))), lessThan(myFloatDiv(myFloatIntDiv(100.0, 9), myFloatIntAdd(0.01, 10)), myFloatAdd(myFloatSub(100.0, 1.0), myFloatSub(0.1, 1.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))))
109
ThresholdBinaryInverse(TfidfVectorizer(ToFloatNorm(AbsoluteValue(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL)), passBool(lessThanOrEqual(1.0, 0.01)), notEqual(myFloatAdd(100.0, 10.0), myFloatIntAdd(0.1, 55)), notEqual(myFloatIntAdd(0.01, 3), myIntToFloat(1)), greaterThan(myFloatIntSub(100.0, 64), myFloatMult(0.01, 2.9593579154603313))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myFloatIntSub(myFloatMult(myFloatMult(100.0, 10.0), passFloat(10.0)), equal(myFloatSub(0.01, -2.8704754994918247), myFloatAdd(-3.8963734389255924, -1.425706702083934))))
57
Cv2iDFT(Cv2Pow(RandomNormal(MaxLoc(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), greaterThan(10.0, 2.183066584028529), greaterThan(2.0114790284316477, 100.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), myFloatToInt(myFloatDiv(0.01, -4.876999431474868))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))))
35
HighpassUnsharpMask(ConvertToCounts(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), lessThanOrEqual(3.2893726496579294, 10.0), myIntDiv(1296, 50), myOr(trueBool, falseBool))
18
MorphOpenRect(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 5, 50)
6
SVCMulti(AbsDiff(ContourMaskMinEquDiameter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 42), MySnapshot(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_2, trueBool), TriState.STREAM_TO_STREAM, passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_1)))
22
SelectRange(LocalPoolingMean(EqualizeAdaptHist(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0.01), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), greaterThanEqual(10.0, 100.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passInt(myAnd(falseBool, falseBool)), myFloatToInt(myFloatIntAdd(100.0, 50)))
28
NumpyDivide(NumNamedEntities(HashingVectorizer(Sentiment(MatchedFiltering2D(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 63, 0.1), greaterThan(100.0, 10.0)), myOr(ifThenElseBool(falseBool, falseBool, trueBool), greaterThan(0.01, 10.0)), myNot(lessThanOrEqual(3.5743410410976306, 100.0)), passBool(lessThan(10.0, 1.0)), myIntMult(myFloatToInt(1.0), ifThenElseBool(falseBool, trueBool, trueBool)))), ThresholdBinary(Prerejection(MorphOpenCross(Daisy(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 10, 32, 2710, falseBool, 8), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), greaterThanEqual(0.01, 100.0), myIntMult(50, 150)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myIntAdd(myNot(falseBool), equal(100.0, 0.1)), equal(myFloatMult(4.028142764245674, 10.0), myFloatIntMult(0.01, 32)), myFloatIntDiv(myFloatSub(10.0, 0.01), notEqual(0.01, 100.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myFloatDiv(myFloatIntMult(myFloatIntDiv(0.1, 0), greaterThanEqual(0.01, 0.1)), myFloatAdd(myFloatIntSub(0.01, 14), myFloatMult(3.614471924353671, 1.0))), lessThanOrEqual(myFloatSub(myFloatDiv(10.0, 1.0), myFloatIntMult(0.01, 32)), myIntToFloat(equal(-1.429476834409308, 1.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))))
139
HighpassSobelDerivative(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 4, 150, falseBool, 3, 50)
9
CornerDetectionHarris(CreateBBox(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_2, 100), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myFloatToInt(10.0), ifThenElseBool(trueBool, trueBool, falseBool), myFloatAdd(100.0, 0.1))
22
MorphBlackhatEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 10, falseBool)
6
ContoursMinLength(Cv2Max(MyInformedSearch(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.AXIS_2, 5, 100.0), WindowBlackmanHarris(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myIntSub(myFloatToInt(0.1), lessThan(0.1, 0.1)))
35
HighpassFourierShift(ContourMaskMinArea(GradientMagnitude(HighpassSobelDerivative(MorphDilateRect(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, falseBool, falseBool, 128), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), greaterThan(0.1, 2.786419304314806), myNot(trueBool), lessThanOrEqual(0.1, 100.0), ifThenElseBool(falseBool, trueBool, falseBool), equal(-4.984486114261609, 2.744725551219613)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myOr(greaterThan(-0.5400219523893224, 0.01), myNot(trueBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatIntSub(myFloatIntAdd(passFloat(0.01), greaterThan(10.0, 0.01)), greaterThan(myFloatDiv(0.1, 0.01), myFloatMult(100.0, 10.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myIntSub(notEqual(myFloatIntMult(myFloatMult(0.1, 100.0), greaterThan(0.1, 1.0)), myFloatSub(ifThenElseFloat(trueBool, 0.01, 100.0), myFloatSub(0.6816162362787317, 0.1))), myIntMult(myAnd(lessThanOrEqual(1.0, 0.1), lessThanOrEqual(0.01, 2.071621441502006)), equal(myFloatIntMult(0.1, 50), myFloatMult(100.0, 0.1)))))
106
CountVectorizer(RandomUniform(ImageAlignmentECC(AffinityPropagationClustering(ARG0, 100.0), MinimumFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 9621, -1.7933403997316133), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_0), myNot(trueBool), myFloatSub(1.0, 0.01), myIntSub(4, 150), myOr(trueBool, trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myIntDiv(myOr(trueBool, trueBool), greaterThan(1.0, 10.0)), lessThan(myFloatMult(0.1, 1.0), myFloatIntAdd(0.1, 50))), equal(myFloatDiv(myFloatMult(0.01, 1.0), myFloatAdd(0.01, 1.0)), myFloatAdd(myFloatIntSub(-4.421834917894127, 0), myFloatIntMult(1.0, 50))), lessThanOrEqual(myFloatIntSub(myFloatIntDiv(0.1, 64), greaterThan(1.0, 1.0)), myIntToFloat(equal(0.01, -1.684003098345955))), myIntDiv(passInt(myOr(trueBool, trueBool)), myIntSub(passInt(-1), myAnd(trueBool, falseBool))), notEqual(myFloatMult(myIntToFloat(trueBool), passFloat(0.1)), myFloatAdd(myFloatDiv(0.01, -0.7179046457343237), myFloatIntDiv(0.01, 64))))
102
birch_clustering(ARG0, 1.0, 128, 55)
5
TfidfVectorizer(ContourMaskMaxExtentEnclosingCircle(EmadeDataDivideInt(MyCumProd(WindowBartlettHann(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passBool(falseBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myIntSub(ifThenElseBool(trueBool, trueBool, trueBool), myFloatToInt(-1.156625349300752))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_0))), ifThenElseFloat(lessThanOrEqual(myIntToFloat(55), myFloatIntDiv(0.01, 8236)), myFloatIntSub(myFloatIntSub(0.1, 9), myFloatToInt(0.1)), myFloatMult(myFloatIntAdd(0.1, 4840), myFloatIntMult(0.01, 0)))), myAnd(myAnd(myAnd(notEqual(100.0, -2.0908387547565654), myAnd(falseBool, falseBool)), passBool(greaterThanEqual(100.0, 10.0))), passBool(greaterThanEqual(passFloat(100.0), myFloatIntAdd(4.206921233493558, trueBool)))), passBool(myNot(lessThanOrEqual(myFloatIntMult(100.0, 7), passFloat(10.0)))), myIntAdd(ifThenElseBool(lessThanOrEqual(myFloatIntSub(0.08504293347279912, 3), myFloatIntMult(100.0, 3)), greaterThan(myFloatDiv(10.0, 100.0), myFloatSub(10.0, 10.0)), myAnd(myAnd(trueBool, trueBool), passBool(falseBool))), lessThanOrEqual(myIntToFloat(greaterThanEqual(-1.4806748594311534, 3.399488015272997)), myFloatDiv(myFloatIntDiv(100.0, 10), myFloatSub(0.01, 100.0)))), myFloatToInt(myFloatIntDiv(myFloatMult(myFloatAdd(0.01, 1.0), myFloatIntMult(0.1, 7)), lessThanOrEqual(passFloat(100.0), myIntToFloat(9)))))
131
MyBinaryThreshold(MorphTophatEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 5, 64), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myIntToFloat(50))
13
ObjectDetection(Exponetial(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1), greaterThan(10.0, 0.1), myFloatDiv(0.1, 100.0), myFloatIntDiv(3.068791858278084, 50))
14
FractionDouble(Cv2NotEqual(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.AXIS_1), myVarThresh(ARG0, TriState.STREAM_TO_FEATURES, 1.0), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_2), greaterThanEqual(0.1, 1.0))
23
ContoursMaxLength(EmadeDataSubtractPair(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passInt(19))
14
SetToZeroIf<Data&Factor(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_2, trueBool)
8
ZeroOneNorm(InRange(BitwiseAnd(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_2), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myIntMult(9763, trueBool), myAnd(falseBool, falseBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)))
25
MorphDilateCross(WindowCosine(TfidfVectorizer(ThresholdBinaryMax(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 2, 4.756369171538907), lessThan(4.615731731583043, 0.01), myAnd(trueBool, trueBool), 32, falseBool), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2))), TriState.STREAM_TO_FEATURES, passAxis(passAxis(passAxis(Axis.AXIS_2))), lessThanOrEqual(myIntToFloat(myAnd(trueBool, falseBool)), myFloatSub(myFloatMult(0.1, 100.0), myFloatAdd(0.01, 10.0))), myIntSub(64, myAnd(passBool(falseBool), greaterThanEqual(0.1, 100.0))), greaterThanEqual(myFloatDiv(myFloatIntAdd(1.0, 100), myFloatSub(1.0, -1.80813709854006)), 100.0))
57
LocalPoolingMean(MaximumFilter(Cv2LessThanOrEqual(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), equal(100.0, 1.0), myFloatIntAdd(0.1, 64)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), lessThan(ifThenElseFloat(trueBool, 10.0, 0.1), myFloatIntMult(100.0, 255)))
33
CornerDetectionHarris(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 255, 4, 0.1)
7
ConvertToCounts(EmadeDataAddPairTriple(MedianFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, -5), mySelKBest(ARG0, TriState.STREAM_TO_STREAM, 5, 150), Tangent(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)))
34
Cv2LessThan(PeakFinder(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 1.0, 32), ContourMaskMaxExtent(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 55), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.FULL))
20
BitwiseAnd(MorphOpenCross(LowpassFilterMedian(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 3), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), notEqual(10.0, 10.0), greaterThan(10.0, 0.1)), WindowKaiser(ContourMaskMaxExtentEnclosingCircle(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 0.01), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), myFloatSub(10.0, 0.1), lessThan(0.01, 0.01)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.FULL)))
45
BitwiseAnd(MaximumFilter(StandardNorm(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myFloatToInt(1.0), myFloatMult(100.0, -1.6926463904297915)), ArcCosine(ImageAlignmentECC(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.AXIS_0, 50, 0.1, 8, -3), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passAxis(passAxis(Axis.FULL)))
43
Cv2Multiply(MultiplyTransposed(MorphErosionEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 3, 5, 32), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myNot(falseBool)), Select1D(NumNamedEntities(ARG0), passTriState(TriState.STREAM_TO_FEATURES), Axis.AXIS_0, myOr(falseBool, falseBool), lessThanOrEqual(0.1, -2.433276027963754)), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_2)))
37
MorphCloseEllipse(ARG0, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myAnd(myAnd(trueBool, equal(0.01, 0.01)), passBool(lessThanOrEqual(10.0, 1.0))), myNot(passBool(myOr(trueBool, falseBool))))
21
NumNamedEntities(ThresholdBinaryFloat(InRange(EmadeDataSubtractFloat(myPCA(ARG0, TriState.FEATURES_TO_FEATURES, falseBool, trueBool), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), ifThenElseFloat(trueBool, 0.01, 10.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), ifThenElseBool(myNot(falseBool), equal(1.0, 0.1), notEqual(0.1, 1.0)), greaterThanEqual(myFloatIntSub(0.1, 8), myFloatSub(0.5924658640746303, 10.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), passFloat(100.0), myFloatIntDiv(myFloatIntSub(myFloatDiv(0.1, 10.0), myNot(trueBool)), 50)))
57
SepDetectionWindow(ARG0, 1, 9, 1.0)
5
Cv2DFTReal(Cv2iDCT(Tangent(MultiplySpectrum(Cv2Divide(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_1), ARG0, passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(Axis.FULL))))
43
EmadeDataSubtractPair(ContourMaskMinArea(RandomUniform(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 4, 3), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), myFloatIntSub(0.1, falseBool)), TfidfVectorizer(Cv2Max(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_1), myNot(trueBool), myIntDiv(5, 7), greaterThan(0.01, 0.1), myIntSub(8, 55)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(TriState.STREAM_TO_FEATURES), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_2)))
45
MinimumFilter(ARG0, passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(Axis.AXIS_2), myIntSub(myAnd(myNot(trueBool), myOr(trueBool, trueBool)), myFloatToInt(myFloatIntMult(1.0, 10))), myFloatIntAdd(myFloatAdd(myFloatIntDiv(4.282246433732688, 32), ifThenElseFloat(falseBool, 0.1, 0.01)), myIntAdd(notEqual(-0.8743802203502646, 100.0), 128)))
33
RemoveFeature(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 1)
5
LogDetection(Cv2Pow(MeanFilter(ContourMaskMaxExtentEnclosingCircle(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatToInt(0.1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThan(myFloatDiv(-3.4316643674859906, 100.0), myFloatMult(-3.9664146998609673, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2))), passFloat(myFloatIntAdd(myFloatMult(10.0, 0.01), myFloatToInt(0.01))), ifThenElseFloat(notEqual(myFloatMult(0.1, 0.01), myFloatIntDiv(0.1, 4)), passFloat(myIntToFloat(99)), myFloatIntDiv(ifThenElseFloat(falseBool, 10.0, 0.01), equal(10.0, 0.1))), lessThan(ifThenElseFloat(notEqual(100.0, 0.01), myFloatIntDiv(0.01, 32), myFloatIntDiv(10.0, 64)), myFloatIntDiv(ifThenElseFloat(falseBool, 0.01, -3.1611027872158415), lessThan(0.01, 0.01))), myFloatMult(myFloatMult(myFloatDiv(10.0, 1.0), myFloatIntMult(0.1, 83)), myFloatAdd(myFloatDiv(-0.19263036148403323, -1.3909339498826565), myFloatIntSub(0.01, 10))), myFloatMult(myIntToFloat(myIntSub(4, 1)), myFloatDiv(myFloatIntSub(-4.661708200468498, 0), myIntToFloat(64))))
106
ECDF(Cosine(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myIntAdd(4, 150))
12
FilterCentroids(ARG0)
2
EmadeDataNumpyMultiplyInt(EmadeDataIntegerDivide(ThresholdBinaryInverseMask(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 100.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), passFloat(0.01)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), myNot(lessThan(0.01, 0.01)))
23
adf_0(ARG0)
2
CornerDetectionHarris(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 6, 32, 0.1)
7
Stemmatizer(ARG0, 98, 64)
4
GradientMagnitude(OtsuBinaryThreshold(ZeroOneNorm(SepDetectionWindow(Tfisf(ARG0, falseBool, 9, 100, 5), myIntMult(0, falseBool), myIntAdd(6, 150), myFloatIntDiv(100.0, 95)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatToInt(myFloatIntSub(ifThenElseFloat(trueBool, 10.0, -3.7605739694579556), greaterThan(100.0, 1.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), lessThanOrEqual(myFloatIntDiv(myFloatMult(passFloat(100.0), myFloatDiv(0.01, 0.01)), greaterThanEqual(myFloatIntSub(2.4152168463659986, 255), myFloatIntMult(10.0, 9))), myFloatSub(myFloatIntAdd(myFloatDiv(1.0, 10.0), passInt(255)), ifThenElseFloat(equal(-0.8829206295705507, 1.0), passFloat(1.0), myFloatAdd(0.1, 100.0)))))
83
WindowTurkey(GaussianFilter(Cv2GreaterThan(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_2, Axis.AXIS_2), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatSub(1.9137812026761676, 10.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myFloatAdd(myFloatIntDiv(0.1, 100), myFloatSub(100.0, 100.0)))
29
LogDetection(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 0.1, 0.1, 5, 0.1, 10.0)
9
Round(MorphOpenEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 9132, 55), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1))
11
rmsHole(Cosine(MorphErosionCross(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 55, 32, -15), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), notEqual(myFloatIntAdd(1.0, 2), myFloatSub(0.1, 0.1)), myFloatToInt(myFloatSub(1.0, 10.0)))
30
FractionTriple(EqualizeDisk(SkiMedianFilter(Correlation(adf_1(ARG0), MyDWT(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 64), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), myIntDiv(passBool(trueBool), myIntMult(8, -3))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), notEqual(myFloatIntDiv(myFloatIntAdd(1.0, 255), greaterThan(0.1, 3.526481380461826)), myFloatMult(myFloatSub(10.0, 0.01), myFloatIntAdd(1.0, 100)))), EqualizeHist(MinimumFilter(mySpectralEmbedding(RXAnomalyDetector(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 0.3499789971259881), passTriState(TriState.STREAM_TO_FEATURES), greaterThan(1.0, 100.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myIntAdd(passInt(39), passInt(4)), myFloatIntDiv(myFloatIntMult(-0.11308845024453529, 32), myIntSub(5, 100))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL)))), GaussianPeakEM(ThresholdBinaryInverse(myICA(MorphGradientCross(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, -8, 50), passTriState(TriState.STREAM_TO_STREAM), myNot(falseBool), equal(0.1, -1.4327985470199565)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), ifThenElseFloat(myAnd(trueBool, falseBool), myFloatIntSub(1.0, 2), myFloatIntDiv(10.0, 50))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_0)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myAnd(ifThenElseBool(myOr(notEqual(0.1, -2.8222104328678252), greaterThan(0.1, 0.1)), myOr(equal(0.1, -3.1907020416019174), notEqual(10.0, 1.705837006246771)), myOr(ifThenElseBool(trueBool, falseBool, falseBool), passBool(trueBool))), equal(myFloatIntDiv(myFloatDiv(10.0, 0.01), myIntSub(5, 1145)), myFloatAdd(myFloatIntAdd(1.0, 10), myFloatDiv(1.0, 100.0)))))
201
Cv2Max(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.FULL)
7
ContourMaskMinEnclosingCircle(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 0.1)
5
Cv2Log(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0)
4
myVarThresh(CrossCorrelation(MorphErosionCross(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 8, 10, -10), ScalarAdd(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 1.0), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), myFloatIntSub(myIntToFloat(9526), lessThan(0.1, 0.1)))
31
BackgroundSubtraction(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0)
4
SEPObjectDetection(Select3D(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 9982, 7, 32, 8, 9, 8), 1, -1.2843788976633053, myFloatDiv(2.5396375880965714, 100.0))
16
AccumulateWeighted(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 10.0)
5
MyBinaryThreshold(DogDetection(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 2.668424135929646, 0.01, 1.0, 1.0, 1.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatIntMult(4.8187034061225305, 7))
17
SVCMulti(ARG0)
2
ContourMaskRangeExtent(mySpectralEmbedding(ARG0, TriState.FEATURES_TO_FEATURES, 1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myNot(falseBool), myFloatToInt(0.1))
13
MultiplySpectrum(HighpassSobelDerivative(RandomShuffle(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myIntAdd(128, 150), 9, myAnd(falseBool, trueBool), myAnd(falseBool, trueBool), 55), ToUint8Scale(ThresholdBinary(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 0.01, 8), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1)), passTriState(TriState.STREAM_TO_FEATURES), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.AXIS_0)))
43
EqualizeAdaptHist(NumpyDivide(LowpassFilterEllipsoid(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 1), MyProd(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myFloatIntAdd(passFloat(0.1), greaterThan(1.0, 100.0)))
31
SEPObjectDetection(RXAnomalyDetector(MeanFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 255), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatIntAdd(1.0, 64)), equal(myFloatMult(10.0, 0.01), myFloatIntDiv(10.0, 150)), ifThenElseFloat(equal(0.01, 10.0), myFloatIntMult(3.583412099880775, falseBool), myFloatMult(-3.3493610274573395, 0.01)), myFloatIntDiv(passFloat(0.1), myIntDiv(1, 128)))
37
InRange(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 5, 55)
6
Stemmatizer(LocalPoolingMedian(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 9), lessThan(100.0, 2.8329254343064916), notEqual(10.0, 100.0))
12
Learner(RandomShuffle(MinimumFilter(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 255, 10.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0)), ModifyLearnerList(ModifyLearnerFloat(LearnerType('KNN', {'K': 3, 'weights': 0}), 0.1, 3), passList(EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), greaterThanEqual(10.0, 0.1)), ModifyEnsembleInt(ModifyEnsembleFloat(EnsembleType('BAGGED', None), 100.0, 10), lessThan(100.0, 1.0), passInt(50)))
37
ThresholdBinaryMax(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, trueBool, 0.1644533802934074)
6
mySubSampleData(ARG0, 4, 3)
4
ThresholdBinaryMax(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 9, -1.5343896162893955)
6
MorphTophatEllipse(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 7, 2)
6
WindowPlanckTaper(b-spline(WindowLanczos(Cv2Divide(MyAverager(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 9), MyAutoCorr(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), myIntToFloat(equal(myFloatSub(passFloat(0.8425333993447115), myFloatMult(0.1, -0.09814325781197031)), ifThenElseFloat(greaterThan(0.1, 0.1), myFloatMult(1.0, 4.0367555739795264), myFloatIntMult(0.1, falseBool)))))
63
LowpassFilterMedian(CCorrObjectFilter(ARG0, ARG0, 4, 1.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), equal(-0.10305461821649331, 0.01))
13
StdDeviationHole(MyCumSum(RegionalMaxima(ThresholdBinaryInverseMask(ContourMaskMinExtent(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 64), TriState.FEATURES_TO_FEATURES, passAxis(Axis.AXIS_0), myFloatIntMult(-3.748829619063331, 1)), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), 3.9954131790236964), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), Axis.AXIS_2, passBool(trueBool)), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(Axis.AXIS_0), greaterThanEqual(ifThenElseFloat(greaterThan(myFloatIntDiv(1.0877889728248924, 1), 1.0), myIntToFloat(myIntDiv(5, 100)), myFloatIntMult(passFloat(0.01), myNot(trueBool))), myFloatIntSub(-3.847775854981872, passBool(lessThanOrEqual(0.08960161656990628, 100.0)))), myAnd(lessThanOrEqual(myFloatIntSub(myFloatDiv(0.1, 0.01), 255), 100.0), lessThanOrEqual(myFloatMult(myFloatSub(0.1, 0.1), myFloatDiv(10.0, 10.0)), myFloatMult(myFloatDiv(100.0, 0.1), ifThenElseFloat(trueBool, 0.01, 100.0)))))
80
Cv2Max(WindowBackmanNuttall(b-spline(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), ThresholdBinaryInverseMask(Cv2GreaterThanOrEqual(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myFloatSub(0.1, 0.1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_1)))
37
Supersampling(WindowKaiser(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 0.1, falseBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatAdd(2.6235660748067255, 3.46166170897906), myOr(trueBool, trueBool))
17
MorphErosionEllipse(MorphDilateEllipse(Cv2Divide(MorphGradientEllipse(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 100, 128), StdDeviationHoleCustom(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.AXIS_0, trueBool, 4), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), 10, myOr(myNot(trueBool), trueBool), myIntSub(myIntAdd(9, 1), passBool(falseBool))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), lessThan(4.097480322861756, 100.0), myAnd(myOr(myAnd(trueBool, falseBool), equal(10.0, 0.1)), greaterThanEqual(100.0, 0.1)), myFloatToInt(10.0))
67
Mutated 122 individuals
Mutating offspring (Remove Layer)
ContoursMaxArea(ARG0, passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), passBool(falseBool))
ContoursMaxArea(ARG0, passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), passBool(falseBool))
NNLearner(ARG0, OutputLayer(ARG0, AttentionLayer(EmbeddingLayer(93, ARG0, randomUniformWeights, InputLayer(Cv2AddWeighted(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.FULL, 0, 92))), EmbeddingLayer(93, ARG0, randomUniformWeights, InputLayer(Cv2AddWeighted(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.FULL, 0, 92))))), 255)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(93, ARG0, randomUniformWeights, InputLayer(Cv2AddWeighted(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.FULL, 0, 92)))), 255)
BackgroundSubtraction(Rebase(SelectRange(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, -12, falseBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1)), passTriState(TriState.STREAM_TO_FEATURES), passAxis(passAxis(Axis.AXIS_0)))
BackgroundSubtraction(Rebase(SelectRange(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, -12, falseBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1)), passTriState(TriState.STREAM_TO_FEATURES), passAxis(passAxis(Axis.AXIS_0)))
BitwiseOr(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, Axis.FULL)
BitwiseOr(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, Axis.FULL)
ThresholdToZeroPixelFloat(ARG0, ARG0, passTriState(passTriState(TriState.STREAM_TO_FEATURES)), TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, Axis.FULL)
ThresholdToZeroPixelFloat(ARG0, ARG0, passTriState(passTriState(TriState.STREAM_TO_FEATURES)), TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, Axis.FULL)
MinimumFilter(ARG0, passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), lessThanOrEqual(ifThenElseFloat(passBool(falseBool), myFloatDiv(myFloatAdd(-1.9375893314771728, 10.0), myFloatDiv(100.0, 0.1)), myFloatMult(myFloatIntMult(0.01, trueBool), myFloatIntDiv(0.01, 0))), myFloatIntMult(myFloatSub(ifThenElseFloat(falseBool, 100.0, 100.0), myFloatIntAdd(1.0, 93)), 64)), myFloatMult(myFloatIntMult(0.01, myIntAdd(1, greaterThan(10.0, 1.0))), passFloat(myFloatIntSub(myFloatIntSub(10.0, 100), greaterThanEqual(10.0, 100.0)))))
MinimumFilter(ARG0, passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), lessThanOrEqual(ifThenElseFloat(passBool(falseBool), myFloatDiv(myFloatAdd(-1.9375893314771728, 10.0), myFloatDiv(100.0, 0.1)), myFloatMult(myFloatIntMult(0.01, trueBool), myFloatIntDiv(0.01, 0))), myFloatIntMult(myFloatSub(ifThenElseFloat(falseBool, 100.0, 100.0), myFloatIntAdd(1.0, 93)), 64)), myFloatMult(myFloatIntMult(0.01, myIntAdd(1, greaterThan(10.0, 1.0))), passFloat(myFloatIntSub(myFloatIntSub(10.0, 100), greaterThanEqual(10.0, 100.0)))))
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(8, ARG0, randomUniformWeights, OutputLayer(ARG0, GlobalMaxPoolingLayer2D(EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)))))), 26)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(8, ARG0, randomUniformWeights, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))))), 26)
RemoveFeature(MultiplyTransposed(LowpassFilterUniform(KalmanFilter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 10.0, 0.01), TriState.STREAM_TO_FEATURES, Axis.FULL, 55), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myAnd(falseBool, trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myIntMult(myNot(trueBool), lessThan(0.1, 0.1)))
RemoveFeature(MultiplyTransposed(LowpassFilterUniform(KalmanFilter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 10.0, 0.01), TriState.STREAM_TO_FEATURES, Axis.FULL, 55), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myAnd(falseBool, trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myIntMult(myNot(trueBool), lessThan(0.1, 0.1)))
MatchedFiltering(WindowGaussian(ARG0, passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatAdd(0.01, 10.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), ifThenElseBool(lessThan(0.01, 0.1), myOr(trueBool, falseBool), ifThenElseBool(falseBool, trueBool, trueBool)))
MatchedFiltering(WindowGaussian(ARG0, passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatAdd(0.01, 10.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), ifThenElseBool(lessThan(0.01, 0.1), myOr(trueBool, falseBool), ifThenElseBool(falseBool, trueBool, trueBool)))
WindowPlanckTaper(EmadeDataMultiplyPair(Tangent(Cv2Pow(DogDetection(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 1.0, 10.0, 0.01, 0.01, 10.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myIntSub(64, 2)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), Axis.FULL), TfidfVectorizer(ContourMaskMaxExtentEnclosingCircle(HighpassSobelDerivative(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 2, 150, 0, 64, 100), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatMult(0.38169670497076513, 100.0)), passBool(greaterThan(100.0, -3.6156775163290353)), notEqual(passFloat(0.1), myFloatSub(0.1, 1.0)), lessThan(myIntToFloat(50), ifThenElseFloat(trueBool, 100.0, 2.1130843797060486)), equal(myFloatAdd(0.1, 1.0), passFloat(0.1))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), TriState.STREAM_TO_FEATURES, passAxis(passAxis(passAxis(Axis.FULL))), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myFloatIntAdd(myFloatIntMult(myFloatAdd(1.0, myIntToFloat(7662)), greaterThan(ifThenElseFloat(trueBool, 0.1, 1.0), myFloatAdd(0.1, 100.0))), notEqual(myFloatIntDiv(myFloatIntDiv(0.1, 10), myIntDiv(255, 9)), myFloatSub(myFloatIntDiv(1.3155389106398196, trueBool), myFloatIntDiv(1.0, 9)))))
WindowPlanckTaper(EmadeDataMultiplyPair(Tangent(Cv2Pow(DogDetection(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 1.0, 10.0, 0.01, 0.01, 10.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myIntSub(64, 2)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), Axis.FULL), TfidfVectorizer(ContourMaskMaxExtentEnclosingCircle(HighpassSobelDerivative(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 2, 150, 0, 64, 100), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatMult(0.38169670497076513, 100.0)), passBool(greaterThan(100.0, -3.6156775163290353)), notEqual(passFloat(0.1), myFloatSub(0.1, 1.0)), lessThan(myIntToFloat(50), ifThenElseFloat(trueBool, 100.0, 2.1130843797060486)), equal(myFloatAdd(0.1, 1.0), passFloat(0.1))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), TriState.STREAM_TO_FEATURES, passAxis(passAxis(passAxis(Axis.FULL))), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myFloatIntAdd(myFloatIntMult(myFloatAdd(1.0, myIntToFloat(7662)), greaterThan(ifThenElseFloat(trueBool, 0.1, 1.0), myFloatAdd(0.1, 100.0))), notEqual(myFloatIntDiv(myFloatIntDiv(0.1, 10), myIntDiv(255, 9)), myFloatSub(myFloatIntDiv(1.3155389106398196, trueBool), myFloatIntDiv(1.0, 9)))))
EmadeDataNumpyMultiplyFloat(MyCumSum(MyCumSum(CenterOfMass(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), lessThanOrEqual(0.01, 0.01)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), greaterThanEqual(myFloatDiv(-1.7849765477596624, 0.01), 0.1)), passTriState(TriState.STREAM_TO_STREAM), passAxis(passAxis(Axis.FULL)), myFloatSub(ifThenElseFloat(myOr(falseBool, trueBool), myFloatIntMult(1.0, 9), 1.0), passFloat(myFloatIntDiv(1.0, 5))))
EmadeDataNumpyMultiplyFloat(MyCumSum(MyCumSum(CenterOfMass(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), lessThanOrEqual(0.01, 0.01)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), greaterThanEqual(myFloatDiv(-1.7849765477596624, 0.01), 0.1)), passTriState(TriState.STREAM_TO_STREAM), passAxis(passAxis(Axis.FULL)), myFloatSub(ifThenElseFloat(myOr(falseBool, trueBool), myFloatIntMult(1.0, 9), 1.0), passFloat(myFloatIntDiv(1.0, 5))))
Cv2Sqrt(LabelByCenterOfMass(Cv2Equal(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.AXIS_1), ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), Axis.AXIS_1)
Cv2Sqrt(LabelByCenterOfMass(Cv2Equal(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.AXIS_1), ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), Axis.AXIS_1)
SetToZeroIf>Data&Factor(ContoursMaxLength(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 8), ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_0), myFloatIntSub(10.0, 4666))
SetToZeroIf>Data&Factor(ContoursMaxLength(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 8), ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_0), myFloatIntSub(10.0, 4666))
NNLearner(ARG0, OutputLayer(ARG0, DropoutLayer(1.0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)))), 91)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 91)
MorphErosionEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 5, 64, 8)
MorphErosionEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 5, 64, 8)
MeanFilter(adf_0(ARG0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), greaterThan(100.0, 2.211944758392791))
MeanFilter(adf_0(ARG0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), greaterThan(100.0, 2.211944758392791))
ThresholdToZero(RMS2D(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passFloat(10.0))
ThresholdToZero(RMS2D(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passFloat(10.0))
ContourMaskMinExtent(EmadeDataNumpyMultiplyFloat(ThresholdToZeroFloat(EmadeDataNumpyMultiplyFloat(LowpassFilterUniform(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 100), TriState.FEATURES_TO_FEATURES, passAxis(Axis.FULL), myFloatDiv(1.0, 1.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), myFloatMult(myFloatAdd(-1.290955640033229, 10.0), 0.1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatDiv(10.0, myFloatSub(myFloatDiv(0.01, 0.01), passFloat(1.0)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), falseBool)
ContourMaskMinExtent(EmadeDataNumpyMultiplyFloat(ThresholdToZeroFloat(EmadeDataNumpyMultiplyFloat(LowpassFilterUniform(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 100), TriState.FEATURES_TO_FEATURES, passAxis(Axis.FULL), myFloatDiv(1.0, 1.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), myFloatMult(myFloatAdd(-1.290955640033229, 10.0), 0.1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatDiv(10.0, myFloatSub(myFloatDiv(0.01, 0.01), passFloat(1.0)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), falseBool)
NNLearner(ARG0, OutputLayer(ARG0, AttentionLayer(EmbeddingLayer(0, ARG0, randomUniformWeights, InputLayer(ARG0)), EmbeddingLayer(0, ARG0, randomUniformWeights, InputLayer(ARG0)))), 93)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(0, ARG0, randomUniformWeights, InputLayer(ARG0))), 93)
MorphGradientEllipse(EmadeDataAddPairTriple(ARG0, ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_0, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), notEqual(10.0, 100.0), passBool(falseBool))
MorphGradientEllipse(EmadeDataAddPairTriple(ARG0, ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_0, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), notEqual(10.0, 100.0), passBool(falseBool))
SpectralClustering(StandardNorm(ARG0, TriState.STREAM_TO_STREAM, passAxis(passAxis(passAxis(Axis.AXIS_0)))), lessThan(myFloatIntAdd(myFloatIntDiv(myFloatSub(0.1, 0.1), passInt(10)), notEqual(-4.863904585918977, 0.01)), myFloatSub(0.01, myIntToFloat(lessThanOrEqual(10.0, 100.0)))), 0.1)
SpectralClustering(StandardNorm(ARG0, TriState.STREAM_TO_STREAM, passAxis(passAxis(passAxis(Axis.AXIS_0)))), lessThan(myFloatIntAdd(myFloatIntDiv(myFloatSub(0.1, 0.1), passInt(10)), notEqual(-4.863904585918977, 0.01)), myFloatSub(0.01, myIntToFloat(lessThanOrEqual(10.0, 100.0)))), 0.1)
MultiplyTransposed(GaussianFilter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 0.1), TriState.STREAM_TO_FEATURES, Axis.AXIS_1, trueBool)
MultiplyTransposed(GaussianFilter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 0.1), TriState.STREAM_TO_FEATURES, Axis.AXIS_1, trueBool)
MorphDilateRect(ARG0, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myIntMult(6536, 2), ifThenElseBool(trueBool, trueBool, trueBool), myIntAdd(6, falseBool))
MorphDilateRect(ARG0, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myIntMult(6536, 2), ifThenElseBool(trueBool, trueBool, trueBool), myIntAdd(6, falseBool))
NNLearner(ARG0, OutputLayer(ARG0, MaxPoolingLayer2D(55, EmbeddingLayer(93, ARG0, randomUniformWeights, InputLayer(ARG0)))), 100)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(93, ARG0, randomUniformWeights, InputLayer(ARG0))), 100)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(8, ARG0, randomUniformWeights, OutputLayer(ARG0, GlobalMaxPoolingLayer1D(EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)))))), 97)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(8, ARG0, randomUniformWeights, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))))), 97)
HighpassFourierUniform(EmadeDataAddFloat(ContourMaskMinEnclosingCircle(myIfThenElse(ARG0, ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, 10), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatIntMult(0.01, 5)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myFloatDiv(ifThenElseFloat(trueBool, 4.645336856249276, 10.0), myFloatSub(10.0, 0.1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatToInt(myFloatIntMult(myFloatIntSub(0.1, 3), greaterThan(0.01, 1.0))))
HighpassFourierUniform(EmadeDataAddFloat(ContourMaskMinEnclosingCircle(myIfThenElse(ARG0, ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, 10), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatIntMult(0.01, 5)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myFloatDiv(ifThenElseFloat(trueBool, 4.645336856249276, 10.0), myFloatSub(10.0, 0.1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatToInt(myFloatIntMult(myFloatIntSub(0.1, 3), greaterThan(0.01, 1.0))))
EmadeDataIntegerDividePair(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_0)
EmadeDataIntegerDividePair(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_0)
ContourMaskRangeEnclosingCircle(Prerejection(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 100, 8, 100.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myNot(trueBool), myFloatToInt(100.0))
ContourMaskRangeEnclosingCircle(Prerejection(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 100, 8, 100.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myNot(trueBool), myFloatToInt(100.0))
NNLearner(ARG0, OutputLayer(ARG0, LeakyReLULayer(falseBool, EmbeddingLayer(128, ARG0, randomUniformWeights, InputLayer(ARG0)))), 2)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(128, ARG0, randomUniformWeights, InputLayer(ARG0))), 2)
LocalPoolingMean(ContourMaskRangeExtent(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 10, 7), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), falseBool)
LocalPoolingMean(ContourMaskRangeExtent(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 10, 7), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), falseBool)
ifThenElseDataPair(myAnd(lessThan(0.1, 100.0), lessThanOrEqual(-1.1053931078326817, 0.01)), Sentiment(EqualizeHist(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2), lessThanOrEqual(2.179164949911037, 100.0)), Hog(ThresholdBinaryInverseMask(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0.1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), notEqual(10.0, -2.7825794632864485), lessThan(2.353321011069508, 10.0), notEqual(0.1, 0.1), myIntAdd(128, 10)))
ifThenElseDataPair(myAnd(lessThan(0.1, 100.0), lessThanOrEqual(-1.1053931078326817, 0.01)), Sentiment(EqualizeHist(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2), lessThanOrEqual(2.179164949911037, 100.0)), Hog(ThresholdBinaryInverseMask(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0.1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), notEqual(10.0, -2.7825794632864485), lessThan(2.353321011069508, 10.0), notEqual(0.1, 0.1), myIntAdd(128, 10)))
MaximumFilter(HighpassFourierShift(ScalarDivide(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 1.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), lessThan(100.0, 100.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myIntDiv(lessThan(2.7127284278986945, 0.01), ifThenElseBool(trueBool, falseBool, falseBool)), myFloatMult(myFloatMult(1.0, 100.0), myFloatSub(100.0, 10.0)))
MaximumFilter(HighpassFourierShift(ScalarDivide(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 1.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), lessThan(100.0, 100.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myIntDiv(lessThan(2.7127284278986945, 0.01), ifThenElseBool(trueBool, falseBool, falseBool)), myFloatMult(myFloatMult(1.0, 100.0), myFloatSub(100.0, 10.0)))
MatchedFiltering(mySelFdr(mySelFwe(ARG0, TriState.STREAM_TO_FEATURES, 1, 10.0), passTriState(TriState.FEATURES_TO_FEATURES), lessThanOrEqual(10.0, -2.7563858572238544), myFloatDiv(0.01, -2.136480350665868)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myIntSub(equal(10.0, 100.0), notEqual(10.0, 0.01)))
MatchedFiltering(mySelFdr(mySelFwe(ARG0, TriState.STREAM_TO_FEATURES, 1, 10.0), passTriState(TriState.FEATURES_TO_FEATURES), lessThanOrEqual(10.0, -2.7563858572238544), myFloatDiv(0.01, -2.136480350665868)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myIntSub(equal(10.0, 100.0), notEqual(10.0, 0.01)))
ScalarAdd(ScalarMin(NormalLikelihood(ARG0, 64), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passInt(falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatAdd(ifThenElseFloat(trueBool, 0.01, 0.1), myFloatMult(10.0, 100.0)))
ScalarAdd(ScalarMin(NormalLikelihood(ARG0, 64), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passInt(falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatAdd(ifThenElseFloat(trueBool, 0.01, 0.1), myFloatMult(10.0, 100.0)))
GaussianPeakEM(myICA(BackgroundSubtraction(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), myOr(trueBool, trueBool), myNot(trueBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)))
GaussianPeakEM(myICA(BackgroundSubtraction(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), myOr(trueBool, trueBool), myNot(trueBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)))
RandomShuffle(mySelGenUni(HighpassUnsharpMask(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 255, 0, 32), passTriState(TriState.FEATURES_TO_FEATURES), lessThan(0.01, 0.1), myIntAdd(8, -10), myFloatAdd(100.0, 0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)))
RandomShuffle(mySelGenUni(HighpassUnsharpMask(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 255, 0, 32), passTriState(TriState.FEATURES_TO_FEATURES), lessThan(0.01, 0.1), myIntAdd(8, -10), myFloatAdd(100.0, 0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)))
Select1D(Cv2iDCT(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), passInt(64), ifThenElseBool(trueBool, falseBool, trueBool))
Select1D(Cv2iDCT(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), passInt(64), ifThenElseBool(trueBool, falseBool, trueBool))
birch_clustering(Fraction(MyInformedSearch(ContourMaskMaxArea(BitwiseOr(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatDiv(3.902935830697686, 10.0)), mySelPercentile(ArcCosine(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), myNot(trueBool), myFloatToInt(10.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.FULL)), greaterThanEqual(myFloatAdd(0.1, 1.0), myFloatIntSub(10.0, 150)), ifThenElseFloat(myAnd(trueBool, trueBool), myFloatDiv(-1.069937810499355, 100.0), myFloatMult(0.1, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myAnd(greaterThan(ifThenElseFloat(trueBool, 100.0, 100.0), myFloatIntSub(10.0, 100)), lessThan(passFloat(100.0), myFloatIntDiv(4.381976693959436, 6)))), ifThenElseFloat(myNot(myNot(passBool(falseBool))), passFloat(myFloatMult(myFloatAdd(-4.570421268450316, 0.01), myFloatIntSub(0.1, 18))), myFloatMult(myFloatIntSub(myFloatAdd(0.01, 10.0), myFloatToInt(100.0)), passFloat(myFloatIntMult(0.01, 32)))), myNot(ifThenElseBool(passBool(ifThenElseBool(trueBool, trueBool, falseBool)), equal(myIntToFloat(3), myFloatSub(0.1, 0.1)), lessThanOrEqual(myFloatIntMult(100.0, 2), myFloatIntMult(4.84979375267932, 3)))), myIntSub(greaterThanEqual(myFloatIntDiv(myFloatDiv(100.0, 1.1005220885659615), ifThenElseBool(trueBool, trueBool, falseBool)), myFloatIntAdd(myIntToFloat(4), myNot(falseBool))), lessThanOrEqual(myFloatIntAdd(myFloatIntAdd(10.0, 50), myIntMult(5, 3)), myFloatSub(myFloatAdd(1.0, 0.1), ifThenElseFloat(falseBool, 1.0, 0.1)))))
birch_clustering(Fraction(MyInformedSearch(ContourMaskMaxArea(BitwiseOr(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatDiv(3.902935830697686, 10.0)), mySelPercentile(ArcCosine(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), myNot(trueBool), myFloatToInt(10.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.FULL)), greaterThanEqual(myFloatAdd(0.1, 1.0), myFloatIntSub(10.0, 150)), ifThenElseFloat(myAnd(trueBool, trueBool), myFloatDiv(-1.069937810499355, 100.0), myFloatMult(0.1, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myAnd(greaterThan(ifThenElseFloat(trueBool, 100.0, 100.0), myFloatIntSub(10.0, 100)), lessThan(passFloat(100.0), myFloatIntDiv(4.381976693959436, 6)))), ifThenElseFloat(myNot(myNot(passBool(falseBool))), passFloat(myFloatMult(myFloatAdd(-4.570421268450316, 0.01), myFloatIntSub(0.1, 18))), myFloatMult(myFloatIntSub(myFloatAdd(0.01, 10.0), myFloatToInt(100.0)), passFloat(myFloatIntMult(0.01, 32)))), myNot(ifThenElseBool(passBool(ifThenElseBool(trueBool, trueBool, falseBool)), equal(myIntToFloat(3), myFloatSub(0.1, 0.1)), lessThanOrEqual(myFloatIntMult(100.0, 2), myFloatIntMult(4.84979375267932, 3)))), myIntSub(greaterThanEqual(myFloatIntDiv(myFloatDiv(100.0, 1.1005220885659615), ifThenElseBool(trueBool, trueBool, falseBool)), myFloatIntAdd(myIntToFloat(4), myNot(falseBool))), lessThanOrEqual(myFloatIntAdd(myFloatIntAdd(10.0, 50), myIntMult(5, 3)), myFloatSub(myFloatAdd(1.0, 0.1), ifThenElseFloat(falseBool, 1.0, 0.1)))))
MaxLoc(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2)
MaxLoc(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2)
MyInformedSearch(ContourMaskMaxSolidity(SpectralClustering(ContourMaskMinLength(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 10.0), greaterThan(-4.409634329494464, 0.1), myIntToFloat(1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myFloatMult(myFloatIntDiv(0.1, 7993), myFloatAdd(-3.164378646300431, 0.01))), ContourMaskMinExtent(ContourMaskMinAspectRatio(MySnapshot(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.FULL, Axis.AXIS_2, 32), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), ifThenElseFloat(falseBool, 100.0, 1.8039063355072802)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), equal(myFloatMult(1.0, 1.0), myFloatMult(1.0, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), passAxis(passAxis(passAxis(Axis.FULL))), passInt(myIntMult(notEqual(0.1, 1.0), passInt(3))), myFloatIntSub(myFloatIntMult(ifThenElseFloat(trueBool, 1.0, 1.0), passBool(falseBool)), myAnd(lessThan(-0.7632607960436824, 0.01), equal(1.0, 1.0))))
MyInformedSearch(ContourMaskMaxSolidity(SpectralClustering(ContourMaskMinLength(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 10.0), greaterThan(-4.409634329494464, 0.1), myIntToFloat(1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myFloatMult(myFloatIntDiv(0.1, 7993), myFloatAdd(-3.164378646300431, 0.01))), ContourMaskMinExtent(ContourMaskMinAspectRatio(MySnapshot(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.FULL, Axis.AXIS_2, 32), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), ifThenElseFloat(falseBool, 100.0, 1.8039063355072802)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), equal(myFloatMult(1.0, 1.0), myFloatMult(1.0, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), passAxis(passAxis(passAxis(Axis.FULL))), passInt(myIntMult(notEqual(0.1, 1.0), passInt(3))), myFloatIntSub(myFloatIntMult(ifThenElseFloat(trueBool, 1.0, 1.0), passBool(falseBool)), myAnd(lessThan(-0.7632607960436824, 0.01), equal(1.0, 1.0))))
ContourMaskMaxEquDiameter(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 3)
ContourMaskMaxEquDiameter(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 3)
Cv2GreaterThan(DohDetection(EqualizeDisk(ArcTangent(HighpassFourierShift(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 128), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), equal(myFloatSub(1.0, 100.0), myFloatIntMult(1.0, 32))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myFloatIntSub(ifThenElseFloat(greaterThan(100.0, 1.0), myFloatIntMult(100.0, -6), ifThenElseFloat(falseBool, 0.01, 10.0)), myAnd(myNot(falseBool), greaterThanEqual(100.0, 100.0))), myFloatIntDiv(myFloatIntSub(myFloatIntAdd(0.1, 7), greaterThanEqual(0.01, 1.149773193854145)), myIntMult(equal(-1.0006354747544122, 1.0), myIntDiv(50, 32))), myOr(myNot(lessThan(0.01, 0.01)), notEqual(myFloatMult(100.0, 1.710747811868588), myFloatDiv(1.0, 10.0))), ifThenElseFloat(lessThanOrEqual(myFloatIntDiv(0.01, 55), myFloatAdd(1.0, 0.1)), myFloatSub(myFloatMult(1.0, 0.01), passFloat(1.0)), myFloatSub(myFloatIntAdd(100.0, 4), myIntToFloat(3731))), ifThenElseFloat(myNot(myAnd(trueBool, falseBool)), myFloatDiv(myFloatIntDiv(0.1, 55), myFloatAdd(0.01, 10.0)), myFloatIntAdd(ifThenElseFloat(trueBool, 0.01, 100.0), myIntMult(6, 3)))), Log(LowpassFilterMedian(WindowHamming(NNLearner(ARG0, EmbeddingLayer(7, ARG0, randomUniformWeights, InputLayer(ARG0)), 39), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myOr(falseBool, trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), equal(passFloat(0.01), myFloatMult(100.0, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))))
Cv2GreaterThan(DohDetection(EqualizeDisk(ArcTangent(HighpassFourierShift(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 128), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), equal(myFloatSub(1.0, 100.0), myFloatIntMult(1.0, 32))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myFloatIntSub(ifThenElseFloat(greaterThan(100.0, 1.0), myFloatIntMult(100.0, -6), ifThenElseFloat(falseBool, 0.01, 10.0)), myAnd(myNot(falseBool), greaterThanEqual(100.0, 100.0))), myFloatIntDiv(myFloatIntSub(myFloatIntAdd(0.1, 7), greaterThanEqual(0.01, 1.149773193854145)), myIntMult(equal(-1.0006354747544122, 1.0), myIntDiv(50, 32))), myOr(myNot(lessThan(0.01, 0.01)), notEqual(myFloatMult(100.0, 1.710747811868588), myFloatDiv(1.0, 10.0))), ifThenElseFloat(lessThanOrEqual(myFloatIntDiv(0.01, 55), myFloatAdd(1.0, 0.1)), myFloatSub(myFloatMult(1.0, 0.01), passFloat(1.0)), myFloatSub(myFloatIntAdd(100.0, 4), myIntToFloat(3731))), ifThenElseFloat(myNot(myAnd(trueBool, falseBool)), myFloatDiv(myFloatIntDiv(0.1, 55), myFloatAdd(0.01, 10.0)), myFloatIntAdd(ifThenElseFloat(trueBool, 0.01, 100.0), myIntMult(6, 3)))), Log(LowpassFilterMedian(WindowHamming(NNLearner(ARG0, EmbeddingLayer(7, ARG0, randomUniformWeights, InputLayer(ARG0)), 39), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myOr(falseBool, trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), equal(passFloat(0.01), myFloatMult(100.0, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))))
ThresholdBinaryInverseMask(SpectralClustering(FFT(RXAnomalyDetector(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 0.01), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2)), passBool(myAnd(trueBool, trueBool)), myFloatIntSub(myFloatIntDiv(0.1, 50), myOr(falseBool, trueBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatIntDiv(myFloatIntSub(myFloatIntAdd(-3.787034217551224, 7), greaterThanEqual(10.0, 2.112472458245877)), myIntMult(myAnd(trueBool, falseBool), passInt(100))))
ThresholdBinaryInverseMask(SpectralClustering(FFT(RXAnomalyDetector(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 0.01), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2)), passBool(myAnd(trueBool, trueBool)), myFloatIntSub(myFloatIntDiv(0.1, 50), myOr(falseBool, trueBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatIntDiv(myFloatIntSub(myFloatIntAdd(-3.787034217551224, 7), greaterThanEqual(10.0, 2.112472458245877)), myIntMult(myAnd(trueBool, falseBool), passInt(100))))
mySparsePCA(WindowBackmanNuttall(Cv2NotEqual(ContourMaskRangeExtent(Cv2Pow(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 4), passTriState(TriState.FEATURES_TO_FEATURES), Axis.AXIS_0, myIntSub(3, 5), myIntDiv(2, 4)), ARG0, passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), Axis.FULL, passAxis(passAxis(Axis.FULL))), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(passAxis(passAxis(Axis.FULL)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passInt(myAnd(trueBool, passBool(greaterThanEqual(-2.952947301306584, 10.0)))), myFloatIntAdd(myFloatIntAdd(myFloatMult(ifThenElseFloat(falseBool, 0.01, 0.01), myFloatIntDiv(3.6168695943794056, 0)), passBool(lessThan(0.01, 10.0))), passInt(lessThanOrEqual(myFloatMult(4.468172156892056, 100.0), passFloat(100.0)))))
mySparsePCA(WindowBackmanNuttall(Cv2NotEqual(ContourMaskRangeExtent(Cv2Pow(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 4), passTriState(TriState.FEATURES_TO_FEATURES), Axis.AXIS_0, myIntSub(3, 5), myIntDiv(2, 4)), ARG0, passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), Axis.FULL, passAxis(passAxis(Axis.FULL))), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(passAxis(passAxis(Axis.FULL)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passInt(myAnd(trueBool, passBool(greaterThanEqual(-2.952947301306584, 10.0)))), myFloatIntAdd(myFloatIntAdd(myFloatMult(ifThenElseFloat(falseBool, 0.01, 0.01), myFloatIntDiv(3.6168695943794056, 0)), passBool(lessThan(0.01, 10.0))), passInt(lessThanOrEqual(myFloatMult(4.468172156892056, 100.0), passFloat(100.0)))))
LowpassFilterGaussian(HighpassFourierGaussian(ObjectDetection(LowpassFilterEllipsoid(FractionDouble(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_1, 150), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), greaterThanEqual(0.01, 1.1431636772955667)), equal(myFloatDiv(100.0, 100.0), myFloatSub(0.1, 2.861585867378899)), myFloatIntSub(myFloatDiv(100.0, 0.01), greaterThanEqual(10.0, 10.0)), passFloat(myFloatIntSub(1.0, 150))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(Axis.AXIS_2)), ifThenElseBool(notEqual(myFloatIntMult(0.1, 2), passFloat(0.01)), lessThan(myFloatSub(0.01, 0.01), myIntToFloat(128)), greaterThanEqual(myFloatSub(-4.607665311816691, 10.0), passFloat(100.0)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), myAnd(notEqual(myFloatMult(myFloatIntDiv(1.0, 50), myFloatIntDiv(100.0, 150)), 0.12068462746823183), myNot(lessThanOrEqual(ifThenElseFloat(falseBool, 10.0, 1.0), 10.0))), equal(myFloatIntAdd(2.395309711455159, myIntDiv(myIntAdd(55, 4), myOr(trueBool, trueBool))), passFloat(myFloatDiv(myFloatAdd(0.1, 0.1), myFloatDiv(10.0, 0.1)))), myFloatMult(myFloatIntAdd(myFloatDiv(myFloatAdd(0.1, 3.599236787526239), myFloatIntAdd(100.0, 150)), myNot(ifThenElseBool(falseBool, trueBool, trueBool))), 0.9726263569726115), myFloatSub(ifThenElseFloat(ifThenElseBool(equal(0.01, 1.0), greaterThanEqual(0.1, 10.0), greaterThan(100.0, 0.01)), myFloatIntSub(passFloat(100.0), myNot(falseBool)), 0.01), myFloatIntAdd(myFloatIntDiv(passFloat(0.01), myIntDiv(150, 255)), myIntMult(lessThan(100.0, 1.0), myIntDiv(1, 55)))))
LowpassFilterGaussian(HighpassFourierGaussian(ObjectDetection(LowpassFilterEllipsoid(FractionDouble(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_1, 150), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), greaterThanEqual(0.01, 1.1431636772955667)), equal(myFloatDiv(100.0, 100.0), myFloatSub(0.1, 2.861585867378899)), myFloatIntSub(myFloatDiv(100.0, 0.01), greaterThanEqual(10.0, 10.0)), passFloat(myFloatIntSub(1.0, 150))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(Axis.AXIS_2)), ifThenElseBool(notEqual(myFloatIntMult(0.1, 2), passFloat(0.01)), lessThan(myFloatSub(0.01, 0.01), myIntToFloat(128)), greaterThanEqual(myFloatSub(-4.607665311816691, 10.0), passFloat(100.0)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), myAnd(notEqual(myFloatMult(myFloatIntDiv(1.0, 50), myFloatIntDiv(100.0, 150)), 0.12068462746823183), myNot(lessThanOrEqual(ifThenElseFloat(falseBool, 10.0, 1.0), 10.0))), equal(myFloatIntAdd(2.395309711455159, myIntDiv(myIntAdd(55, 4), myOr(trueBool, trueBool))), passFloat(myFloatDiv(myFloatAdd(0.1, 0.1), myFloatDiv(10.0, 0.1)))), myFloatMult(myFloatIntAdd(myFloatDiv(myFloatAdd(0.1, 3.599236787526239), myFloatIntAdd(100.0, 150)), myNot(ifThenElseBool(falseBool, trueBool, trueBool))), 0.9726263569726115), myFloatSub(ifThenElseFloat(ifThenElseBool(equal(0.01, 1.0), greaterThanEqual(0.1, 10.0), greaterThan(100.0, 0.01)), myFloatIntSub(passFloat(100.0), myNot(falseBool)), 0.01), myFloatIntAdd(myFloatIntDiv(passFloat(0.01), myIntDiv(150, 255)), myIntMult(lessThan(100.0, 1.0), myIntDiv(1, 55)))))
TfidfVectorizer(ARG0, trueBool, trueBool, 64, 50)
TfidfVectorizer(ARG0, trueBool, trueBool, 64, 50)
ImagePeakFinder(MultiplySpectrum(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2))
ImagePeakFinder(MultiplySpectrum(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2))
ConvertBW(SelectRange(ThresholdToZeroPixelFloat(TfidfVectorizer(Cv2Add(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, Axis.FULL), greaterThan(1.0, 100.0), myNot(trueBool), passInt(64), myIntSub(7, 2)), ThresholdToZeroPixelFloat(Stemmatizer(ARG0, falseBool, 8), LowpassFilterGaussian(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 255, 64, 0.1, 0.01), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), ifThenElseBool(greaterThan(myFloatIntSub(10.0, 7), myFloatIntSub(2.879830603263221, 128)), myOr(lessThan(10.0, 100.0), lessThan(1.0, 10.0)), lessThan(myFloatSub(0.1, 1.0), myFloatSub(0.01, 100.0))), lessThan(myFloatDiv(myFloatIntDiv(100.0, 9), myFloatIntAdd(0.01, 10)), myFloatAdd(myFloatSub(100.0, 1.0), myFloatSub(0.1, 1.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))))
ConvertBW(SelectRange(ThresholdToZeroPixelFloat(TfidfVectorizer(Cv2Add(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, Axis.FULL), greaterThan(1.0, 100.0), myNot(trueBool), passInt(64), myIntSub(7, 2)), ThresholdToZeroPixelFloat(Stemmatizer(ARG0, falseBool, 8), LowpassFilterGaussian(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 255, 64, 0.1, 0.01), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), ifThenElseBool(greaterThan(myFloatIntSub(10.0, 7), myFloatIntSub(2.879830603263221, 128)), myOr(lessThan(10.0, 100.0), lessThan(1.0, 10.0)), lessThan(myFloatSub(0.1, 1.0), myFloatSub(0.01, 100.0))), lessThan(myFloatDiv(myFloatIntDiv(100.0, 9), myFloatIntAdd(0.01, 10)), myFloatAdd(myFloatSub(100.0, 1.0), myFloatSub(0.1, 1.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))))
ThresholdBinaryInverse(TfidfVectorizer(ToFloatNorm(AbsoluteValue(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL)), passBool(lessThanOrEqual(1.0, 0.01)), notEqual(myFloatAdd(100.0, 10.0), myFloatIntAdd(0.1, 55)), notEqual(myFloatIntAdd(0.01, 3), myIntToFloat(1)), greaterThan(myFloatIntSub(100.0, 64), myFloatMult(0.01, 2.9593579154603313))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myFloatIntSub(myFloatMult(myFloatMult(100.0, 10.0), passFloat(10.0)), equal(myFloatSub(0.01, -2.8704754994918247), myFloatAdd(-3.8963734389255924, -1.425706702083934))))
ThresholdBinaryInverse(TfidfVectorizer(ToFloatNorm(AbsoluteValue(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL)), passBool(lessThanOrEqual(1.0, 0.01)), notEqual(myFloatAdd(100.0, 10.0), myFloatIntAdd(0.1, 55)), notEqual(myFloatIntAdd(0.01, 3), myIntToFloat(1)), greaterThan(myFloatIntSub(100.0, 64), myFloatMult(0.01, 2.9593579154603313))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myFloatIntSub(myFloatMult(myFloatMult(100.0, 10.0), passFloat(10.0)), equal(myFloatSub(0.01, -2.8704754994918247), myFloatAdd(-3.8963734389255924, -1.425706702083934))))
ThresholdBinary(MyBinaryThreshold(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 1.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatAdd(10.0, 1.0), myNot(falseBool))
ThresholdBinary(MyBinaryThreshold(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 1.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatAdd(10.0, 1.0), myNot(falseBool))
BitwiseAnd(Stemmatizer(ARG0, -4, 9), SEPObjectDetection(ARG0, 128, -3.7215662536198426, -2.7617594820620104), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.FULL))
BitwiseAnd(Stemmatizer(ARG0, -4, 9), SEPObjectDetection(ARG0, 128, -3.7215662536198426, -2.7617594820620104), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.FULL))
NumpyDivide(SVCMulti(Cv2LessThanOrEqual(ARG0, ContourMaskRangeExtent(ToFloat(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), myIntAdd(12, 6), myIntSub(8, 2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), TriState.STREAM_TO_STREAM, Axis.FULL, passAxis(passAxis(Axis.FULL)))), adf_2(ThresholdBinaryInverse(Cv2RMS(ARG0, TriState.STREAM_TO_FEATURES, passAxis(Axis.FULL), myOr(trueBool, falseBool)), passTriState(TriState.STREAM_TO_FEATURES), passAxis(passAxis(Axis.AXIS_2)), myFloatIntAdd(ifThenElseFloat(trueBool, 10.0, 0.1), equal(1.0, 100.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.AXIS_2)))
NumpyDivide(SVCMulti(Cv2LessThanOrEqual(ARG0, ContourMaskRangeExtent(ToFloat(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), myIntAdd(12, 6), myIntSub(8, 2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), TriState.STREAM_TO_STREAM, Axis.FULL, passAxis(passAxis(Axis.FULL)))), adf_2(ThresholdBinaryInverse(Cv2RMS(ARG0, TriState.STREAM_TO_FEATURES, passAxis(Axis.FULL), myOr(trueBool, falseBool)), passTriState(TriState.STREAM_TO_FEATURES), passAxis(passAxis(Axis.AXIS_2)), myFloatIntAdd(ifThenElseFloat(trueBool, 10.0, 0.1), equal(1.0, 100.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.AXIS_2)))
SVCMulti(AbsDiff(ContourMaskMinEquDiameter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 42), MySnapshot(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_2, trueBool), TriState.STREAM_TO_STREAM, passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_1)))
SVCMulti(AbsDiff(ContourMaskMinEquDiameter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 42), MySnapshot(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_2, trueBool), TriState.STREAM_TO_STREAM, passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_1)))
EmadeDataAddPairTriple(CCorrObjectFilter(ARG0, ARG0, 2, 0.1), MorphTophatRect(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 9, 3), CopyStreamToTarget(ARG0), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_1))
EmadeDataAddPairTriple(CCorrObjectFilter(ARG0, ARG0, 2, 0.1), MorphTophatRect(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 9, 3), CopyStreamToTarget(ARG0), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_1))
NumpyDivide(NumNamedEntities(HashingVectorizer(Sentiment(MatchedFiltering2D(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 63, 0.1), greaterThan(100.0, 10.0)), myOr(ifThenElseBool(falseBool, falseBool, trueBool), greaterThan(0.01, 10.0)), myNot(lessThanOrEqual(3.5743410410976306, 100.0)), passBool(lessThan(10.0, 1.0)), myIntMult(myFloatToInt(1.0), ifThenElseBool(falseBool, trueBool, trueBool)))), ThresholdBinary(Prerejection(MorphOpenCross(Daisy(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 10, 32, 2710, falseBool, 8), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), greaterThanEqual(0.01, 100.0), myIntMult(50, 150)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myIntAdd(myNot(falseBool), equal(100.0, 0.1)), equal(myFloatMult(4.028142764245674, 10.0), myFloatIntMult(0.01, 32)), myFloatIntDiv(myFloatSub(10.0, 0.01), notEqual(0.01, 100.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myFloatDiv(myFloatIntMult(myFloatIntDiv(0.1, 0), greaterThanEqual(0.01, 0.1)), myFloatAdd(myFloatIntSub(0.01, 14), myFloatMult(3.614471924353671, 1.0))), lessThanOrEqual(myFloatSub(myFloatDiv(10.0, 1.0), myFloatIntMult(0.01, 32)), myIntToFloat(equal(-1.429476834409308, 1.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))))
NumpyDivide(NumNamedEntities(HashingVectorizer(Sentiment(MatchedFiltering2D(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 63, 0.1), greaterThan(100.0, 10.0)), myOr(ifThenElseBool(falseBool, falseBool, trueBool), greaterThan(0.01, 10.0)), myNot(lessThanOrEqual(3.5743410410976306, 100.0)), passBool(lessThan(10.0, 1.0)), myIntMult(myFloatToInt(1.0), ifThenElseBool(falseBool, trueBool, trueBool)))), ThresholdBinary(Prerejection(MorphOpenCross(Daisy(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 10, 32, 2710, falseBool, 8), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), greaterThanEqual(0.01, 100.0), myIntMult(50, 150)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myIntAdd(myNot(falseBool), equal(100.0, 0.1)), equal(myFloatMult(4.028142764245674, 10.0), myFloatIntMult(0.01, 32)), myFloatIntDiv(myFloatSub(10.0, 0.01), notEqual(0.01, 100.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myFloatDiv(myFloatIntMult(myFloatIntDiv(0.1, 0), greaterThanEqual(0.01, 0.1)), myFloatAdd(myFloatIntSub(0.01, 14), myFloatMult(3.614471924353671, 1.0))), lessThanOrEqual(myFloatSub(myFloatDiv(10.0, 1.0), myFloatIntMult(0.01, 32)), myIntToFloat(equal(-1.429476834409308, 1.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))))
HighpassSobelDerivative(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 4, 150, falseBool, 3, 50)
HighpassSobelDerivative(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 4, 150, falseBool, 3, 50)
Cv2LessThanOrEqual(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_0)
Cv2LessThanOrEqual(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_0)
CornerDetectionHarris(CreateBBox(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_2, 100), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myFloatToInt(10.0), ifThenElseBool(trueBool, trueBool, falseBool), myFloatAdd(100.0, 0.1))
CornerDetectionHarris(CreateBBox(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_2, 100), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myFloatToInt(10.0), ifThenElseBool(trueBool, trueBool, falseBool), myFloatAdd(100.0, 0.1))
MorphBlackhatEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 10, falseBool)
MorphBlackhatEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 10, falseBool)
CopyStreamToTarget(ARG0)
CopyStreamToTarget(ARG0)
WindowTurkey(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 1.5576836277251926)
WindowTurkey(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 1.5576836277251926)
CountVectorizer(RandomUniform(ImageAlignmentECC(AffinityPropagationClustering(ARG0, 100.0), MinimumFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 9621, -1.7933403997316133), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_0), myNot(trueBool), myFloatSub(1.0, 0.01), myIntSub(4, 150), myOr(trueBool, trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myIntDiv(myOr(trueBool, trueBool), greaterThan(1.0, 10.0)), lessThan(myFloatMult(0.1, 1.0), myFloatIntAdd(0.1, 50))), equal(myFloatDiv(myFloatMult(0.01, 1.0), myFloatAdd(0.01, 1.0)), myFloatAdd(myFloatIntSub(-4.421834917894127, 0), myFloatIntMult(1.0, 50))), lessThanOrEqual(myFloatIntSub(myFloatIntDiv(0.1, 64), greaterThan(1.0, 1.0)), myIntToFloat(equal(0.01, -1.684003098345955))), myIntDiv(passInt(myOr(trueBool, trueBool)), myIntSub(passInt(-1), myAnd(trueBool, falseBool))), notEqual(myFloatMult(myIntToFloat(trueBool), passFloat(0.1)), myFloatAdd(myFloatDiv(0.01, -0.7179046457343237), myFloatIntDiv(0.01, 64))))
CountVectorizer(RandomUniform(ImageAlignmentECC(AffinityPropagationClustering(ARG0, 100.0), MinimumFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 9621, -1.7933403997316133), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_0), myNot(trueBool), myFloatSub(1.0, 0.01), myIntSub(4, 150), myOr(trueBool, trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myIntDiv(myOr(trueBool, trueBool), greaterThan(1.0, 10.0)), lessThan(myFloatMult(0.1, 1.0), myFloatIntAdd(0.1, 50))), equal(myFloatDiv(myFloatMult(0.01, 1.0), myFloatAdd(0.01, 1.0)), myFloatAdd(myFloatIntSub(-4.421834917894127, 0), myFloatIntMult(1.0, 50))), lessThanOrEqual(myFloatIntSub(myFloatIntDiv(0.1, 64), greaterThan(1.0, 1.0)), myIntToFloat(equal(0.01, -1.684003098345955))), myIntDiv(passInt(myOr(trueBool, trueBool)), myIntSub(passInt(-1), myAnd(trueBool, falseBool))), notEqual(myFloatMult(myIntToFloat(trueBool), passFloat(0.1)), myFloatAdd(myFloatDiv(0.01, -0.7179046457343237), myFloatIntDiv(0.01, 64))))
ContourMaskMinEnclosingCircle(mySelFpr(ARG0, TriState.FEATURES_TO_FEATURES, 1, 1.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatIntMult(0.1, 4))
ContourMaskMinEnclosingCircle(mySelFpr(ARG0, TriState.FEATURES_TO_FEATURES, 1, 1.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatIntMult(0.1, 4))
ConvolveChannelMerge(ARG0, 0)
ConvolveChannelMerge(ARG0, 0)
Cv2AbsDiff(MyBinaryThreshold(Cv2Max(MedianFilterHole(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 7, 32), EqualizeHist(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), ifThenElseFloat(ifThenElseBool(trueBool, falseBool, trueBool), ifThenElseFloat(falseBool, 10.0, 100.0), myFloatMult(10.0, 10.0))), Cv2AddWeighted(StdDeviationHole(HighpassUnsharpMask(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 55, 255, 150), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), equal(0.1, 1.0), lessThanOrEqual(100.0, 1.0)), mySubSampleData(EmadeDataMultiplyInt(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 50), passBool(falseBool), myIntDiv(32, 55)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passAxis(passAxis(Axis.AXIS_1)), myIntAdd(myIntDiv(50, 55), greaterThanEqual(100.0, 1.0)), myIntSub(lessThanOrEqual(0.1, 10.0), lessThanOrEqual(0.1, 100.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), passAxis(passAxis(passAxis(Axis.AXIS_0))))
Cv2AbsDiff(MyBinaryThreshold(Cv2Max(MedianFilterHole(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 7, 32), EqualizeHist(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), ifThenElseFloat(ifThenElseBool(trueBool, falseBool, trueBool), ifThenElseFloat(falseBool, 10.0, 100.0), myFloatMult(10.0, 10.0))), Cv2AddWeighted(StdDeviationHole(HighpassUnsharpMask(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 55, 255, 150), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), equal(0.1, 1.0), lessThanOrEqual(100.0, 1.0)), mySubSampleData(EmadeDataMultiplyInt(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 50), passBool(falseBool), myIntDiv(32, 55)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passAxis(passAxis(Axis.AXIS_1)), myIntAdd(myIntDiv(50, 55), greaterThanEqual(100.0, 1.0)), myIntSub(lessThanOrEqual(0.1, 10.0), lessThanOrEqual(0.1, 100.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), passAxis(passAxis(passAxis(Axis.AXIS_0))))
ContourMaskMaxExtentEnclosingCircle(StdDeviationHole(Select2D(Cv2DFTReal(EmadeDataAddPair(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), Axis.AXIS_0), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThan(myFloatIntDiv(0.1, 7), -2.425601875451062), passBool(trueBool), lessThan(myFloatMult(10.0, 100.0), myIntToFloat(7)), myAnd(greaterThan(0.1, 3.0011748839657955), trueBool)), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(Axis.AXIS_0), equal(myFloatIntMult(myFloatIntDiv(0.1, 100), myAnd(falseBool, trueBool)), passFloat(myFloatIntMult(0.01, 0))), passInt(lessThanOrEqual(myFloatDiv(100.0, 10.0), -4.126451103850784))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myFloatMult(myFloatMult(myFloatIntDiv(myIntToFloat(50), lessThanOrEqual(1.0, 0.1)), myFloatMult(10.0, 100.0)), 1.0))
ContourMaskMaxExtentEnclosingCircle(StdDeviationHole(Select2D(Cv2DFTReal(EmadeDataAddPair(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), Axis.AXIS_0), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThan(myFloatIntDiv(0.1, 7), -2.425601875451062), passBool(trueBool), lessThan(myFloatMult(10.0, 100.0), myIntToFloat(7)), myAnd(greaterThan(0.1, 3.0011748839657955), trueBool)), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(Axis.AXIS_0), equal(myFloatIntMult(myFloatIntDiv(0.1, 100), myAnd(falseBool, trueBool)), passFloat(myFloatIntMult(0.01, 0))), passInt(lessThanOrEqual(myFloatDiv(100.0, 10.0), -4.126451103850784))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myFloatMult(myFloatMult(myFloatIntDiv(myIntToFloat(50), lessThanOrEqual(1.0, 0.1)), myFloatMult(10.0, 100.0)), 1.0))
ThresholdBinary(NormalLikelihood(ARG0, trueBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatIntDiv(10.0, 55), notEqual(1.0, 10.0))
ThresholdBinary(NormalLikelihood(ARG0, trueBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatIntDiv(10.0, 55), notEqual(1.0, 10.0))
ECDF(StandardNorm(MorphCloseRect(Cv2Transpose(MorphGradientEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 32, 3), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), greaterThan(myIntToFloat(6), myFloatIntSub(-0.9408985013123692, 8)), greaterThanEqual(myIntToFloat(10), myFloatIntAdd(0.1, 43))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), myAnd(ifThenElseBool(notEqual(myFloatAdd(0.1, 0.1), myFloatIntMult(0.01, 9)), greaterThan(myFloatIntSub(10.0, 26), ifThenElseFloat(falseBool, 100.0, 0.01)), lessThan(myFloatSub(10.0, 2.1707452951153794), myFloatIntDiv(10.0, 7))), equal(myIntToFloat(myIntDiv(1, 1)), myFloatSub(myFloatMult(100.0, 100.0), myFloatIntMult(0.1, 4)))))
ECDF(StandardNorm(MorphCloseRect(Cv2Transpose(MorphGradientEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 32, 3), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), greaterThan(myIntToFloat(6), myFloatIntSub(-0.9408985013123692, 8)), greaterThanEqual(myIntToFloat(10), myFloatIntAdd(0.1, 43))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), myAnd(ifThenElseBool(notEqual(myFloatAdd(0.1, 0.1), myFloatIntMult(0.01, 9)), greaterThan(myFloatIntSub(10.0, 26), ifThenElseFloat(falseBool, 100.0, 0.01)), lessThan(myFloatSub(10.0, 2.1707452951153794), myFloatIntDiv(10.0, 7))), equal(myIntToFloat(myIntDiv(1, 1)), myFloatSub(myFloatMult(100.0, 100.0), myFloatIntMult(0.1, 4)))))
MorphBlackhatEllipse(ARG0, passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), equal(1.0, 4.3123205224820325), myOr(trueBool, falseBool))
MorphBlackhatEllipse(ARG0, passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), equal(1.0, 4.3123205224820325), myOr(trueBool, falseBool))
EqualizeHist(HighpassLaplacian(EdgeDetectionCanny(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 128, 64, 4), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), passBool(falseBool), myIntDiv(7, 7), myFloatToInt(0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)))
EqualizeHist(HighpassLaplacian(EdgeDetectionCanny(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 128, 64, 4), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), passBool(falseBool), myIntDiv(7, 7), myFloatToInt(0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)))
mySelFdr(TfidfVectorizer(ARG0, trueBool, 5, 128, 5), passTriState(TriState.STREAM_TO_FEATURES), greaterThan(0.01, 100.0), myFloatIntMult(1.0, 6))
mySelFdr(TfidfVectorizer(ARG0, trueBool, 5, 128, 5), passTriState(TriState.STREAM_TO_FEATURES), greaterThan(0.01, 100.0), myFloatIntMult(1.0, 6))
LocalPoolingMean(MaximumFilter(Cv2LessThanOrEqual(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), equal(100.0, 1.0), myFloatIntAdd(0.1, 64)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), lessThan(ifThenElseFloat(trueBool, 10.0, 0.1), myFloatIntMult(100.0, 255)))
LocalPoolingMean(MaximumFilter(Cv2LessThanOrEqual(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), equal(100.0, 1.0), myFloatIntAdd(0.1, 64)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), lessThan(ifThenElseFloat(trueBool, 10.0, 0.1), myFloatIntMult(100.0, 255)))
WindowGaussian(mySelFwe(ContourMaskMinEquDiameter(Tangent(EdgeDetectionCanny(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 8, 37, 32), TriState.STREAM_TO_FEATURES, passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), equal(myFloatAdd(1.0, 100.0), myFloatSub(100.0, 100.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), myAnd(lessThanOrEqual(myFloatIntSub(0.1, 50), myFloatMult(100.0, 0.1)), notEqual(myFloatIntAdd(1.0, -2), 0.01)), passFloat(myFloatAdd(10.0, myFloatMult(100.0, 10.0)))), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), passFloat(passFloat(ifThenElseFloat(ifThenElseBool(falseBool, falseBool, trueBool), myFloatIntMult(100.0, 5), myFloatAdd(0.01, 1.0)))))
WindowGaussian(mySelFwe(ContourMaskMinEquDiameter(Tangent(EdgeDetectionCanny(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 8, 37, 32), TriState.STREAM_TO_FEATURES, passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), equal(myFloatAdd(1.0, 100.0), myFloatSub(100.0, 100.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), myAnd(lessThanOrEqual(myFloatIntSub(0.1, 50), myFloatMult(100.0, 0.1)), notEqual(myFloatIntAdd(1.0, -2), 0.01)), passFloat(myFloatAdd(10.0, myFloatMult(100.0, 10.0)))), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), passFloat(passFloat(ifThenElseFloat(ifThenElseBool(falseBool, falseBool, trueBool), myFloatIntMult(100.0, 5), myFloatAdd(0.01, 1.0)))))
ContourMaskMinLength(LowpassFilterAverage(Fraction(AccumulateWeighted(HighpassIrst(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatIntSub(0.1, 128)), TriState.STREAM_TO_FEATURES, passAxis(passAxis(Axis.AXIS_1)), passInt(myIntAdd(falseBool, 32))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myIntMult(ifThenElseBool(lessThanOrEqual(0.1, 0.1), myNot(falseBool), myAnd(trueBool, falseBool)), ifThenElseBool(myNot(trueBool), notEqual(-2.945577077817526, 0.1), myOr(falseBool, trueBool)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), myFloatIntMult(myFloatIntDiv(0.1, 100), lessThanOrEqual(100.0, myFloatSub(myIntToFloat(10), myFloatIntDiv(3.2379221126339335, 128)))))
ContourMaskMinLength(LowpassFilterAverage(Fraction(AccumulateWeighted(HighpassIrst(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatIntSub(0.1, 128)), TriState.STREAM_TO_FEATURES, passAxis(passAxis(Axis.AXIS_1)), passInt(myIntAdd(falseBool, 32))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myIntMult(ifThenElseBool(lessThanOrEqual(0.1, 0.1), myNot(falseBool), myAnd(trueBool, falseBool)), ifThenElseBool(myNot(trueBool), notEqual(-2.945577077817526, 0.1), myOr(falseBool, trueBool)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), myFloatIntMult(myFloatIntDiv(0.1, 100), lessThanOrEqual(100.0, myFloatSub(myIntToFloat(10), myFloatIntDiv(3.2379221126339335, 128)))))
KalmanFilter(WindowCosine(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), passFloat(0.01), myFloatDiv(10.0, 0.01))
KalmanFilter(WindowCosine(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), passFloat(0.01), myFloatDiv(10.0, 0.01))
CenterOfMass(Cv2GreaterThanOrEqual(DogDetection(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 1.0, 1.0, 100.0, 0.1, 0.01), WindowBartlettHann(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)))
CenterOfMass(Cv2GreaterThanOrEqual(DogDetection(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 1.0, 1.0, 100.0, 0.1, 0.01), WindowBartlettHann(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)))
Cv2Multiply(MultiplyTransposed(MorphErosionEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 3, 5, 32), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myNot(falseBool)), Select1D(NumNamedEntities(ARG0), passTriState(TriState.STREAM_TO_FEATURES), Axis.AXIS_0, myOr(falseBool, falseBool), lessThanOrEqual(0.1, -2.433276027963754)), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_2)))
Cv2Multiply(MultiplyTransposed(MorphErosionEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 3, 5, 32), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myNot(falseBool)), Select1D(NumNamedEntities(ARG0), passTriState(TriState.STREAM_TO_FEATURES), Axis.AXIS_0, myOr(falseBool, falseBool), lessThanOrEqual(0.1, -2.433276027963754)), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_2)))
MorphCloseEllipse(ARG0, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myAnd(myAnd(trueBool, equal(0.01, 0.01)), passBool(lessThanOrEqual(10.0, 1.0))), myNot(passBool(myOr(trueBool, falseBool))))
MorphCloseEllipse(ARG0, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myAnd(myAnd(trueBool, equal(0.01, 0.01)), passBool(lessThanOrEqual(10.0, 1.0))), myNot(passBool(myOr(trueBool, falseBool))))
EqualizeDisk(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 2)
EqualizeDisk(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 2)
LocalPoolingMax(ARG0, passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), 2)
LocalPoolingMax(ARG0, passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), 2)
Cv2DFTReal(Cv2iDCT(Tangent(MultiplySpectrum(Cv2Divide(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_1), ARG0, passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(Axis.FULL))))
Cv2DFTReal(Cv2iDCT(Tangent(MultiplySpectrum(Cv2Divide(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_1), ARG0, passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(Axis.FULL))))
ScalarDivide(NumpyDivide(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), myFloatDiv(10.0, 4.9868825549538585))
ScalarDivide(NumpyDivide(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), myFloatDiv(10.0, 4.9868825549538585))
FractionTriple(MorphErosionCross(Supersampling(EmadeDataAddFloat(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passFloat(-4.381465200475628), myAnd(trueBool, falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), Axis.AXIS_2, greaterThanEqual(myIntToFloat(4), 1.0), myOr(lessThan(1.0, 3.1544609291464862), notEqual(0.1, -0.3536715943156974)), 55), ToUint8(ContoursMaxLength(ARG0, passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), greaterThanEqual(0.01, -2.6667446718947807)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL))), LocalPoolingMean(ARG0, passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(Axis.FULL), myIntAdd(greaterThanEqual(10.0, 10.0), myIntDiv(3, 2))), TriState.FEATURES_TO_FEATURES, passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passTriState(passTriState(TriState.STREAM_TO_STREAM)), Axis.AXIS_0, passAxis(passAxis(passAxis(Axis.AXIS_0))), passAxis(passAxis(Axis.AXIS_0)), equal(myFloatDiv(myFloatIntSub(100.0, 8), myFloatIntAdd(100.0, 2)), myIntToFloat(myIntDiv(trueBool, 100))))
FractionTriple(MorphErosionCross(Supersampling(EmadeDataAddFloat(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passFloat(-4.381465200475628), myAnd(trueBool, falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), Axis.AXIS_2, greaterThanEqual(myIntToFloat(4), 1.0), myOr(lessThan(1.0, 3.1544609291464862), notEqual(0.1, -0.3536715943156974)), 55), ToUint8(ContoursMaxLength(ARG0, passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), greaterThanEqual(0.01, -2.6667446718947807)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL))), LocalPoolingMean(ARG0, passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(Axis.FULL), myIntAdd(greaterThanEqual(10.0, 10.0), myIntDiv(3, 2))), TriState.FEATURES_TO_FEATURES, passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passTriState(passTriState(TriState.STREAM_TO_STREAM)), Axis.AXIS_0, passAxis(passAxis(passAxis(Axis.AXIS_0))), passAxis(passAxis(Axis.AXIS_0)), equal(myFloatDiv(myFloatIntSub(100.0, 8), myFloatIntAdd(100.0, 2)), myIntToFloat(myIntDiv(trueBool, 100))))
LogDetection(Cv2Pow(MeanFilter(ContourMaskMaxExtentEnclosingCircle(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatToInt(0.1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThan(myFloatDiv(-3.4316643674859906, 100.0), myFloatMult(-3.9664146998609673, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2))), passFloat(myFloatIntAdd(myFloatMult(10.0, 0.01), myFloatToInt(0.01))), ifThenElseFloat(notEqual(myFloatMult(0.1, 0.01), myFloatIntDiv(0.1, 4)), passFloat(myIntToFloat(99)), myFloatIntDiv(ifThenElseFloat(falseBool, 10.0, 0.01), equal(10.0, 0.1))), lessThan(ifThenElseFloat(notEqual(100.0, 0.01), myFloatIntDiv(0.01, 32), myFloatIntDiv(10.0, 64)), myFloatIntDiv(ifThenElseFloat(falseBool, 0.01, -3.1611027872158415), lessThan(0.01, 0.01))), myFloatMult(myFloatMult(myFloatDiv(10.0, 1.0), myFloatIntMult(0.1, 83)), myFloatAdd(myFloatDiv(-0.19263036148403323, -1.3909339498826565), myFloatIntSub(0.01, 10))), myFloatMult(myIntToFloat(myIntSub(4, 1)), myFloatDiv(myFloatIntSub(-4.661708200468498, 0), myIntToFloat(64))))
LogDetection(Cv2Pow(MeanFilter(ContourMaskMaxExtentEnclosingCircle(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatToInt(0.1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThan(myFloatDiv(-3.4316643674859906, 100.0), myFloatMult(-3.9664146998609673, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2))), passFloat(myFloatIntAdd(myFloatMult(10.0, 0.01), myFloatToInt(0.01))), ifThenElseFloat(notEqual(myFloatMult(0.1, 0.01), myFloatIntDiv(0.1, 4)), passFloat(myIntToFloat(99)), myFloatIntDiv(ifThenElseFloat(falseBool, 10.0, 0.01), equal(10.0, 0.1))), lessThan(ifThenElseFloat(notEqual(100.0, 0.01), myFloatIntDiv(0.01, 32), myFloatIntDiv(10.0, 64)), myFloatIntDiv(ifThenElseFloat(falseBool, 0.01, -3.1611027872158415), lessThan(0.01, 0.01))), myFloatMult(myFloatMult(myFloatDiv(10.0, 1.0), myFloatIntMult(0.1, 83)), myFloatAdd(myFloatDiv(-0.19263036148403323, -1.3909339498826565), myFloatIntSub(0.01, 10))), myFloatMult(myIntToFloat(myIntSub(4, 1)), myFloatDiv(myFloatIntSub(-4.661708200468498, 0), myIntToFloat(64))))
ConvertToCounts(Cv2LessThanOrEqual(ARG0, AffinityPropagationClustering(MorphErosionCross(RXAnomalyDetector(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 10.0), passTriState(TriState.STREAM_TO_FEATURES), Axis.FULL, greaterThanEqual(0.7901885624626983, 10.0), myIntMult(64, 5), myIntAdd(8, 64)), myFloatMult(passFloat(0.01), passFloat(10.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), TriState.FEATURES_TO_FEATURES, passAxis(passAxis(passAxis(Axis.FULL))), Axis.FULL), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))))
ConvertToCounts(Cv2LessThanOrEqual(ARG0, AffinityPropagationClustering(MorphErosionCross(RXAnomalyDetector(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 10.0), passTriState(TriState.STREAM_TO_FEATURES), Axis.FULL, greaterThanEqual(0.7901885624626983, 10.0), myIntMult(64, 5), myIntAdd(8, 64)), myFloatMult(passFloat(0.01), passFloat(10.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), TriState.FEATURES_TO_FEATURES, passAxis(passAxis(passAxis(Axis.FULL))), Axis.FULL), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))))
GaussianPeakEM(MyDCT(ContourMaskMinLength(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 0.01), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), myIntSub(-15, 7924), myAnd(falseBool, falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)))
GaussianPeakEM(MyDCT(ContourMaskMinLength(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 0.01), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), myIntSub(-15, 7924), myAnd(falseBool, falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)))
Cv2Min(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.AXIS_0)
Cv2Min(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.AXIS_0)
AdjustConstrastGamma(rmsHole(Cv2LessThan(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), greaterThanEqual(-3.9981442040967776, 0.01), passInt(0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myFloatIntSub(myFloatIntAdd(100.0, 32), notEqual(100.0, 100.0)), myFloatSub(myFloatAdd(4.328738581811093, 10.0), myFloatIntDiv(1.0, 8)))
AdjustConstrastGamma(rmsHole(Cv2LessThan(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), greaterThanEqual(-3.9981442040967776, 0.01), passInt(0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myFloatIntSub(myFloatIntAdd(100.0, 32), notEqual(100.0, 100.0)), myFloatSub(myFloatAdd(4.328738581811093, 10.0), myFloatIntDiv(1.0, 8)))
StdDeviationHole(ToFloatNorm(ARG0, passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), ifThenElseBool(falseBool, lessThan(myIntToFloat(myIntAdd(10, 50)), myFloatAdd(ifThenElseFloat(trueBool, 1.0, 1.0), myFloatSub(4.090160302723984, 1.327063548034256))), equal(passFloat(myFloatIntMult(100.0, 4)), myIntToFloat(passInt(13)))), myIntSub(passInt(equal(myFloatIntAdd(0.1, 1605), myFloatAdd(10.0, 0.1))), passInt(passBool(myOr(trueBool, trueBool)))))
StdDeviationHole(ToFloatNorm(ARG0, passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), ifThenElseBool(falseBool, lessThan(myIntToFloat(myIntAdd(10, 50)), myFloatAdd(ifThenElseFloat(trueBool, 1.0, 1.0), myFloatSub(4.090160302723984, 1.327063548034256))), equal(passFloat(myFloatIntMult(100.0, 4)), myIntToFloat(passInt(13)))), myIntSub(passInt(equal(myFloatIntAdd(0.1, 1605), myFloatAdd(10.0, 0.1))), passInt(passBool(myOr(trueBool, trueBool)))))
CornerDetectionHarris(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 6, 32, 0.1)
CornerDetectionHarris(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 6, 32, 0.1)
ThresholdBinary(PeakFinder(WienerFilter(SobelFilter(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myFloatIntAdd(myFloatSub(1.0, 3.2098808544895725), myFloatToInt(0.01)), equal(myFloatIntSub(100.0, 1246), myFloatDiv(1.0, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatAdd(myFloatIntMult(myFloatAdd(0.01, 1.1398201342094616), greaterThanEqual(1.0, 0.1)), myFloatDiv(myFloatIntDiv(0.1, 1), myFloatIntDiv(100.0, 55))), myIntSub(passInt(myOr(falseBool, falseBool)), greaterThan(myFloatSub(0.01, 1.0), myFloatAdd(100.0, 10.0))))
ThresholdBinary(PeakFinder(WienerFilter(SobelFilter(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myFloatIntAdd(myFloatSub(1.0, 3.2098808544895725), myFloatToInt(0.01)), equal(myFloatIntSub(100.0, 1246), myFloatDiv(1.0, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatAdd(myFloatIntMult(myFloatAdd(0.01, 1.1398201342094616), greaterThanEqual(1.0, 0.1)), myFloatDiv(myFloatIntDiv(0.1, 1), myFloatIntDiv(100.0, 55))), myIntSub(passInt(myOr(falseBool, falseBool)), greaterThan(myFloatSub(0.01, 1.0), myFloatAdd(100.0, 10.0))))
GradientMagnitude(OtsuBinaryThreshold(ZeroOneNorm(SepDetectionWindow(Tfisf(ARG0, falseBool, 9, 100, 5), myIntMult(0, falseBool), myIntAdd(6, 150), myFloatIntDiv(100.0, 95)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatToInt(myFloatIntSub(ifThenElseFloat(trueBool, 10.0, -3.7605739694579556), greaterThan(100.0, 1.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), lessThanOrEqual(myFloatIntDiv(myFloatMult(passFloat(100.0), myFloatDiv(0.01, 0.01)), greaterThanEqual(myFloatIntSub(2.4152168463659986, 255), myFloatIntMult(10.0, 9))), myFloatSub(myFloatIntAdd(myFloatDiv(1.0, 10.0), passInt(255)), ifThenElseFloat(equal(-0.8829206295705507, 1.0), passFloat(1.0), myFloatAdd(0.1, 100.0)))))
GradientMagnitude(OtsuBinaryThreshold(ZeroOneNorm(SepDetectionWindow(Tfisf(ARG0, falseBool, 9, 100, 5), myIntMult(0, falseBool), myIntAdd(6, 150), myFloatIntDiv(100.0, 95)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatToInt(myFloatIntSub(ifThenElseFloat(trueBool, 10.0, -3.7605739694579556), greaterThan(100.0, 1.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), lessThanOrEqual(myFloatIntDiv(myFloatMult(passFloat(100.0), myFloatDiv(0.01, 0.01)), greaterThanEqual(myFloatIntSub(2.4152168463659986, 255), myFloatIntMult(10.0, 9))), myFloatSub(myFloatIntAdd(myFloatDiv(1.0, 10.0), passInt(255)), ifThenElseFloat(equal(-0.8829206295705507, 1.0), passFloat(1.0), myFloatAdd(0.1, 100.0)))))
MorphCloseRect(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 32, 7)
MorphCloseRect(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 32, 7)
Cv2Multiply(ARG0, ThresholdNLargest(LowpassFilterUniform(WindowGaussian(WindowFlatTop(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myFloatIntSub(10.0, 9)), passTriState(TriState.STREAM_TO_STREAM), Axis.FULL, myOr(myNot(trueBool), greaterThanEqual(3.9886090876778173, 0.1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myIntDiv(notEqual(10.0, myFloatDiv(-1.5751204061623092, 0.1428712150183431)), myIntDiv(passBool(falseBool), myIntSub(1, trueBool)))), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), passAxis(passAxis(Axis.AXIS_2)))
Cv2Multiply(ARG0, ThresholdNLargest(LowpassFilterUniform(WindowGaussian(WindowFlatTop(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myFloatIntSub(10.0, 9)), passTriState(TriState.STREAM_TO_STREAM), Axis.FULL, myOr(myNot(trueBool), greaterThanEqual(3.9886090876778173, 0.1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myIntDiv(notEqual(10.0, myFloatDiv(-1.5751204061623092, 0.1428712150183431)), myIntDiv(passBool(falseBool), myIntSub(1, trueBool)))), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), passAxis(passAxis(Axis.AXIS_2)))
ContourMaskMinLength(ContourMaskMaxExtent(ContourMaskMinArea(MorphOpenEllipse(ToFloat(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), lessThan(-0.6762484572072216, 100.0), myIntDiv(6, 32)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myIntToFloat(myFloatToInt(0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myIntSub(myNot(myOr(trueBool, falseBool)), lessThanOrEqual(myIntToFloat(10), myFloatSub(2.6315011508059785, 100.0)))), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(passAxis(Axis.AXIS_2)), myFloatIntSub(myFloatMult(ifThenElseFloat(lessThan(10.0, 1.0), myFloatIntMult(10.0, 150), ifThenElseFloat(trueBool, 100.0, -0.5743336376105344)), myFloatAdd(myFloatIntDiv(100.0, 50), myIntToFloat(150))), 8100))
ContourMaskMinLength(ContourMaskMaxExtent(ContourMaskMinArea(MorphOpenEllipse(ToFloat(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), lessThan(-0.6762484572072216, 100.0), myIntDiv(6, 32)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myIntToFloat(myFloatToInt(0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myIntSub(myNot(myOr(trueBool, falseBool)), lessThanOrEqual(myIntToFloat(10), myFloatSub(2.6315011508059785, 100.0)))), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(passAxis(Axis.AXIS_2)), myFloatIntSub(myFloatMult(ifThenElseFloat(lessThan(10.0, 1.0), myFloatIntMult(10.0, 150), ifThenElseFloat(trueBool, 100.0, -0.5743336376105344)), myFloatAdd(myFloatIntDiv(100.0, 50), myIntToFloat(150))), 8100))
Round(MorphOpenEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 9132, 55), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1))
Round(MorphOpenEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 9132, 55), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1))
Cv2AbsDiff(Daisy(LowpassFourierShift(ConvolveChannelMerge(ARG0, 3), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myIntAdd(1436, 7)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), passBool(greaterThan(0.1, 0.1)), myIntSub(myOr(trueBool, falseBool), myOr(falseBool, falseBool)), lessThanOrEqual(ifThenElseFloat(trueBool, 10.0, 1.0), myIntToFloat(64)), myOr(lessThanOrEqual(100.0, 0.01), notEqual(1.0, 0.01)), notEqual(myFloatDiv(0.1, 0.01), ifThenElseFloat(trueBool, 1.0, 100.0))), Cv2iDFT(MorphGradientRect(SobelFilter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), greaterThanEqual(2.2414107956226648, 0.1), greaterThanEqual(10.0, -1.6419461213306894)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), passAxis(passAxis(passAxis(Axis.AXIS_1))))
Cv2AbsDiff(Daisy(LowpassFourierShift(ConvolveChannelMerge(ARG0, 3), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myIntAdd(1436, 7)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), passBool(greaterThan(0.1, 0.1)), myIntSub(myOr(trueBool, falseBool), myOr(falseBool, falseBool)), lessThanOrEqual(ifThenElseFloat(trueBool, 10.0, 1.0), myIntToFloat(64)), myOr(lessThanOrEqual(100.0, 0.01), notEqual(1.0, 0.01)), notEqual(myFloatDiv(0.1, 0.01), ifThenElseFloat(trueBool, 1.0, 100.0))), Cv2iDFT(MorphGradientRect(SobelFilter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), greaterThanEqual(2.2414107956226648, 0.1), greaterThanEqual(10.0, -1.6419461213306894)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), passAxis(passAxis(passAxis(Axis.AXIS_1))))
WindowPlanckTaper(EmadeDataNumpyMultiplyInt(Cv2Add(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.FULL, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), equal(0.01, 1.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myFloatIntDiv(myFloatMult(100.0, 0.1), passInt(4302)))
WindowPlanckTaper(EmadeDataNumpyMultiplyInt(Cv2Add(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.FULL, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), equal(0.01, 1.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myFloatIntDiv(myFloatMult(100.0, 0.1), passInt(4302)))
Cv2Max(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.FULL)
Cv2Max(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.FULL)
Cv2Transpose(LowpassFilterUniform(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 5), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1))
Cv2Transpose(LowpassFilterUniform(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 5), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1))
MyDCT(WindowBartlettHann(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), greaterThanEqual(0.1, 0.1), myIntMult(7, 9))
MyDCT(WindowBartlettHann(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), greaterThanEqual(0.1, 0.1), myIntMult(7, 9))
MorphErosionCross(ARG0, TriState.FEATURES_TO_FEATURES, passAxis(passAxis(Axis.AXIS_0)), lessThan(0.1, myFloatIntAdd(-3.880951514416121, 4)), lessThanOrEqual(myFloatIntDiv(0.01, 1), myFloatIntSub(0.01, 1)), passInt(ifThenElseBool(trueBool, falseBool, trueBool)))
MorphErosionCross(ARG0, TriState.FEATURES_TO_FEATURES, passAxis(passAxis(Axis.AXIS_0)), lessThan(0.1, myFloatIntAdd(-3.880951514416121, 4)), lessThanOrEqual(myFloatIntDiv(0.01, 1), myFloatIntSub(0.01, 1)), passInt(ifThenElseBool(trueBool, falseBool, trueBool)))
Cv2LessThanOrEqual(WindowBartlett(KalmanFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 10.0, 1.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1)), LinearPredictiveCoding(MyAverager(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 3), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passBool(trueBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), passAxis(passAxis(Axis.AXIS_0)))
Cv2LessThanOrEqual(WindowBartlett(KalmanFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 10.0, 1.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1)), LinearPredictiveCoding(MyAverager(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 3), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passBool(trueBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), passAxis(passAxis(Axis.AXIS_0)))
SEPObjectDetection(Select3D(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 9982, 7, 32, 8, 9, 8), 1, -1.2843788976633053, myFloatDiv(2.5396375880965714, 100.0))
SEPObjectDetection(Select3D(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 9982, 7, 32, 8, 9, 8), 1, -1.2843788976633053, myFloatDiv(2.5396375880965714, 100.0))
AccumulateWeighted(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 10.0)
AccumulateWeighted(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 10.0)
LocalPoolingMax(SobelFilter(MorphTophatEllipse(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 150, 7), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), greaterThan(myFloatIntSub(0.01, 32), myFloatIntAdd(3.439737747925193, 100)))
LocalPoolingMax(SobelFilter(MorphTophatEllipse(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 150, 7), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), greaterThan(myFloatIntSub(0.01, 32), myFloatIntAdd(3.439737747925193, 100)))
SVCMulti(ARG0)
SVCMulti(ARG0)
MinimumFilter(WindowBackmanNuttall(LowpassFilterMedian(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 4), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myIntSub(myIntDiv(6, 32), greaterThan(1.0, 10.0)), myFloatMult(myFloatMult(100.0, 0.01), myFloatIntSub(100.0, 7131)))
MinimumFilter(WindowBackmanNuttall(LowpassFilterMedian(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 4), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myIntSub(myIntDiv(6, 32), greaterThan(1.0, 10.0)), myFloatMult(myFloatMult(100.0, 0.01), myFloatIntSub(100.0, 7131)))
WindowTriangular(HighpassFourierEllipsoid(mySelFwe(ARG0, TriState.FEATURES_TO_FEATURES, 10, 0.1), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myIntSub(0, 128)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)))
WindowTriangular(HighpassFourierEllipsoid(mySelFwe(ARG0, TriState.FEATURES_TO_FEATURES, 10, 0.1), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myIntSub(0, 128)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)))
Learner(ARG0, LearnerType('LIGHTGBM', {'max_depth': -1, 'learning_rate': 0.1, 'boosting_type': 0, 'num_leaves': 31}), EnsembleType('ADABOOST', {'n_estimators': 50, 'learning_rate': 1.0}))
Learner(ARG0, LearnerType('LIGHTGBM', {'max_depth': -1, 'learning_rate': 0.1, 'boosting_type': 0, 'num_leaves': 31}), EnsembleType('ADABOOST', {'n_estimators': 50, 'learning_rate': 1.0}))
ContourMaskRangeSolidity(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 100.0, 0.01)
ContourMaskRangeSolidity(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 100.0, 0.01)
CCorrObjectFilter(WindowBlackman(ThresholdBinaryInverseMask(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 1.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), myFloatMult(10.0, 0.1)), CrossCorrelation(AbsDiff(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.FULL, Axis.AXIS_0), BackgroundSubtraction(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_0)), myIntAdd(equal(1.0, 1.0), lessThan(1.0, 0.1)), myFloatMult(myFloatDiv(0.7203875658895722, 0.1), myFloatIntAdd(0.1, 4)))
CCorrObjectFilter(WindowBlackman(ThresholdBinaryInverseMask(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 1.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), myFloatMult(10.0, 0.1)), CrossCorrelation(AbsDiff(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.FULL, Axis.AXIS_0), BackgroundSubtraction(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_0)), myIntAdd(equal(1.0, 1.0), lessThan(1.0, 0.1)), myFloatMult(myFloatDiv(0.7203875658895722, 0.1), myFloatIntAdd(0.1, 4)))
GetCentroids(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2)
GetCentroids(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2)
MorphGradientRect(HighpassFourierGaussian(EmadeDataAddInt(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 50), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), notEqual(0.1, 10.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myAnd(equal(0.01, 1.0), greaterThanEqual(1.0, 100.0)), lessThanOrEqual(myFloatAdd(0.1, 0.1), passFloat(2.809239041832761)))
MorphGradientRect(HighpassFourierGaussian(EmadeDataAddInt(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 50), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), notEqual(0.1, 10.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myAnd(equal(0.01, 1.0), greaterThanEqual(1.0, 100.0)), lessThanOrEqual(myFloatAdd(0.1, 0.1), passFloat(2.809239041832761)))
ThresholdBinaryInverse(ifThenElseDataPair(falseBool, ARG0, ARG0), passTriState(TriState.STREAM_TO_FEATURES), Axis.FULL, myFloatIntAdd(100.0, 4))
ThresholdBinaryInverse(ifThenElseDataPair(falseBool, ARG0, ARG0), passTriState(TriState.STREAM_TO_FEATURES), Axis.FULL, myFloatIntAdd(100.0, 4))
StdDeviationHole(EmadeDataIntegerDividePair(LowpassFilterUniform(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 4), ToUint8Scale(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myAnd(lessThan(100.0, 4.476339883908636), greaterThan(10.0, 0.01)), myIntSub(myIntMult(4, trueBool), greaterThan(0.1, 100.0)))
StdDeviationHole(EmadeDataIntegerDividePair(LowpassFilterUniform(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 4), ToUint8Scale(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myAnd(lessThan(100.0, 4.476339883908636), greaterThan(10.0, 0.01)), myIntSub(myIntMult(4, trueBool), greaterThan(0.1, 100.0)))
MorphTophatEllipse(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 7, 2)
MorphTophatEllipse(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 7, 2)
WindowPlanckTaper(b-spline(WindowLanczos(Cv2Divide(MyAverager(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 9), MyAutoCorr(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), myIntToFloat(equal(myFloatSub(passFloat(0.8425333993447115), myFloatMult(0.1, -0.09814325781197031)), ifThenElseFloat(greaterThan(0.1, 0.1), myFloatMult(1.0, 4.0367555739795264), myFloatIntMult(0.1, falseBool)))))
WindowPlanckTaper(b-spline(WindowLanczos(Cv2Divide(MyAverager(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 9), MyAutoCorr(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), myIntToFloat(equal(myFloatSub(passFloat(0.8425333993447115), myFloatMult(0.1, -0.09814325781197031)), ifThenElseFloat(greaterThan(0.1, 0.1), myFloatMult(1.0, 4.0367555739795264), myFloatIntMult(0.1, falseBool)))))
ECDF(LowpassFilterUniform(Cv2Subtract(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_2, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), notEqual(-0.12009578860790882, 1.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myFloatToInt(ifThenElseFloat(trueBool, 10.0, 1.0)))
ECDF(LowpassFilterUniform(Cv2Subtract(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_2, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), notEqual(-0.12009578860790882, 1.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myFloatToInt(ifThenElseFloat(trueBool, 10.0, 1.0)))
StdDeviationHole(MyCumSum(RegionalMaxima(ThresholdBinaryInverseMask(ContourMaskMinExtent(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 64), TriState.FEATURES_TO_FEATURES, passAxis(Axis.AXIS_0), myFloatIntMult(-3.748829619063331, 1)), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), 3.9954131790236964), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), Axis.AXIS_2, passBool(trueBool)), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(Axis.AXIS_0), greaterThanEqual(ifThenElseFloat(greaterThan(myFloatIntDiv(1.0877889728248924, 1), 1.0), myIntToFloat(myIntDiv(5, 100)), myFloatIntMult(passFloat(0.01), myNot(trueBool))), myFloatIntSub(-3.847775854981872, passBool(lessThanOrEqual(0.08960161656990628, 100.0)))), myAnd(lessThanOrEqual(myFloatIntSub(myFloatDiv(0.1, 0.01), 255), 100.0), lessThanOrEqual(myFloatMult(myFloatSub(0.1, 0.1), myFloatDiv(10.0, 10.0)), myFloatMult(myFloatDiv(100.0, 0.1), ifThenElseFloat(trueBool, 0.01, 100.0)))))
StdDeviationHole(MyCumSum(RegionalMaxima(ThresholdBinaryInverseMask(ContourMaskMinExtent(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 64), TriState.FEATURES_TO_FEATURES, passAxis(Axis.AXIS_0), myFloatIntMult(-3.748829619063331, 1)), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), 3.9954131790236964), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), Axis.AXIS_2, passBool(trueBool)), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(Axis.AXIS_0), greaterThanEqual(ifThenElseFloat(greaterThan(myFloatIntDiv(1.0877889728248924, 1), 1.0), myIntToFloat(myIntDiv(5, 100)), myFloatIntMult(passFloat(0.01), myNot(trueBool))), myFloatIntSub(-3.847775854981872, passBool(lessThanOrEqual(0.08960161656990628, 100.0)))), myAnd(lessThanOrEqual(myFloatIntSub(myFloatDiv(0.1, 0.01), 255), 100.0), lessThanOrEqual(myFloatMult(myFloatSub(0.1, 0.1), myFloatDiv(10.0, 10.0)), myFloatMult(myFloatDiv(100.0, 0.1), ifThenElseFloat(trueBool, 0.01, 100.0)))))
LowpassFourierGaussian(WindowTriangular(RMS2D(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2)), TriState.STREAM_TO_STREAM, passAxis(Axis.AXIS_2), equal(myFloatDiv(0.6367164597132868, 0.01), passFloat(100.0)))
LowpassFourierGaussian(WindowTriangular(RMS2D(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2)), TriState.STREAM_TO_STREAM, passAxis(Axis.AXIS_2), equal(myFloatDiv(0.6367164597132868, 0.01), passFloat(100.0)))
ScalarMax(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 50)
ScalarMax(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 50)
MorphCloseRect(Cv2Transpose(MorphOpenEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 0, 4), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThanOrEqual(passFloat(100.0), myFloatIntSub(10.0, 0)), myOr(ifThenElseBool(trueBool, trueBool, falseBool), passBool(trueBool)))
MorphCloseRect(Cv2Transpose(MorphOpenEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 0, 4), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThanOrEqual(passFloat(100.0), myFloatIntSub(10.0, 0)), myOr(ifThenElseBool(trueBool, trueBool, falseBool), passBool(trueBool)))
ThresholdToZeroFloat(WindowKaiser(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 1.0, trueBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatIntSub(10.0, 21))
ThresholdToZeroFloat(WindowKaiser(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 1.0, trueBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatIntSub(10.0, 21))
Mutated 124 individuals
Mutating offspring (Swap Layer)
EqualizeHist(EqualizeHist(CornerDetectionEigen(StdDeviationHoleCustom(Cv2Subtract(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.FULL), SetToZeroIf>Data&Factor(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_0, -1.9967884891639098), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_2), lessThan(1.0, 1.0), equal(-3.2443671494734683, 100.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), greaterThan(myFloatIntDiv(0.1, 150), myFloatAdd(10.0, 1.0)), notEqual(myFloatDiv(1.0, 0.1), myFloatIntAdd(4.4060824977662385, 100)), myFloatIntAdd(myFloatSub(100.0, 10.0), greaterThanEqual(1.0, 10.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))))
EqualizeHist(EqualizeHist(CornerDetectionEigen(StdDeviationHoleCustom(Cv2Subtract(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.FULL), SetToZeroIf>Data&Factor(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_0, -1.9967884891639098), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_2), lessThan(1.0, 1.0), equal(-3.2443671494734683, 100.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), greaterThan(myFloatIntDiv(0.1, 150), myFloatAdd(10.0, 1.0)), notEqual(myFloatDiv(1.0, 0.1), myFloatIntAdd(4.4060824977662385, 100)), myFloatIntAdd(myFloatSub(100.0, 10.0), greaterThanEqual(1.0, 10.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))))
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(93, ARG0, randomUniformWeights, InputLayer(Cv2AddWeighted(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.FULL, 0, 92)))), 255)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(93, ARG0, randomUniformWeights, InputLayer(Cv2AddWeighted(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.FULL, 0, 92)))), 255)
ContourMaskRangeExtentEnclosingCircle(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 3, 8)
ContourMaskRangeExtentEnclosingCircle(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 3, 8)
BitwiseOr(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, Axis.FULL)
BitwiseOr(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, Axis.FULL)
Cv2Multiply(MorphGradientEllipse(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 6, 10), Tokenizer(ARG0, 0, 4), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.FULL))
Cv2Multiply(MorphGradientEllipse(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 6, 10), Tokenizer(ARG0, 0, 4), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.FULL))
EmadeDataDivideFloat(Fraction(BayesMulti(ARG0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatToInt(10.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), ifThenElseFloat(notEqual(0.01, 4.017077491468269), myFloatAdd(10.0, 100.0), passFloat(10.0)))
EmadeDataDivideFloat(Fraction(BayesMulti(ARG0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatToInt(10.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), ifThenElseFloat(notEqual(0.01, 4.017077491468269), myFloatAdd(10.0, 100.0), passFloat(10.0)))
MinimumFilter(ARG0, passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), lessThanOrEqual(ifThenElseFloat(passBool(falseBool), myFloatDiv(myFloatAdd(-1.9375893314771728, 10.0), myFloatDiv(100.0, 0.1)), myFloatMult(myFloatIntMult(0.01, trueBool), myFloatIntDiv(0.01, 0))), myFloatIntMult(myFloatSub(ifThenElseFloat(falseBool, 100.0, 100.0), myFloatIntAdd(1.0, 93)), 64)), myFloatMult(myFloatIntMult(0.01, myIntAdd(1, greaterThan(10.0, 1.0))), passFloat(myFloatIntSub(myFloatIntSub(10.0, 100), greaterThanEqual(10.0, 100.0)))))
MinimumFilter(ARG0, passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), lessThanOrEqual(ifThenElseFloat(passBool(falseBool), myFloatDiv(myFloatAdd(-1.9375893314771728, 10.0), myFloatDiv(100.0, 0.1)), myFloatMult(myFloatIntMult(0.01, trueBool), myFloatIntDiv(0.01, 0))), myFloatIntMult(myFloatSub(ifThenElseFloat(falseBool, 100.0, 100.0), myFloatIntAdd(1.0, 93)), 64)), myFloatMult(myFloatIntMult(0.01, myIntAdd(1, greaterThan(10.0, 1.0))), passFloat(myFloatIntSub(myFloatIntSub(10.0, 100), greaterThanEqual(10.0, 100.0)))))
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(8, ARG0, randomUniformWeights, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))))), 26)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(8, ARG0, randomUniformWeights, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))))), 26)
MyCumSum(Cv2RMS(SubtractSaturate(ThresholdToZeroFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 100.0), MultiplyTransposed(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, falseBool), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), myNot(lessThan(100.0, 100.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), passInt(myIntDiv(myIntAdd(3, falseBool), passBool(falseBool))))
MyCumSum(Cv2RMS(SubtractSaturate(ThresholdToZeroFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 100.0), MultiplyTransposed(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, falseBool), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), myNot(lessThan(100.0, 100.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), passInt(myIntDiv(myIntAdd(3, falseBool), passBool(falseBool))))
SubtractSaturate(ThresholdBinaryMax(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 35, 10.0), BackgroundSubtraction(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), TriState.STREAM_TO_FEATURES, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0))
SubtractSaturate(ThresholdBinaryMax(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 35, 10.0), BackgroundSubtraction(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), TriState.STREAM_TO_FEATURES, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0))
WindowBlackman(ThresholdToZeroFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 1.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatSub(1.0, 0.1))
WindowBlackman(ThresholdToZeroFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 1.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatSub(1.0, 0.1))
EmadeDataNumpyMultiplyFloat(MyCumSum(MyCumSum(CenterOfMass(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), lessThanOrEqual(0.01, 0.01)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), greaterThanEqual(myFloatDiv(-1.7849765477596624, 0.01), 0.1)), passTriState(TriState.STREAM_TO_STREAM), passAxis(passAxis(Axis.FULL)), myFloatSub(ifThenElseFloat(myOr(falseBool, trueBool), myFloatIntMult(1.0, 9), 1.0), passFloat(myFloatIntDiv(1.0, 5))))
EmadeDataNumpyMultiplyFloat(MyCumSum(MyCumSum(CenterOfMass(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), lessThanOrEqual(0.01, 0.01)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), greaterThanEqual(myFloatDiv(-1.7849765477596624, 0.01), 0.1)), passTriState(TriState.STREAM_TO_STREAM), passAxis(passAxis(Axis.FULL)), myFloatSub(ifThenElseFloat(myOr(falseBool, trueBool), myFloatIntMult(1.0, 9), 1.0), passFloat(myFloatIntDiv(1.0, 5))))
MinimumToZero(Tangent(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0), TriState.STREAM_TO_FEATURES, passAxis(Axis.AXIS_0))
MinimumToZero(Tangent(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0), TriState.STREAM_TO_FEATURES, passAxis(Axis.AXIS_0))
SetToZeroIf>Data&Factor(ContoursMaxLength(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 8), ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_0), myFloatIntSub(10.0, 4666))
SetToZeroIf>Data&Factor(ContoursMaxLength(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 8), ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_0), myFloatIntSub(10.0, 4666))
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 91)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 91)
myICA(ArcTangent(NumpyDivide(Cv2DCT(WindowPlanckTaper(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), SetToZeroIf>Data&Factor(LocalPoolingMedian(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, trueBool), WindowHann(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, falseBool), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_1), myFloatIntSub(2.351969454101937, 7)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passInt(myIntMult(myFloatToInt(passFloat(100.0)), myNot(notEqual(100.0, -3.5016043164886845)))), lessThanOrEqual(passFloat(myFloatDiv(myFloatIntDiv(3.7842163720029873, 6), myFloatIntSub(1.0, 55))), myFloatSub(myFloatIntSub(myFloatIntSub(1.0, 0), myOr(falseBool, trueBool)), myFloatIntDiv(passFloat(2.04794626486878), myFloatToInt(10.0)))))
myICA(ArcTangent(NumpyDivide(Cv2DCT(WindowPlanckTaper(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), SetToZeroIf>Data&Factor(LocalPoolingMedian(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, trueBool), WindowHann(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, falseBool), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_1), myFloatIntSub(2.351969454101937, 7)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passInt(myIntMult(myFloatToInt(passFloat(100.0)), myNot(notEqual(100.0, -3.5016043164886845)))), lessThanOrEqual(passFloat(myFloatDiv(myFloatIntDiv(3.7842163720029873, 6), myFloatIntSub(1.0, 55))), myFloatSub(myFloatIntSub(myFloatIntSub(1.0, 0), myOr(falseBool, trueBool)), myFloatIntDiv(passFloat(2.04794626486878), myFloatToInt(10.0)))))
ContoursMinLength(ContourMaskRangeEquDiameter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 128, 50), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), greaterThan(10.0, 0.01))
ContoursMinLength(ContourMaskRangeEquDiameter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 128, 50), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), greaterThan(10.0, 0.01))
ThresholdToZero(RMS2D(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passFloat(10.0))
ThresholdToZero(RMS2D(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passFloat(10.0))
ContourMaskMinExtent(EmadeDataNumpyMultiplyFloat(ThresholdToZeroFloat(EmadeDataNumpyMultiplyFloat(LowpassFilterUniform(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 100), TriState.FEATURES_TO_FEATURES, passAxis(Axis.FULL), myFloatDiv(1.0, 1.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), myFloatMult(myFloatAdd(-1.290955640033229, 10.0), 0.1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatDiv(10.0, myFloatSub(myFloatDiv(0.01, 0.01), passFloat(1.0)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), falseBool)
ContourMaskMinExtent(EmadeDataNumpyMultiplyFloat(ThresholdToZeroFloat(EmadeDataNumpyMultiplyFloat(LowpassFilterUniform(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 100), TriState.FEATURES_TO_FEATURES, passAxis(Axis.FULL), myFloatDiv(1.0, 1.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), myFloatMult(myFloatAdd(-1.290955640033229, 10.0), 0.1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatDiv(10.0, myFloatSub(myFloatDiv(0.01, 0.01), passFloat(1.0)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), falseBool)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(0, ARG0, randomUniformWeights, InputLayer(ARG0))), 93)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(0, ARG0, randomUniformWeights, InputLayer(ARG0))), 93)
Daisy(Cv2AbsDiff(Round(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), Prerejection(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 150, 3, 0.01), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThan(myFloatIntDiv(0.1, 95), myFloatIntMult(100.0, 1)), lessThanOrEqual(myFloatIntMult(-2.4033966752898586, 13), myFloatIntSub(0.1, 4)), myNot(myNot(falseBool)), myOr(ifThenElseBool(trueBool, falseBool, falseBool), greaterThan(0.1, 1.0)), 55)
Daisy(Cv2AbsDiff(Round(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), Prerejection(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 150, 3, 0.01), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThan(myFloatIntDiv(0.1, 95), myFloatIntMult(100.0, 1)), lessThanOrEqual(myFloatIntMult(-2.4033966752898586, 13), myFloatIntSub(0.1, 4)), myNot(myNot(falseBool)), myOr(ifThenElseBool(trueBool, falseBool, falseBool), greaterThan(0.1, 1.0)), 55)
EmadeDataDivideFloat(Exponetial(Cv2GreaterThanOrEqual(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), passFloat(myFloatAdd(100.0, 10.0)))
EmadeDataDivideFloat(Exponetial(Cv2GreaterThanOrEqual(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), passFloat(myFloatAdd(100.0, 10.0)))
AffinityPropagationClustering(LowpassFilterBilateral(EmadeDataMultiplyPair(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passBool(falseBool), myIntDiv(255, 100), myIntMult(3, 9)), myFloatIntMult(myIntToFloat(2), myIntAdd(4, 64)))
AffinityPropagationClustering(LowpassFilterBilateral(EmadeDataMultiplyPair(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passBool(falseBool), myIntDiv(255, 100), myIntMult(3, 9)), myFloatIntMult(myIntToFloat(2), myIntAdd(4, 64)))
MorphDilateRect(ARG0, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myIntMult(6536, 2), ifThenElseBool(trueBool, trueBool, trueBool), myIntAdd(6, falseBool))
MorphDilateRect(ARG0, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myIntMult(6536, 2), ifThenElseBool(trueBool, trueBool, trueBool), myIntAdd(6, falseBool))
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(93, ARG0, randomUniformWeights, InputLayer(ARG0))), 100)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(93, ARG0, randomUniformWeights, InputLayer(ARG0))), 100)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(8, ARG0, randomUniformWeights, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))))), 97)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(8, ARG0, randomUniformWeights, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))))), 97)
HighpassFourierUniform(EmadeDataAddFloat(ContourMaskMinEnclosingCircle(myIfThenElse(ARG0, ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, 10), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatIntMult(0.01, 5)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myFloatDiv(ifThenElseFloat(trueBool, 4.645336856249276, 10.0), myFloatSub(10.0, 0.1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatToInt(myFloatIntMult(myFloatIntSub(0.1, 3), greaterThan(0.01, 1.0))))
HighpassFourierUniform(EmadeDataAddFloat(ContourMaskMinEnclosingCircle(myIfThenElse(ARG0, ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, 10), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatIntMult(0.01, 5)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myFloatDiv(ifThenElseFloat(trueBool, 4.645336856249276, 10.0), myFloatSub(10.0, 0.1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatToInt(myFloatIntMult(myFloatIntSub(0.1, 3), greaterThan(0.01, 1.0))))
ContourMaskMinExtent(AdjustConstrastLog(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 0.01), TriState.STREAM_TO_FEATURES, passAxis(Axis.AXIS_1), notEqual(1.0, 2.2684350497829158))
ContourMaskMinExtent(AdjustConstrastLog(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 0.01), TriState.STREAM_TO_FEATURES, passAxis(Axis.AXIS_1), notEqual(1.0, 2.2684350497829158))
Cv2Pow(MatchedFiltering2D(MaximumWindow(ARG0, 50, 64, 0.01), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), greaterThanEqual(0.1, 100.0), myFloatSub(1.0, 10.0)), passTriState(TriState.STREAM_TO_STREAM), passAxis(passAxis(Axis.AXIS_0)), notEqual(myFloatAdd(0.6946386583754229, 100.0), myIntToFloat(-15)))
Cv2Pow(MatchedFiltering2D(MaximumWindow(ARG0, 50, 64, 0.01), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), greaterThanEqual(0.1, 100.0), myFloatSub(1.0, 10.0)), passTriState(TriState.STREAM_TO_STREAM), passAxis(passAxis(Axis.AXIS_0)), notEqual(myFloatAdd(0.6946386583754229, 100.0), myIntToFloat(-15)))
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(128, ARG0, randomUniformWeights, InputLayer(ARG0))), 2)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(128, ARG0, randomUniformWeights, InputLayer(ARG0))), 2)
Cv2LessThan(GaussianFilter(MySnapshot(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_0, 10), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myFloatAdd(10.0, 1.0)), ARG0, passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), passAxis(passAxis(Axis.FULL)))
Cv2LessThan(GaussianFilter(MySnapshot(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_0, 10), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myFloatAdd(10.0, 1.0)), ARG0, passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), passAxis(passAxis(Axis.FULL)))
Prerejection(ScalarDivide(Sine(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myIntToFloat(9729)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myOr(lessThan(-3.3131528187125117, 0.1), myOr(trueBool, trueBool)), myFloatToInt(myFloatSub(0.01, 10.0)), myFloatIntAdd(ifThenElseFloat(greaterThan(2.4325666852482506, 1.0), 100.0, 100.0), myIntAdd(1, 6)))
Prerejection(ScalarDivide(Sine(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myIntToFloat(9729)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myOr(lessThan(-3.3131528187125117, 0.1), myOr(trueBool, trueBool)), myFloatToInt(myFloatSub(0.01, 10.0)), myFloatIntAdd(ifThenElseFloat(greaterThan(2.4325666852482506, 1.0), 100.0, 100.0), myIntAdd(1, 6)))
MaximumFilter(HighpassFourierShift(ScalarDivide(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 1.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), lessThan(100.0, 100.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myIntDiv(lessThan(2.7127284278986945, 0.01), ifThenElseBool(trueBool, falseBool, falseBool)), myFloatMult(myFloatMult(1.0, 100.0), myFloatSub(100.0, 10.0)))
MaximumFilter(HighpassFourierShift(ScalarDivide(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 1.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), lessThan(100.0, 100.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myIntDiv(lessThan(2.7127284278986945, 0.01), ifThenElseBool(trueBool, falseBool, falseBool)), myFloatMult(myFloatMult(1.0, 100.0), myFloatSub(100.0, 10.0)))
MatchedFiltering(mySelFdr(mySelFwe(ARG0, TriState.STREAM_TO_FEATURES, 1, 10.0), passTriState(TriState.FEATURES_TO_FEATURES), lessThanOrEqual(10.0, -2.7563858572238544), myFloatDiv(0.01, -2.136480350665868)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myIntSub(equal(10.0, 100.0), notEqual(10.0, 0.01)))
MatchedFiltering(mySelFdr(mySelFwe(ARG0, TriState.STREAM_TO_FEATURES, 1, 10.0), passTriState(TriState.FEATURES_TO_FEATURES), lessThanOrEqual(10.0, -2.7563858572238544), myFloatDiv(0.01, -2.136480350665868)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myIntSub(equal(10.0, 100.0), notEqual(10.0, 0.01)))
ScalarAdd(ScalarMin(NormalLikelihood(ARG0, 64), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passInt(falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatAdd(ifThenElseFloat(trueBool, 0.01, 0.1), myFloatMult(10.0, 100.0)))
ScalarAdd(ScalarMin(NormalLikelihood(ARG0, 64), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passInt(falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatAdd(ifThenElseFloat(trueBool, 0.01, 0.1), myFloatMult(10.0, 100.0)))
SavitzkyGolayFilter(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, -3, 7, 3)
SavitzkyGolayFilter(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, -3, 7, 3)
MorphDilateCross(GetCentroids(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), greaterThan(0.01, -0.11553853002848147), lessThan(10.0, 0.01), 128)
MorphDilateCross(GetCentroids(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), greaterThan(0.01, -0.11553853002848147), lessThan(10.0, 0.01), 128)
Select1D(Cv2iDCT(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), passInt(64), ifThenElseBool(trueBool, falseBool, trueBool))
Select1D(Cv2iDCT(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), passInt(64), ifThenElseBool(trueBool, falseBool, trueBool))
birch_clustering(Fraction(MyInformedSearch(ContourMaskMaxArea(BitwiseOr(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatDiv(3.902935830697686, 10.0)), mySelPercentile(ArcCosine(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), myNot(trueBool), myFloatToInt(10.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.FULL)), greaterThanEqual(myFloatAdd(0.1, 1.0), myFloatIntSub(10.0, 150)), ifThenElseFloat(myAnd(trueBool, trueBool), myFloatDiv(-1.069937810499355, 100.0), myFloatMult(0.1, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myAnd(greaterThan(ifThenElseFloat(trueBool, 100.0, 100.0), myFloatIntSub(10.0, 100)), lessThan(passFloat(100.0), myFloatIntDiv(4.381976693959436, 6)))), ifThenElseFloat(myNot(myNot(passBool(falseBool))), passFloat(myFloatMult(myFloatAdd(-4.570421268450316, 0.01), myFloatIntSub(0.1, 18))), myFloatMult(myFloatIntSub(myFloatAdd(0.01, 10.0), myFloatToInt(100.0)), passFloat(myFloatIntMult(0.01, 32)))), myNot(ifThenElseBool(passBool(ifThenElseBool(trueBool, trueBool, falseBool)), equal(myIntToFloat(3), myFloatSub(0.1, 0.1)), lessThanOrEqual(myFloatIntMult(100.0, 2), myFloatIntMult(4.84979375267932, 3)))), myIntSub(greaterThanEqual(myFloatIntDiv(myFloatDiv(100.0, 1.1005220885659615), ifThenElseBool(trueBool, trueBool, falseBool)), myFloatIntAdd(myIntToFloat(4), myNot(falseBool))), lessThanOrEqual(myFloatIntAdd(myFloatIntAdd(10.0, 50), myIntMult(5, 3)), myFloatSub(myFloatAdd(1.0, 0.1), ifThenElseFloat(falseBool, 1.0, 0.1)))))
birch_clustering(Fraction(MyInformedSearch(ContourMaskMaxArea(BitwiseOr(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatDiv(3.902935830697686, 10.0)), mySelPercentile(ArcCosine(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), myNot(trueBool), myFloatToInt(10.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.FULL)), greaterThanEqual(myFloatAdd(0.1, 1.0), myFloatIntSub(10.0, 150)), ifThenElseFloat(myAnd(trueBool, trueBool), myFloatDiv(-1.069937810499355, 100.0), myFloatMult(0.1, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myAnd(greaterThan(ifThenElseFloat(trueBool, 100.0, 100.0), myFloatIntSub(10.0, 100)), lessThan(passFloat(100.0), myFloatIntDiv(4.381976693959436, 6)))), ifThenElseFloat(myNot(myNot(passBool(falseBool))), passFloat(myFloatMult(myFloatAdd(-4.570421268450316, 0.01), myFloatIntSub(0.1, 18))), myFloatMult(myFloatIntSub(myFloatAdd(0.01, 10.0), myFloatToInt(100.0)), passFloat(myFloatIntMult(0.01, 32)))), myNot(ifThenElseBool(passBool(ifThenElseBool(trueBool, trueBool, falseBool)), equal(myIntToFloat(3), myFloatSub(0.1, 0.1)), lessThanOrEqual(myFloatIntMult(100.0, 2), myFloatIntMult(4.84979375267932, 3)))), myIntSub(greaterThanEqual(myFloatIntDiv(myFloatDiv(100.0, 1.1005220885659615), ifThenElseBool(trueBool, trueBool, falseBool)), myFloatIntAdd(myIntToFloat(4), myNot(falseBool))), lessThanOrEqual(myFloatIntAdd(myFloatIntAdd(10.0, 50), myIntMult(5, 3)), myFloatSub(myFloatAdd(1.0, 0.1), ifThenElseFloat(falseBool, 1.0, 0.1)))))
MaxLoc(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2)
MaxLoc(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2)
FractionTriple(ARG0, ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.FULL, Axis.FULL, Axis.AXIS_0, 9)
FractionTriple(ARG0, ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.FULL, Axis.FULL, Axis.AXIS_0, 9)
LowpassFourierGaussian(MinLoc(ScalarMax(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 2), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), myOr(myNot(falseBool), myAnd(trueBool, falseBool)))
LowpassFourierGaussian(MinLoc(ScalarMax(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 2), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), myOr(myNot(falseBool), myAnd(trueBool, falseBool)))
Cv2GreaterThan(DohDetection(EqualizeDisk(ArcTangent(HighpassFourierShift(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 128), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), equal(myFloatSub(1.0, 100.0), myFloatIntMult(1.0, 32))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myFloatIntSub(ifThenElseFloat(greaterThan(100.0, 1.0), myFloatIntMult(100.0, -6), ifThenElseFloat(falseBool, 0.01, 10.0)), myAnd(myNot(falseBool), greaterThanEqual(100.0, 100.0))), myFloatIntDiv(myFloatIntSub(myFloatIntAdd(0.1, 7), greaterThanEqual(0.01, 1.149773193854145)), myIntMult(equal(-1.0006354747544122, 1.0), myIntDiv(50, 32))), myOr(myNot(lessThan(0.01, 0.01)), notEqual(myFloatMult(100.0, 1.710747811868588), myFloatDiv(1.0, 10.0))), ifThenElseFloat(lessThanOrEqual(myFloatIntDiv(0.01, 55), myFloatAdd(1.0, 0.1)), myFloatSub(myFloatMult(1.0, 0.01), passFloat(1.0)), myFloatSub(myFloatIntAdd(100.0, 4), myIntToFloat(3731))), ifThenElseFloat(myNot(myAnd(trueBool, falseBool)), myFloatDiv(myFloatIntDiv(0.1, 55), myFloatAdd(0.01, 10.0)), myFloatIntAdd(ifThenElseFloat(trueBool, 0.01, 100.0), myIntMult(6, 3)))), Log(LowpassFilterMedian(WindowHamming(NNLearner(ARG0, EmbeddingLayer(7, ARG0, randomUniformWeights, InputLayer(ARG0)), 39), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myOr(falseBool, trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), equal(passFloat(0.01), myFloatMult(100.0, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))))
Cv2GreaterThan(DohDetection(EqualizeDisk(ArcTangent(HighpassFourierShift(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 128), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), equal(myFloatSub(1.0, 100.0), myFloatIntMult(1.0, 32))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myFloatIntSub(ifThenElseFloat(greaterThan(100.0, 1.0), myFloatIntMult(100.0, -6), ifThenElseFloat(falseBool, 0.01, 10.0)), myAnd(myNot(falseBool), greaterThanEqual(100.0, 100.0))), myFloatIntDiv(myFloatIntSub(myFloatIntAdd(0.1, 7), greaterThanEqual(0.01, 1.149773193854145)), myIntMult(equal(-1.0006354747544122, 1.0), myIntDiv(50, 32))), myOr(myNot(lessThan(0.01, 0.01)), notEqual(myFloatMult(100.0, 1.710747811868588), myFloatDiv(1.0, 10.0))), ifThenElseFloat(lessThanOrEqual(myFloatIntDiv(0.01, 55), myFloatAdd(1.0, 0.1)), myFloatSub(myFloatMult(1.0, 0.01), passFloat(1.0)), myFloatSub(myFloatIntAdd(100.0, 4), myIntToFloat(3731))), ifThenElseFloat(myNot(myAnd(trueBool, falseBool)), myFloatDiv(myFloatIntDiv(0.1, 55), myFloatAdd(0.01, 10.0)), myFloatIntAdd(ifThenElseFloat(trueBool, 0.01, 100.0), myIntMult(6, 3)))), Log(LowpassFilterMedian(WindowHamming(NNLearner(ARG0, EmbeddingLayer(7, ARG0, randomUniformWeights, InputLayer(ARG0)), 39), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myOr(falseBool, trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), equal(passFloat(0.01), myFloatMult(100.0, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))))
ThresholdBinaryInverseMask(SpectralClustering(FFT(RXAnomalyDetector(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 0.01), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2)), passBool(myAnd(trueBool, trueBool)), myFloatIntSub(myFloatIntDiv(0.1, 50), myOr(falseBool, trueBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatIntDiv(myFloatIntSub(myFloatIntAdd(-3.787034217551224, 7), greaterThanEqual(10.0, 2.112472458245877)), myIntMult(myAnd(trueBool, falseBool), passInt(100))))
ThresholdBinaryInverseMask(SpectralClustering(FFT(RXAnomalyDetector(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 0.01), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2)), passBool(myAnd(trueBool, trueBool)), myFloatIntSub(myFloatIntDiv(0.1, 50), myOr(falseBool, trueBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatIntDiv(myFloatIntSub(myFloatIntAdd(-3.787034217551224, 7), greaterThanEqual(10.0, 2.112472458245877)), myIntMult(myAnd(trueBool, falseBool), passInt(100))))
LowpassFilterAverage(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 5)
LowpassFilterAverage(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 5)
ThresholdNLargest(Cv2DFTReal(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passBool(trueBool))
ThresholdNLargest(Cv2DFTReal(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passBool(trueBool))
TfidfVectorizer(ARG0, trueBool, trueBool, 64, 50)
TfidfVectorizer(ARG0, trueBool, trueBool, 64, 50)
ContoursConvexConcave(MorphErosionRect(MorphErosionCross(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 5, falseBool, 0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), equal(10.0, -1.7585142854105906), myOr(falseBool, falseBool), greaterThan(1.0, -3.4064061258950016)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), greaterThan(myFloatMult(0.01, 0.1), myFloatAdd(100.0, 1.6418281691369536)))
ContoursConvexConcave(MorphErosionRect(MorphErosionCross(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 5, falseBool, 0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), equal(10.0, -1.7585142854105906), myOr(falseBool, falseBool), greaterThan(1.0, -3.4064061258950016)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), greaterThan(myFloatMult(0.01, 0.1), myFloatAdd(100.0, 1.6418281691369536)))
ConvertBW(SelectRange(ThresholdToZeroPixelFloat(TfidfVectorizer(Cv2Add(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, Axis.FULL), greaterThan(1.0, 100.0), myNot(trueBool), passInt(64), myIntSub(7, 2)), ThresholdToZeroPixelFloat(Stemmatizer(ARG0, falseBool, 8), LowpassFilterGaussian(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 255, 64, 0.1, 0.01), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), ifThenElseBool(greaterThan(myFloatIntSub(10.0, 7), myFloatIntSub(2.879830603263221, 128)), myOr(lessThan(10.0, 100.0), lessThan(1.0, 10.0)), lessThan(myFloatSub(0.1, 1.0), myFloatSub(0.01, 100.0))), lessThan(myFloatDiv(myFloatIntDiv(100.0, 9), myFloatIntAdd(0.01, 10)), myFloatAdd(myFloatSub(100.0, 1.0), myFloatSub(0.1, 1.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))))
ConvertBW(SelectRange(ThresholdToZeroPixelFloat(TfidfVectorizer(Cv2Add(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, Axis.FULL), greaterThan(1.0, 100.0), myNot(trueBool), passInt(64), myIntSub(7, 2)), ThresholdToZeroPixelFloat(Stemmatizer(ARG0, falseBool, 8), LowpassFilterGaussian(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 255, 64, 0.1, 0.01), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), ifThenElseBool(greaterThan(myFloatIntSub(10.0, 7), myFloatIntSub(2.879830603263221, 128)), myOr(lessThan(10.0, 100.0), lessThan(1.0, 10.0)), lessThan(myFloatSub(0.1, 1.0), myFloatSub(0.01, 100.0))), lessThan(myFloatDiv(myFloatIntDiv(100.0, 9), myFloatIntAdd(0.01, 10)), myFloatAdd(myFloatSub(100.0, 1.0), myFloatSub(0.1, 1.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))))
ScalarMultiply(MorphBlackhatCross(ThresholdNLargest(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 55), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passInt(7), myNot(trueBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), myIntToFloat(myFloatToInt(-2.5591900504422735)))
ScalarMultiply(MorphBlackhatCross(ThresholdNLargest(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 55), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passInt(7), myNot(trueBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), myIntToFloat(myFloatToInt(-2.5591900504422735)))
Cv2iDFT(Cv2Pow(RandomNormal(MaxLoc(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), greaterThan(10.0, 2.183066584028529), greaterThan(2.0114790284316477, 100.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), myFloatToInt(myFloatDiv(0.01, -4.876999431474868))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))))
Cv2iDFT(Cv2Pow(RandomNormal(MaxLoc(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), greaterThan(10.0, 2.183066584028529), greaterThan(2.0114790284316477, 100.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), myFloatToInt(myFloatDiv(0.01, -4.876999431474868))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))))
MorphOpenRect(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 5, 50)
MorphOpenRect(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 5, 50)
BayesMulti(ARG0)
BayesMulti(ARG0)
SelectRange(LocalPoolingMean(EqualizeAdaptHist(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0.01), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), greaterThanEqual(10.0, 100.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passInt(myAnd(falseBool, falseBool)), myFloatToInt(myFloatIntAdd(100.0, 50)))
SelectRange(LocalPoolingMean(EqualizeAdaptHist(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0.01), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), greaterThanEqual(10.0, 100.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passInt(myAnd(falseBool, falseBool)), myFloatToInt(myFloatIntAdd(100.0, 50)))
Cv2Log(DohDetection(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 1.0, 2.699114992238833, 255, 10.0, 10.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1))
Cv2Log(DohDetection(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 1.0, 2.699114992238833, 255, 10.0, 10.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1))
ToFloatNorm(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0)
ToFloatNorm(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0)
GaussianFilter(EdgeDetectionCanny(LowpassFourierGaussian(HighpassFourierGaussian(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 8), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), greaterThan(-3.3287780050444384, 0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passBool(notEqual(1.0, 10.0)), ifThenElseBool(lessThanOrEqual(100.0, -1.91611843520604), lessThan(10.0, 100.0), lessThanOrEqual(1.0, 100.0)), equal(myFloatMult(10.0, 0.01), myFloatDiv(0.01, 10.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2))), passFloat(passFloat(myFloatDiv(1.0, 0.01))))
GaussianFilter(EdgeDetectionCanny(LowpassFourierGaussian(HighpassFourierGaussian(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 8), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), greaterThan(-3.3287780050444384, 0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passBool(notEqual(1.0, 10.0)), ifThenElseBool(lessThanOrEqual(100.0, -1.91611843520604), lessThan(10.0, 100.0), lessThanOrEqual(1.0, 100.0)), equal(myFloatMult(10.0, 0.01), myFloatDiv(0.01, 10.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2))), passFloat(passFloat(myFloatDiv(1.0, 0.01))))
OtsuBinaryThreshold(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 150)
OtsuBinaryThreshold(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 150)
ContoursMinLength(Cv2Max(MyInformedSearch(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.AXIS_2, 5, 100.0), WindowBlackmanHarris(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myIntSub(myFloatToInt(0.1), lessThan(0.1, 0.1)))
ContoursMinLength(Cv2Max(MyInformedSearch(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.AXIS_2, 5, 100.0), WindowBlackmanHarris(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myIntSub(myFloatToInt(0.1), lessThan(0.1, 0.1)))
HighpassFourierShift(ContourMaskMinArea(GradientMagnitude(HighpassSobelDerivative(MorphDilateRect(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, falseBool, falseBool, 128), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), greaterThan(0.1, 2.786419304314806), myNot(trueBool), lessThanOrEqual(0.1, 100.0), ifThenElseBool(falseBool, trueBool, falseBool), equal(-4.984486114261609, 2.744725551219613)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myOr(greaterThan(-0.5400219523893224, 0.01), myNot(trueBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatIntSub(myFloatIntAdd(passFloat(0.01), greaterThan(10.0, 0.01)), greaterThan(myFloatDiv(0.1, 0.01), myFloatMult(100.0, 10.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myIntSub(notEqual(myFloatIntMult(myFloatMult(0.1, 100.0), greaterThan(0.1, 1.0)), myFloatSub(ifThenElseFloat(trueBool, 0.01, 100.0), myFloatSub(0.6816162362787317, 0.1))), myIntMult(myAnd(lessThanOrEqual(1.0, 0.1), lessThanOrEqual(0.01, 2.071621441502006)), equal(myFloatIntMult(0.1, 50), myFloatMult(100.0, 0.1)))))
HighpassFourierShift(ContourMaskMinArea(GradientMagnitude(HighpassSobelDerivative(MorphDilateRect(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, falseBool, falseBool, 128), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), greaterThan(0.1, 2.786419304314806), myNot(trueBool), lessThanOrEqual(0.1, 100.0), ifThenElseBool(falseBool, trueBool, falseBool), equal(-4.984486114261609, 2.744725551219613)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myOr(greaterThan(-0.5400219523893224, 0.01), myNot(trueBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatIntSub(myFloatIntAdd(passFloat(0.01), greaterThan(10.0, 0.01)), greaterThan(myFloatDiv(0.1, 0.01), myFloatMult(100.0, 10.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myIntSub(notEqual(myFloatIntMult(myFloatMult(0.1, 100.0), greaterThan(0.1, 1.0)), myFloatSub(ifThenElseFloat(trueBool, 0.01, 100.0), myFloatSub(0.6816162362787317, 0.1))), myIntMult(myAnd(lessThanOrEqual(1.0, 0.1), lessThanOrEqual(0.01, 2.071621441502006)), equal(myFloatIntMult(0.1, 50), myFloatMult(100.0, 0.1)))))
MorphTophatCross(LocalPoolingMedian(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 50), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passBool(falseBool), greaterThanEqual(1.0, 1.8576036002490612))
MorphTophatCross(LocalPoolingMedian(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 50), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passBool(falseBool), greaterThanEqual(1.0, 1.8576036002490612))
ContourMaskMinEnclosingCircle(mySelFpr(ARG0, TriState.FEATURES_TO_FEATURES, 1, 1.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatIntMult(0.1, 4))
ContourMaskMinEnclosingCircle(mySelFpr(ARG0, TriState.FEATURES_TO_FEATURES, 1, 1.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatIntMult(0.1, 4))
EmadeDataNumpyMultiplyPair(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.FULL)
EmadeDataNumpyMultiplyPair(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.FULL)
Cv2AbsDiff(MyBinaryThreshold(Cv2Max(MedianFilterHole(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 7, 32), EqualizeHist(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), ifThenElseFloat(ifThenElseBool(trueBool, falseBool, trueBool), ifThenElseFloat(falseBool, 10.0, 100.0), myFloatMult(10.0, 10.0))), Cv2AddWeighted(StdDeviationHole(HighpassUnsharpMask(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 55, 255, 150), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), equal(0.1, 1.0), lessThanOrEqual(100.0, 1.0)), mySubSampleData(EmadeDataMultiplyInt(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 50), passBool(falseBool), myIntDiv(32, 55)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passAxis(passAxis(Axis.AXIS_1)), myIntAdd(myIntDiv(50, 55), greaterThanEqual(100.0, 1.0)), myIntSub(lessThanOrEqual(0.1, 10.0), lessThanOrEqual(0.1, 100.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), passAxis(passAxis(passAxis(Axis.AXIS_0))))
Cv2AbsDiff(MyBinaryThreshold(Cv2Max(MedianFilterHole(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 7, 32), EqualizeHist(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), ifThenElseFloat(ifThenElseBool(trueBool, falseBool, trueBool), ifThenElseFloat(falseBool, 10.0, 100.0), myFloatMult(10.0, 10.0))), Cv2AddWeighted(StdDeviationHole(HighpassUnsharpMask(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 55, 255, 150), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), equal(0.1, 1.0), lessThanOrEqual(100.0, 1.0)), mySubSampleData(EmadeDataMultiplyInt(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 50), passBool(falseBool), myIntDiv(32, 55)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passAxis(passAxis(Axis.AXIS_1)), myIntAdd(myIntDiv(50, 55), greaterThanEqual(100.0, 1.0)), myIntSub(lessThanOrEqual(0.1, 10.0), lessThanOrEqual(0.1, 100.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), passAxis(passAxis(passAxis(Axis.AXIS_0))))
ContourMaskMaxExtentEnclosingCircle(StdDeviationHole(Select2D(Cv2DFTReal(EmadeDataAddPair(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), Axis.AXIS_0), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThan(myFloatIntDiv(0.1, 7), -2.425601875451062), passBool(trueBool), lessThan(myFloatMult(10.0, 100.0), myIntToFloat(7)), myAnd(greaterThan(0.1, 3.0011748839657955), trueBool)), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(Axis.AXIS_0), equal(myFloatIntMult(myFloatIntDiv(0.1, 100), myAnd(falseBool, trueBool)), passFloat(myFloatIntMult(0.01, 0))), passInt(lessThanOrEqual(myFloatDiv(100.0, 10.0), -4.126451103850784))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myFloatMult(myFloatMult(myFloatIntDiv(myIntToFloat(50), lessThanOrEqual(1.0, 0.1)), myFloatMult(10.0, 100.0)), 1.0))
ContourMaskMaxExtentEnclosingCircle(StdDeviationHole(Select2D(Cv2DFTReal(EmadeDataAddPair(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), Axis.AXIS_0), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThan(myFloatIntDiv(0.1, 7), -2.425601875451062), passBool(trueBool), lessThan(myFloatMult(10.0, 100.0), myIntToFloat(7)), myAnd(greaterThan(0.1, 3.0011748839657955), trueBool)), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(Axis.AXIS_0), equal(myFloatIntMult(myFloatIntDiv(0.1, 100), myAnd(falseBool, trueBool)), passFloat(myFloatIntMult(0.01, 0))), passInt(lessThanOrEqual(myFloatDiv(100.0, 10.0), -4.126451103850784))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myFloatMult(myFloatMult(myFloatIntDiv(myIntToFloat(50), lessThanOrEqual(1.0, 0.1)), myFloatMult(10.0, 100.0)), 1.0))
FractionDouble(Cv2NotEqual(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.AXIS_1), myVarThresh(ARG0, TriState.STREAM_TO_FEATURES, 1.0), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_2), greaterThanEqual(0.1, 1.0))
FractionDouble(Cv2NotEqual(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.AXIS_1), myVarThresh(ARG0, TriState.STREAM_TO_FEATURES, 1.0), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_2), greaterThanEqual(0.1, 1.0))
ECDF(StandardNorm(MorphCloseRect(Cv2Transpose(MorphGradientEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 32, 3), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), greaterThan(myIntToFloat(6), myFloatIntSub(-0.9408985013123692, 8)), greaterThanEqual(myIntToFloat(10), myFloatIntAdd(0.1, 43))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), myAnd(ifThenElseBool(notEqual(myFloatAdd(0.1, 0.1), myFloatIntMult(0.01, 9)), greaterThan(myFloatIntSub(10.0, 26), ifThenElseFloat(falseBool, 100.0, 0.01)), lessThan(myFloatSub(10.0, 2.1707452951153794), myFloatIntDiv(10.0, 7))), equal(myIntToFloat(myIntDiv(1, 1)), myFloatSub(myFloatMult(100.0, 100.0), myFloatIntMult(0.1, 4)))))
ECDF(StandardNorm(MorphCloseRect(Cv2Transpose(MorphGradientEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 32, 3), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), greaterThan(myIntToFloat(6), myFloatIntSub(-0.9408985013123692, 8)), greaterThanEqual(myIntToFloat(10), myFloatIntAdd(0.1, 43))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), myAnd(ifThenElseBool(notEqual(myFloatAdd(0.1, 0.1), myFloatIntMult(0.01, 9)), greaterThan(myFloatIntSub(10.0, 26), ifThenElseFloat(falseBool, 100.0, 0.01)), lessThan(myFloatSub(10.0, 2.1707452951153794), myFloatIntDiv(10.0, 7))), equal(myIntToFloat(myIntDiv(1, 1)), myFloatSub(myFloatMult(100.0, 100.0), myFloatIntMult(0.1, 4)))))
SetToZeroIf<Data&Factor(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_2, trueBool)
SetToZeroIf<Data&Factor(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_2, trueBool)
ZeroOneNorm(InRange(BitwiseAnd(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_2), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myIntMult(9763, trueBool), myAnd(falseBool, falseBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)))
ZeroOneNorm(InRange(BitwiseAnd(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_2), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myIntMult(9763, trueBool), myAnd(falseBool, falseBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)))
MorphDilateCross(WindowCosine(TfidfVectorizer(ThresholdBinaryMax(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 2, 4.756369171538907), lessThan(4.615731731583043, 0.01), myAnd(trueBool, trueBool), 32, falseBool), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2))), TriState.STREAM_TO_FEATURES, passAxis(passAxis(passAxis(Axis.AXIS_2))), lessThanOrEqual(myIntToFloat(myAnd(trueBool, falseBool)), myFloatSub(myFloatMult(0.1, 100.0), myFloatAdd(0.01, 10.0))), myIntSub(64, myAnd(passBool(falseBool), greaterThanEqual(0.1, 100.0))), greaterThanEqual(myFloatDiv(myFloatIntAdd(1.0, 100), myFloatSub(1.0, -1.80813709854006)), 100.0))
MorphDilateCross(WindowCosine(TfidfVectorizer(ThresholdBinaryMax(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 2, 4.756369171538907), lessThan(4.615731731583043, 0.01), myAnd(trueBool, trueBool), 32, falseBool), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2))), TriState.STREAM_TO_FEATURES, passAxis(passAxis(passAxis(Axis.AXIS_2))), lessThanOrEqual(myIntToFloat(myAnd(trueBool, falseBool)), myFloatSub(myFloatMult(0.1, 100.0), myFloatAdd(0.01, 10.0))), myIntSub(64, myAnd(passBool(falseBool), greaterThanEqual(0.1, 100.0))), greaterThanEqual(myFloatDiv(myFloatIntAdd(1.0, 100), myFloatSub(1.0, -1.80813709854006)), 100.0))
DohDetection(ThresholdToZero(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 1.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatIntSub(1.0, 6), myFloatSub(10.0, 0.1), lessThanOrEqual(10.0, 0.1), myFloatIntSub(0.01, 8), ifThenElseFloat(falseBool, 100.0, 100.0))
DohDetection(ThresholdToZero(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 1.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatIntSub(1.0, 6), myFloatSub(10.0, 0.1), lessThanOrEqual(10.0, 0.1), myFloatIntSub(0.01, 8), ifThenElseFloat(falseBool, 100.0, 100.0))
WindowGaussian(mySelFwe(ContourMaskMinEquDiameter(Tangent(EdgeDetectionCanny(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 8, 37, 32), TriState.STREAM_TO_FEATURES, passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), equal(myFloatAdd(1.0, 100.0), myFloatSub(100.0, 100.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), myAnd(lessThanOrEqual(myFloatIntSub(0.1, 50), myFloatMult(100.0, 0.1)), notEqual(myFloatIntAdd(1.0, -2), 0.01)), passFloat(myFloatAdd(10.0, myFloatMult(100.0, 10.0)))), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), passFloat(passFloat(ifThenElseFloat(ifThenElseBool(falseBool, falseBool, trueBool), myFloatIntMult(100.0, 5), myFloatAdd(0.01, 1.0)))))
WindowGaussian(mySelFwe(ContourMaskMinEquDiameter(Tangent(EdgeDetectionCanny(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 8, 37, 32), TriState.STREAM_TO_FEATURES, passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), equal(myFloatAdd(1.0, 100.0), myFloatSub(100.0, 100.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), myAnd(lessThanOrEqual(myFloatIntSub(0.1, 50), myFloatMult(100.0, 0.1)), notEqual(myFloatIntAdd(1.0, -2), 0.01)), passFloat(myFloatAdd(10.0, myFloatMult(100.0, 10.0)))), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), passFloat(passFloat(ifThenElseFloat(ifThenElseBool(falseBool, falseBool, trueBool), myFloatIntMult(100.0, 5), myFloatAdd(0.01, 1.0)))))
ContourMaskMinLength(LowpassFilterAverage(Fraction(AccumulateWeighted(HighpassIrst(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatIntSub(0.1, 128)), TriState.STREAM_TO_FEATURES, passAxis(passAxis(Axis.AXIS_1)), passInt(myIntAdd(falseBool, 32))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myIntMult(ifThenElseBool(lessThanOrEqual(0.1, 0.1), myNot(falseBool), myAnd(trueBool, falseBool)), ifThenElseBool(myNot(trueBool), notEqual(-2.945577077817526, 0.1), myOr(falseBool, trueBool)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), myFloatIntMult(myFloatIntDiv(0.1, 100), lessThanOrEqual(100.0, myFloatSub(myIntToFloat(10), myFloatIntDiv(3.2379221126339335, 128)))))
ContourMaskMinLength(LowpassFilterAverage(Fraction(AccumulateWeighted(HighpassIrst(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatIntSub(0.1, 128)), TriState.STREAM_TO_FEATURES, passAxis(passAxis(Axis.AXIS_1)), passInt(myIntAdd(falseBool, 32))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myIntMult(ifThenElseBool(lessThanOrEqual(0.1, 0.1), myNot(falseBool), myAnd(trueBool, falseBool)), ifThenElseBool(myNot(trueBool), notEqual(-2.945577077817526, 0.1), myOr(falseBool, trueBool)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), myFloatIntMult(myFloatIntDiv(0.1, 100), lessThanOrEqual(100.0, myFloatSub(myIntToFloat(10), myFloatIntDiv(3.2379221126339335, 128)))))
Cv2LessThan(PeakFinder(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 1.0, 32), ContourMaskMaxExtent(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 55), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.FULL))
Cv2LessThan(PeakFinder(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 1.0, 32), ContourMaskMaxExtent(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 55), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.FULL))
KalmanFilter(WindowCosine(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), passFloat(0.01), myFloatDiv(10.0, 0.01))
KalmanFilter(WindowCosine(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), passFloat(0.01), myFloatDiv(10.0, 0.01))
ContourMaskMinSolidity(Cv2DCT(Cv2iDFT(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), notEqual(myFloatIntSub(10.0, 4), myFloatIntDiv(0.01, 100)))
ContourMaskMinSolidity(Cv2DCT(Cv2iDFT(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), notEqual(myFloatIntSub(10.0, 4), myFloatIntDiv(0.01, 100)))
Cv2Multiply(MultiplyTransposed(MorphErosionEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 3, 5, 32), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myNot(falseBool)), Select1D(NumNamedEntities(ARG0), passTriState(TriState.STREAM_TO_FEATURES), Axis.AXIS_0, myOr(falseBool, falseBool), lessThanOrEqual(0.1, -2.433276027963754)), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_2)))
Cv2Multiply(MultiplyTransposed(MorphErosionEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 3, 5, 32), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myNot(falseBool)), Select1D(NumNamedEntities(ARG0), passTriState(TriState.STREAM_TO_FEATURES), Axis.AXIS_0, myOr(falseBool, falseBool), lessThanOrEqual(0.1, -2.433276027963754)), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_2)))
k_means_clustering(AdjustConstrastLog(MySum(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myFloatIntMult(0.1, 150)), myIntSub(passBool(falseBool), equal(-2.259396040537408, 1.0)))
k_means_clustering(AdjustConstrastLog(MySum(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myFloatIntMult(0.1, 150)), myIntSub(passBool(falseBool), equal(-2.259396040537408, 1.0)))
EqualizeDisk(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 2)
EqualizeDisk(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 2)
LocalPoolingMax(ARG0, passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), 2)
LocalPoolingMax(ARG0, passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), 2)
myConcatenate(MaximumFilter(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 0, 100.0), LocalPoolingMedian(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 5), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_0))
myConcatenate(MaximumFilter(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 0, 100.0), LocalPoolingMedian(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 5), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_0))
MinimumFilter(ARG0, passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(Axis.AXIS_2), myIntSub(myAnd(myNot(trueBool), myOr(trueBool, trueBool)), myFloatToInt(myFloatIntMult(1.0, 10))), myFloatIntAdd(myFloatAdd(myFloatIntDiv(4.282246433732688, 32), ifThenElseFloat(falseBool, 0.1, 0.01)), myIntAdd(notEqual(-0.8743802203502646, 100.0), 128)))
MinimumFilter(ARG0, passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(Axis.AXIS_2), myIntSub(myAnd(myNot(trueBool), myOr(trueBool, trueBool)), myFloatToInt(myFloatIntMult(1.0, 10))), myFloatIntAdd(myFloatAdd(myFloatIntDiv(4.282246433732688, 32), ifThenElseFloat(falseBool, 0.1, 0.01)), myIntAdd(notEqual(-0.8743802203502646, 100.0), 128)))
FractionTriple(MorphErosionCross(Supersampling(EmadeDataAddFloat(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passFloat(-4.381465200475628), myAnd(trueBool, falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), Axis.AXIS_2, greaterThanEqual(myIntToFloat(4), 1.0), myOr(lessThan(1.0, 3.1544609291464862), notEqual(0.1, -0.3536715943156974)), 55), ToUint8(ContoursMaxLength(ARG0, passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), greaterThanEqual(0.01, -2.6667446718947807)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL))), LocalPoolingMean(ARG0, passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(Axis.FULL), myIntAdd(greaterThanEqual(10.0, 10.0), myIntDiv(3, 2))), TriState.FEATURES_TO_FEATURES, passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passTriState(passTriState(TriState.STREAM_TO_STREAM)), Axis.AXIS_0, passAxis(passAxis(passAxis(Axis.AXIS_0))), passAxis(passAxis(Axis.AXIS_0)), equal(myFloatDiv(myFloatIntSub(100.0, 8), myFloatIntAdd(100.0, 2)), myIntToFloat(myIntDiv(trueBool, 100))))
FractionTriple(MorphErosionCross(Supersampling(EmadeDataAddFloat(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passFloat(-4.381465200475628), myAnd(trueBool, falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), Axis.AXIS_2, greaterThanEqual(myIntToFloat(4), 1.0), myOr(lessThan(1.0, 3.1544609291464862), notEqual(0.1, -0.3536715943156974)), 55), ToUint8(ContoursMaxLength(ARG0, passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), greaterThanEqual(0.01, -2.6667446718947807)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL))), LocalPoolingMean(ARG0, passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(Axis.FULL), myIntAdd(greaterThanEqual(10.0, 10.0), myIntDiv(3, 2))), TriState.FEATURES_TO_FEATURES, passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passTriState(passTriState(TriState.STREAM_TO_STREAM)), Axis.AXIS_0, passAxis(passAxis(passAxis(Axis.AXIS_0))), passAxis(passAxis(Axis.AXIS_0)), equal(myFloatDiv(myFloatIntSub(100.0, 8), myFloatIntAdd(100.0, 2)), myIntToFloat(myIntDiv(trueBool, 100))))
LogDetection(Cv2Pow(MeanFilter(ContourMaskMaxExtentEnclosingCircle(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatToInt(0.1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThan(myFloatDiv(-3.4316643674859906, 100.0), myFloatMult(-3.9664146998609673, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2))), passFloat(myFloatIntAdd(myFloatMult(10.0, 0.01), myFloatToInt(0.01))), ifThenElseFloat(notEqual(myFloatMult(0.1, 0.01), myFloatIntDiv(0.1, 4)), passFloat(myIntToFloat(99)), myFloatIntDiv(ifThenElseFloat(falseBool, 10.0, 0.01), equal(10.0, 0.1))), lessThan(ifThenElseFloat(notEqual(100.0, 0.01), myFloatIntDiv(0.01, 32), myFloatIntDiv(10.0, 64)), myFloatIntDiv(ifThenElseFloat(falseBool, 0.01, -3.1611027872158415), lessThan(0.01, 0.01))), myFloatMult(myFloatMult(myFloatDiv(10.0, 1.0), myFloatIntMult(0.1, 83)), myFloatAdd(myFloatDiv(-0.19263036148403323, -1.3909339498826565), myFloatIntSub(0.01, 10))), myFloatMult(myIntToFloat(myIntSub(4, 1)), myFloatDiv(myFloatIntSub(-4.661708200468498, 0), myIntToFloat(64))))
LogDetection(Cv2Pow(MeanFilter(ContourMaskMaxExtentEnclosingCircle(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatToInt(0.1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThan(myFloatDiv(-3.4316643674859906, 100.0), myFloatMult(-3.9664146998609673, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2))), passFloat(myFloatIntAdd(myFloatMult(10.0, 0.01), myFloatToInt(0.01))), ifThenElseFloat(notEqual(myFloatMult(0.1, 0.01), myFloatIntDiv(0.1, 4)), passFloat(myIntToFloat(99)), myFloatIntDiv(ifThenElseFloat(falseBool, 10.0, 0.01), equal(10.0, 0.1))), lessThan(ifThenElseFloat(notEqual(100.0, 0.01), myFloatIntDiv(0.01, 32), myFloatIntDiv(10.0, 64)), myFloatIntDiv(ifThenElseFloat(falseBool, 0.01, -3.1611027872158415), lessThan(0.01, 0.01))), myFloatMult(myFloatMult(myFloatDiv(10.0, 1.0), myFloatIntMult(0.1, 83)), myFloatAdd(myFloatDiv(-0.19263036148403323, -1.3909339498826565), myFloatIntSub(0.01, 10))), myFloatMult(myIntToFloat(myIntSub(4, 1)), myFloatDiv(myFloatIntSub(-4.661708200468498, 0), myIntToFloat(64))))
ConvertToCounts(Cv2LessThanOrEqual(ARG0, AffinityPropagationClustering(MorphErosionCross(RXAnomalyDetector(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 10.0), passTriState(TriState.STREAM_TO_FEATURES), Axis.FULL, greaterThanEqual(0.7901885624626983, 10.0), myIntMult(64, 5), myIntAdd(8, 64)), myFloatMult(passFloat(0.01), passFloat(10.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), TriState.FEATURES_TO_FEATURES, passAxis(passAxis(passAxis(Axis.FULL))), Axis.FULL), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))))
ConvertToCounts(Cv2LessThanOrEqual(ARG0, AffinityPropagationClustering(MorphErosionCross(RXAnomalyDetector(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 10.0), passTriState(TriState.STREAM_TO_FEATURES), Axis.FULL, greaterThanEqual(0.7901885624626983, 10.0), myIntMult(64, 5), myIntAdd(8, 64)), myFloatMult(passFloat(0.01), passFloat(10.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), TriState.FEATURES_TO_FEATURES, passAxis(passAxis(passAxis(Axis.FULL))), Axis.FULL), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))))
FilterCentroids(ARG0)
FilterCentroids(ARG0)
ContourMaskMaxEquDiameter(RegionalMaxima(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 100.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), myIntSub(2, 32))
ContourMaskMaxEquDiameter(RegionalMaxima(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 100.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), myIntSub(2, 32))
AdjustConstrastGamma(rmsHole(Cv2LessThan(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), greaterThanEqual(-3.9981442040967776, 0.01), passInt(0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myFloatIntSub(myFloatIntAdd(100.0, 32), notEqual(100.0, 100.0)), myFloatSub(myFloatAdd(4.328738581811093, 10.0), myFloatIntDiv(1.0, 8)))
AdjustConstrastGamma(rmsHole(Cv2LessThan(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), greaterThanEqual(-3.9981442040967776, 0.01), passInt(0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myFloatIntSub(myFloatIntAdd(100.0, 32), notEqual(100.0, 100.0)), myFloatSub(myFloatAdd(4.328738581811093, 10.0), myFloatIntDiv(1.0, 8)))
MeanWithHole(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, trueBool, 150)
MeanWithHole(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, trueBool, 150)
CornerDetectionHarris(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 6, 32, 0.1)
CornerDetectionHarris(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 6, 32, 0.1)
GradientMagnitude(OtsuBinaryThreshold(ZeroOneNorm(SepDetectionWindow(Tfisf(ARG0, falseBool, 9, 100, 5), myIntMult(0, falseBool), myIntAdd(6, 150), myFloatIntDiv(100.0, 95)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatToInt(myFloatIntSub(ifThenElseFloat(trueBool, 10.0, -3.7605739694579556), greaterThan(100.0, 1.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), lessThanOrEqual(myFloatIntDiv(myFloatMult(passFloat(100.0), myFloatDiv(0.01, 0.01)), greaterThanEqual(myFloatIntSub(2.4152168463659986, 255), myFloatIntMult(10.0, 9))), myFloatSub(myFloatIntAdd(myFloatDiv(1.0, 10.0), passInt(255)), ifThenElseFloat(equal(-0.8829206295705507, 1.0), passFloat(1.0), myFloatAdd(0.1, 100.0)))))
GradientMagnitude(OtsuBinaryThreshold(ZeroOneNorm(SepDetectionWindow(Tfisf(ARG0, falseBool, 9, 100, 5), myIntMult(0, falseBool), myIntAdd(6, 150), myFloatIntDiv(100.0, 95)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatToInt(myFloatIntSub(ifThenElseFloat(trueBool, 10.0, -3.7605739694579556), greaterThan(100.0, 1.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), lessThanOrEqual(myFloatIntDiv(myFloatMult(passFloat(100.0), myFloatDiv(0.01, 0.01)), greaterThanEqual(myFloatIntSub(2.4152168463659986, 255), myFloatIntMult(10.0, 9))), myFloatSub(myFloatIntAdd(myFloatDiv(1.0, 10.0), passInt(255)), ifThenElseFloat(equal(-0.8829206295705507, 1.0), passFloat(1.0), myFloatAdd(0.1, 100.0)))))
PeakFinder(WindowCosine(WindowKaiser(LowpassFourierGaussian(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatIntDiv(-2.8465387975303127, 3432), ifThenElseBool(falseBool, falseBool, trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myIntToFloat(myAnd(notEqual(0.1, -3.0196590946131896), lessThan(-4.120067983666368, 0.01))), notEqual(myFloatSub(ifThenElseFloat(falseBool, 100.0, 0.01), myFloatSub(10.0, 10.0)), ifThenElseFloat(notEqual(1.0, 1.0), myFloatIntDiv(0.1, 6), myFloatDiv(0.1, 10.0))))
PeakFinder(WindowCosine(WindowKaiser(LowpassFourierGaussian(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatIntDiv(-2.8465387975303127, 3432), ifThenElseBool(falseBool, falseBool, trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myIntToFloat(myAnd(notEqual(0.1, -3.0196590946131896), lessThan(-4.120067983666368, 0.01))), notEqual(myFloatSub(ifThenElseFloat(falseBool, 100.0, 0.01), myFloatSub(10.0, 10.0)), ifThenElseFloat(notEqual(1.0, 1.0), myFloatIntDiv(0.1, 6), myFloatDiv(0.1, 10.0))))
WindowTurkey(GaussianFilter(Cv2GreaterThan(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_2, Axis.AXIS_2), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatSub(1.9137812026761676, 10.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myFloatAdd(myFloatIntDiv(0.1, 100), myFloatSub(100.0, 100.0)))
WindowTurkey(GaussianFilter(Cv2GreaterThan(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_2, Axis.AXIS_2), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatSub(1.9137812026761676, 10.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myFloatAdd(myFloatIntDiv(0.1, 100), myFloatSub(100.0, 100.0)))
ContourMaskMinLength(ContourMaskMaxExtent(ContourMaskMinArea(MorphOpenEllipse(ToFloat(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), lessThan(-0.6762484572072216, 100.0), myIntDiv(6, 32)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myIntToFloat(myFloatToInt(0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myIntSub(myNot(myOr(trueBool, falseBool)), lessThanOrEqual(myIntToFloat(10), myFloatSub(2.6315011508059785, 100.0)))), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(passAxis(Axis.AXIS_2)), myFloatIntSub(myFloatMult(ifThenElseFloat(lessThan(10.0, 1.0), myFloatIntMult(10.0, 150), ifThenElseFloat(trueBool, 100.0, -0.5743336376105344)), myFloatAdd(myFloatIntDiv(100.0, 50), myIntToFloat(150))), 8100))
ContourMaskMinLength(ContourMaskMaxExtent(ContourMaskMinArea(MorphOpenEllipse(ToFloat(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), lessThan(-0.6762484572072216, 100.0), myIntDiv(6, 32)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myIntToFloat(myFloatToInt(0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myIntSub(myNot(myOr(trueBool, falseBool)), lessThanOrEqual(myIntToFloat(10), myFloatSub(2.6315011508059785, 100.0)))), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(passAxis(Axis.AXIS_2)), myFloatIntSub(myFloatMult(ifThenElseFloat(lessThan(10.0, 1.0), myFloatIntMult(10.0, 150), ifThenElseFloat(trueBool, 100.0, -0.5743336376105344)), myFloatAdd(myFloatIntDiv(100.0, 50), myIntToFloat(150))), 8100))
ThresholdBinaryInverseMask(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 1.2955847893711567)
ThresholdBinaryInverseMask(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 1.2955847893711567)
Cv2AbsDiff(Daisy(LowpassFourierShift(ConvolveChannelMerge(ARG0, 3), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myIntAdd(1436, 7)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), passBool(greaterThan(0.1, 0.1)), myIntSub(myOr(trueBool, falseBool), myOr(falseBool, falseBool)), lessThanOrEqual(ifThenElseFloat(trueBool, 10.0, 1.0), myIntToFloat(64)), myOr(lessThanOrEqual(100.0, 0.01), notEqual(1.0, 0.01)), notEqual(myFloatDiv(0.1, 0.01), ifThenElseFloat(trueBool, 1.0, 100.0))), Cv2iDFT(MorphGradientRect(SobelFilter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), greaterThanEqual(2.2414107956226648, 0.1), greaterThanEqual(10.0, -1.6419461213306894)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), passAxis(passAxis(passAxis(Axis.AXIS_1))))
Cv2AbsDiff(Daisy(LowpassFourierShift(ConvolveChannelMerge(ARG0, 3), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myIntAdd(1436, 7)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), passBool(greaterThan(0.1, 0.1)), myIntSub(myOr(trueBool, falseBool), myOr(falseBool, falseBool)), lessThanOrEqual(ifThenElseFloat(trueBool, 10.0, 1.0), myIntToFloat(64)), myOr(lessThanOrEqual(100.0, 0.01), notEqual(1.0, 0.01)), notEqual(myFloatDiv(0.1, 0.01), ifThenElseFloat(trueBool, 1.0, 100.0))), Cv2iDFT(MorphGradientRect(SobelFilter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), greaterThanEqual(2.2414107956226648, 0.1), greaterThanEqual(10.0, -1.6419461213306894)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), passAxis(passAxis(passAxis(Axis.AXIS_1))))
FractionTriple(EqualizeDisk(SkiMedianFilter(Correlation(adf_1(ARG0), MyDWT(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 64), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), myIntDiv(passBool(trueBool), myIntMult(8, -3))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), notEqual(myFloatIntDiv(myFloatIntAdd(1.0, 255), greaterThan(0.1, 3.526481380461826)), myFloatMult(myFloatSub(10.0, 0.01), myFloatIntAdd(1.0, 100)))), EqualizeHist(MinimumFilter(mySpectralEmbedding(RXAnomalyDetector(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 0.3499789971259881), passTriState(TriState.STREAM_TO_FEATURES), greaterThan(1.0, 100.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myIntAdd(passInt(39), passInt(4)), myFloatIntDiv(myFloatIntMult(-0.11308845024453529, 32), myIntSub(5, 100))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL)))), GaussianPeakEM(ThresholdBinaryInverse(myICA(MorphGradientCross(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, -8, 50), passTriState(TriState.STREAM_TO_STREAM), myNot(falseBool), equal(0.1, -1.4327985470199565)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), ifThenElseFloat(myAnd(trueBool, falseBool), myFloatIntSub(1.0, 2), myFloatIntDiv(10.0, 50))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_0)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myAnd(ifThenElseBool(myOr(notEqual(0.1, -2.8222104328678252), greaterThan(0.1, 0.1)), myOr(equal(0.1, -3.1907020416019174), notEqual(10.0, 1.705837006246771)), myOr(ifThenElseBool(trueBool, falseBool, falseBool), passBool(trueBool))), equal(myFloatIntDiv(myFloatDiv(10.0, 0.01), myIntSub(5, 1145)), myFloatAdd(myFloatIntAdd(1.0, 10), myFloatDiv(1.0, 100.0)))))
FractionTriple(EqualizeDisk(SkiMedianFilter(Correlation(adf_1(ARG0), MyDWT(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 64), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), myIntDiv(passBool(trueBool), myIntMult(8, -3))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), notEqual(myFloatIntDiv(myFloatIntAdd(1.0, 255), greaterThan(0.1, 3.526481380461826)), myFloatMult(myFloatSub(10.0, 0.01), myFloatIntAdd(1.0, 100)))), EqualizeHist(MinimumFilter(mySpectralEmbedding(RXAnomalyDetector(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 0.3499789971259881), passTriState(TriState.STREAM_TO_FEATURES), greaterThan(1.0, 100.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myIntAdd(passInt(39), passInt(4)), myFloatIntDiv(myFloatIntMult(-0.11308845024453529, 32), myIntSub(5, 100))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL)))), GaussianPeakEM(ThresholdBinaryInverse(myICA(MorphGradientCross(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, -8, 50), passTriState(TriState.STREAM_TO_STREAM), myNot(falseBool), equal(0.1, -1.4327985470199565)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), ifThenElseFloat(myAnd(trueBool, falseBool), myFloatIntSub(1.0, 2), myFloatIntDiv(10.0, 50))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_0)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myAnd(ifThenElseBool(myOr(notEqual(0.1, -2.8222104328678252), greaterThan(0.1, 0.1)), myOr(equal(0.1, -3.1907020416019174), notEqual(10.0, 1.705837006246771)), myOr(ifThenElseBool(trueBool, falseBool, falseBool), passBool(trueBool))), equal(myFloatIntDiv(myFloatDiv(10.0, 0.01), myIntSub(5, 1145)), myFloatAdd(myFloatIntAdd(1.0, 10), myFloatDiv(1.0, 100.0)))))
myICA(Cv2GreaterThanOrEqual(MySum(ContourMaskRangeExtent(ARG0, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), greaterThan(10.0, 100.0), myOr(trueBool, falseBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0))), ContourMaskMinEnclosingCircle(ScalarMax(Fraction(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), myNot(trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myIntToFloat(ifThenElseBool(falseBool, falseBool, falseBool))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), Axis.AXIS_1), TriState.STREAM_TO_STREAM, greaterThanEqual(passFloat(myFloatIntDiv(0.01, lessThan(0.1, 1.0892904204063267))), myFloatIntDiv(myFloatMult(passFloat(0.1), ifThenElseFloat(trueBool, -3.7044563185788038, 2.2436539361785792)), passBool(notEqual(0.01, 100.0)))), trueBool)
myICA(Cv2GreaterThanOrEqual(MySum(ContourMaskRangeExtent(ARG0, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), greaterThan(10.0, 100.0), myOr(trueBool, falseBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0))), ContourMaskMinEnclosingCircle(ScalarMax(Fraction(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), myNot(trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myIntToFloat(ifThenElseBool(falseBool, falseBool, falseBool))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), Axis.AXIS_1), TriState.STREAM_TO_STREAM, greaterThanEqual(passFloat(myFloatIntDiv(0.01, lessThan(0.1, 1.0892904204063267))), myFloatIntDiv(myFloatMult(passFloat(0.1), ifThenElseFloat(trueBool, -3.7044563185788038, 2.2436539361785792)), passBool(notEqual(0.01, 100.0)))), trueBool)
Cv2Transpose(LowpassFilterUniform(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 5), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1))
Cv2Transpose(LowpassFilterUniform(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 5), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1))
SpectralClustering(mySelFdr(BitwiseNOT(CCorrObjectFilter(StdDeviationHole(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 150, 8), Cv2Divide(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.FULL), myIntDiv(falseBool, 128), myFloatMult(2.712278516880108, 0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), lessThanOrEqual(myFloatAdd(myFloatSub(0.01, 1.0), myFloatMult(0.01, 0.1)), myFloatSub(0.1, myFloatIntAdd(100.0, 32))), myIntToFloat(myOr(greaterThan(1.0, 100.0), lessThanOrEqual(100.0, -3.579735167629683)))), notEqual(myIntToFloat(equal(0.1, myFloatMult(100.0, 0.01))), passFloat(myFloatIntAdd(myFloatIntSub(0.01, 2), ifThenElseBool(falseBool, falseBool, trueBool)))), myFloatMult(myFloatIntDiv(ifThenElseFloat(equal(100.0, 10.0), myFloatIntMult(2.476430078273766, 2), myFloatAdd(100.0, 0.01)), 0), myFloatIntDiv(myFloatIntDiv(myFloatIntAdd(100.0, 128), myNot(trueBool)), lessThanOrEqual(myFloatMult(0.1, 0.01), myFloatIntMult(10.0, 150)))))
SpectralClustering(mySelFdr(BitwiseNOT(CCorrObjectFilter(StdDeviationHole(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 150, 8), Cv2Divide(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.FULL), myIntDiv(falseBool, 128), myFloatMult(2.712278516880108, 0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), lessThanOrEqual(myFloatAdd(myFloatSub(0.01, 1.0), myFloatMult(0.01, 0.1)), myFloatSub(0.1, myFloatIntAdd(100.0, 32))), myIntToFloat(myOr(greaterThan(1.0, 100.0), lessThanOrEqual(100.0, -3.579735167629683)))), notEqual(myIntToFloat(equal(0.1, myFloatMult(100.0, 0.01))), passFloat(myFloatIntAdd(myFloatIntSub(0.01, 2), ifThenElseBool(falseBool, falseBool, trueBool)))), myFloatMult(myFloatIntDiv(ifThenElseFloat(equal(100.0, 10.0), myFloatIntMult(2.476430078273766, 2), myFloatAdd(100.0, 0.01)), 0), myFloatIntDiv(myFloatIntDiv(myFloatIntAdd(100.0, 128), myNot(trueBool)), lessThanOrEqual(myFloatMult(0.1, 0.01), myFloatIntMult(10.0, 150)))))
MorphErosionCross(ARG0, TriState.FEATURES_TO_FEATURES, passAxis(passAxis(Axis.AXIS_0)), lessThan(0.1, myFloatIntAdd(-3.880951514416121, 4)), lessThanOrEqual(myFloatIntDiv(0.01, 1), myFloatIntSub(0.01, 1)), passInt(ifThenElseBool(trueBool, falseBool, trueBool)))
MorphErosionCross(ARG0, TriState.FEATURES_TO_FEATURES, passAxis(passAxis(Axis.AXIS_0)), lessThan(0.1, myFloatIntAdd(-3.880951514416121, 4)), lessThanOrEqual(myFloatIntDiv(0.01, 1), myFloatIntSub(0.01, 1)), passInt(ifThenElseBool(trueBool, falseBool, trueBool)))
MyInformedSearch(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_1, 64, 100.0)
MyInformedSearch(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_1, 64, 100.0)
SEPObjectDetection(Select3D(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 9982, 7, 32, 8, 9, 8), 1, -1.2843788976633053, myFloatDiv(2.5396375880965714, 100.0))
SEPObjectDetection(Select3D(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 9982, 7, 32, 8, 9, 8), 1, -1.2843788976633053, myFloatDiv(2.5396375880965714, 100.0))
Cosine(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1)
Cosine(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1)
SVCMulti(ARG0)
SVCMulti(ARG0)
MinimumFilter(WindowBackmanNuttall(LowpassFilterMedian(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 4), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myIntSub(myIntDiv(6, 32), greaterThan(1.0, 10.0)), myFloatMult(myFloatMult(100.0, 0.01), myFloatIntSub(100.0, 7131)))
MinimumFilter(WindowBackmanNuttall(LowpassFilterMedian(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 4), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myIntSub(myIntDiv(6, 32), greaterThan(1.0, 10.0)), myFloatMult(myFloatMult(100.0, 0.01), myFloatIntSub(100.0, 7131)))
MultiplySpectrum(HighpassSobelDerivative(RandomShuffle(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myIntAdd(128, 150), 9, myAnd(falseBool, trueBool), myAnd(falseBool, trueBool), 55), ToUint8Scale(ThresholdBinary(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 0.01, 8), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1)), passTriState(TriState.STREAM_TO_FEATURES), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.AXIS_0)))
MultiplySpectrum(HighpassSobelDerivative(RandomShuffle(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myIntAdd(128, 150), 9, myAnd(falseBool, trueBool), myAnd(falseBool, trueBool), 55), ToUint8Scale(ThresholdBinary(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 0.01, 8), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1)), passTriState(TriState.STREAM_TO_FEATURES), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.AXIS_0)))
ToUint8Scale(ContourMaskMinArea(EmadeDataAddPair(GetCentroids(MorphBlackhatEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 7, 128), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1)), Correlation(Fraction(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 128), ConvertToCounts(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatIntMult(myFloatIntDiv(myFloatMult(100.0, 0.1), myIntDiv(255, 1070)), myFloatToInt(myFloatIntMult(100.0, 3)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))))
ToUint8Scale(ContourMaskMinArea(EmadeDataAddPair(GetCentroids(MorphBlackhatEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 7, 128), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1)), Correlation(Fraction(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 128), ConvertToCounts(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatIntMult(myFloatIntDiv(myFloatMult(100.0, 0.1), myIntDiv(255, 1070)), myFloatToInt(myFloatIntMult(100.0, 3)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))))
ContourMaskRangeSolidity(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 100.0, 0.01)
ContourMaskRangeSolidity(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 100.0, 0.01)
InRange(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 5, 55)
InRange(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 5, 55)
GetCentroids(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2)
GetCentroids(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2)
ContourMaskMaxExtent(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 128)
ContourMaskMaxExtent(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 128)
ThresholdBinaryMax(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, trueBool, 0.1644533802934074)
ThresholdBinaryMax(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, trueBool, 0.1644533802934074)
ThresholdBinaryInverse(ifThenElseDataPair(falseBool, ARG0, ARG0), passTriState(TriState.STREAM_TO_FEATURES), Axis.FULL, myFloatIntAdd(100.0, 4))
ThresholdBinaryInverse(ifThenElseDataPair(falseBool, ARG0, ARG0), passTriState(TriState.STREAM_TO_FEATURES), Axis.FULL, myFloatIntAdd(100.0, 4))
MySum(HashingVectorizer(ARG0, falseBool, 100, 9, 28), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL))
MySum(HashingVectorizer(ARG0, falseBool, 100, 9, 28), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL))
EdgeDetectionCanny(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 5, 8, 55)
EdgeDetectionCanny(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 5, 8, 55)
WindowPlanckTaper(b-spline(WindowLanczos(Cv2Divide(MyAverager(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 9), MyAutoCorr(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), myIntToFloat(equal(myFloatSub(passFloat(0.8425333993447115), myFloatMult(0.1, -0.09814325781197031)), ifThenElseFloat(greaterThan(0.1, 0.1), myFloatMult(1.0, 4.0367555739795264), myFloatIntMult(0.1, falseBool)))))
WindowPlanckTaper(b-spline(WindowLanczos(Cv2Divide(MyAverager(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 9), MyAutoCorr(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), myIntToFloat(equal(myFloatSub(passFloat(0.8425333993447115), myFloatMult(0.1, -0.09814325781197031)), ifThenElseFloat(greaterThan(0.1, 0.1), myFloatMult(1.0, 4.0367555739795264), myFloatIntMult(0.1, falseBool)))))
LowpassFilterMedian(CCorrObjectFilter(ARG0, ARG0, 4, 1.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), equal(-0.10305461821649331, 0.01))
LowpassFilterMedian(CCorrObjectFilter(ARG0, ARG0, 4, 1.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), equal(-0.10305461821649331, 0.01))
EmadeDataSubtractFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 0.1)
EmadeDataSubtractFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 0.1)
Cv2Max(WindowBackmanNuttall(b-spline(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), ThresholdBinaryInverseMask(Cv2GreaterThanOrEqual(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myFloatSub(0.1, 0.1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_1)))
Cv2Max(WindowBackmanNuttall(b-spline(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), ThresholdBinaryInverseMask(Cv2GreaterThanOrEqual(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myFloatSub(0.1, 0.1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_1)))
ZeroOneNorm(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0)
ZeroOneNorm(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0)
MorphCloseRect(Cv2Transpose(MorphOpenEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 0, 4), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThanOrEqual(passFloat(100.0), myFloatIntSub(10.0, 0)), myOr(ifThenElseBool(trueBool, trueBool, falseBool), passBool(trueBool)))
MorphCloseRect(Cv2Transpose(MorphOpenEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 0, 4), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThanOrEqual(passFloat(100.0), myFloatIntSub(10.0, 0)), myOr(ifThenElseBool(trueBool, trueBool, falseBool), passBool(trueBool)))
MorphErosionEllipse(MorphDilateEllipse(Cv2Divide(MorphGradientEllipse(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 100, 128), StdDeviationHoleCustom(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.AXIS_0, trueBool, 4), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), 10, myOr(myNot(trueBool), trueBool), myIntSub(myIntAdd(9, 1), passBool(falseBool))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), lessThan(4.097480322861756, 100.0), myAnd(myOr(myAnd(trueBool, falseBool), equal(10.0, 0.1)), greaterThanEqual(100.0, 0.1)), myFloatToInt(10.0))
MorphErosionEllipse(MorphDilateEllipse(Cv2Divide(MorphGradientEllipse(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 100, 128), StdDeviationHoleCustom(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.AXIS_0, trueBool, 4), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), 10, myOr(myNot(trueBool), trueBool), myIntSub(myIntAdd(9, 1), passBool(falseBool))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), lessThan(4.097480322861756, 100.0), myAnd(myOr(myAnd(trueBool, falseBool), equal(10.0, 0.1)), greaterThanEqual(100.0, 0.1)), myFloatToInt(10.0))
Mutated 123 individuals
Heal Offspring
Healed128 individuals
Already computed NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 91) with fitness (0.04490820649615568, 800001.0) hash 4376795a5a254724d947d0454392ea19d1725e1f1e22cd6f095d2430e2542cea and age 1.0
Already computed myICA(ArcTangent(NumpyDivide(Cv2DCT(WindowPlanckTaper(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), SetToZeroIf>Data&Factor(LocalPoolingMedian(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, trueBool), WindowHann(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, falseBool), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_1), myFloatIntSub(2.351969454101937, 7)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passInt(myIntMult(myFloatToInt(passFloat(100.0)), myNot(notEqual(100.0, -3.5016043164886845)))), lessThanOrEqual(passFloat(myFloatDiv(myFloatIntDiv(3.7842163720029873, 6), myFloatIntSub(1.0, 55))), myFloatSub(myFloatIntSub(myFloatIntSub(1.0, 0), myOr(falseBool, trueBool)), myFloatIntDiv(passFloat(2.04794626486878), myFloatToInt(10.0))))) with fitness (inf, inf) hash d67559cf72920bf8cfe473f4c793e3b0ec00f34bf539cdc8768f60bb5b73d8b4 and age 0
Already computed NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(93, ARG0, randomUniformWeights, InputLayer(ARG0))), 100) with fitness (0.04506511846853911, 744001.0) hash 138bce9aac71129d4f785d54f4a3a7d161a607c23018300e6deba679adc2d2dd and age 1.0
Already computed SVCMulti(ARG0) with fitness (inf, inf) hash 648a3973d6585986482d65feb0fc12ed54a29df856626f34ead937092fdcf663 and age 0
Offspring has 128 elements before I remove those that are already being processed
Removing hashes:
[]
Removed 0 individuals that were already being processed left with 128
After matings and mutations 127 out of 128 are unique
Additionally 128 individuals are unique in memory
And 491 mains and adfs are unique
Adding 4 to evaluated offspring list of length 0
Making length 4
Recomputing fitnesses for 123 offspring
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:25:34.875156
After Uneval Count Query | 2020-08-22 21:25:35.444831
143 elements remaining in queue, query complete in 0.57 seconds
Starting cache optimization
Finished cache optimization
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:25:35.667546
After Uneval Count Query | 2020-08-22 21:25:35.890499
143 elements remaining in queue, query complete in 0.22 seconds
Good night
Good morning
Starting Gen 3
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:25:45.901420
After Uneval Count Query | 2020-08-22 21:25:46.880855
143 elements remaining in queue, query complete in 0.98 seconds
Good night
Good morning
Starting Gen 3
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:25:56.891296
After Uneval Count Query | 2020-08-22 21:25:57.051853
125 elements remaining in queue, query complete in 0.16 seconds
Good night
Good morning
Starting Gen 3
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:26:07.063000
After Uneval Count Query | 2020-08-22 21:26:07.177175
125 elements remaining in queue, query complete in 0.11 seconds
Good night
Good morning
Starting Gen 3
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:26:17.188191
After Uneval Count Query | 2020-08-22 21:26:17.439633
124 elements remaining in queue, query complete in 0.25 seconds
Good night
Good morning
Starting Gen 3
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:26:27.450150
After Uneval Count Query | 2020-08-22 21:26:27.530604
124 elements remaining in queue, query complete in 0.08 seconds
Good night
Good morning
Starting Gen 3
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:26:37.541669
After Uneval Count Query | 2020-08-22 21:26:37.546641
124 elements remaining in queue, query complete in 0.01 seconds
Good night
Good morning
Starting Gen 3
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:26:47.557750
After Uneval Count Query | 2020-08-22 21:26:47.562609
124 elements remaining in queue, query complete in 0.00 seconds
Good night
Good morning
Starting Gen 3
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:26:57.573175
After Uneval Count Query | 2020-08-22 21:26:57.577702
124 elements remaining in queue, query complete in 0.00 seconds
Good night
Good morning
Starting Gen 3
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:27:07.588370
After Uneval Count Query | 2020-08-22 21:27:07.591347
124 elements remaining in queue, query complete in 0.00 seconds
Good night
Good morning
Starting Gen 3
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:27:17.602303
After Uneval Count Query | 2020-08-22 21:27:17.607910
123 elements remaining in queue, query complete in 0.01 seconds
Good night
Good morning
Starting Gen 3
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:27:27.618415
After Uneval Count Query | 2020-08-22 21:27:27.685865
115 elements remaining in queue, query complete in 0.07 seconds
Good night
Good morning
Starting Gen 3
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:27:37.696598
After Uneval Count Query | 2020-08-22 21:27:37.803017
115 elements remaining in queue, query complete in 0.11 seconds
Good night
Good morning
Starting Gen 3
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:27:47.813670
After Uneval Count Query | 2020-08-22 21:27:47.989059
95 elements remaining in queue, query complete in 0.18 seconds
Good night
Good morning
Starting Gen 3
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:27:57.999435
After Uneval Count Query | 2020-08-22 21:27:58.139772
76 elements remaining in queue, query complete in 0.14 seconds
Good night
Good morning
Starting Gen 3
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:28:08.150761
After Uneval Count Query | 2020-08-22 21:28:08.878313
55 elements remaining in queue, query complete in 0.73 seconds
Good night
Good morning
Starting Gen 3
Querying database for elements remaining in queue
Before Uneval Count Query | 2020-08-22 21:28:18.889206
After Uneval Count Query | 2020-08-22 21:28:19.057500
22 elements remaining in queue, query complete in 0.17 seconds
Updating population
Passed parents update
Before Recent Evaluated Query | 2020-08-22 21:28:19.057642
After Recent Evaluated Query | 2020-08-22 21:28:19.130512
TimeStamp | 2020-08-22 21:28:19.131118
Received: NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 91)
	With Hash 4376795a5a254724d947d0454392ea19d1725e1f1e22cd6f095d2430e2542cea
	With Fitnesses: (0.04490820649615568, 800001.0)
	With Age: 1.0
TimeStamp | 2020-08-22 21:28:19.131308
Received: myICA(ArcTangent(NumpyDivide(Cv2DCT(WindowPlanckTaper(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), SetToZeroIf>Data&Factor(LocalPoolingMedian(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, trueBool), WindowHann(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, falseBool), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_1), myFloatIntSub(2.351969454101937, 7)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passInt(myIntMult(myFloatToInt(passFloat(100.0)), myNot(notEqual(100.0, -3.5016043164886845)))), lessThanOrEqual(passFloat(myFloatDiv(myFloatIntDiv(3.7842163720029873, 6), myFloatIntSub(1.0, 55))), myFloatSub(myFloatIntSub(myFloatIntSub(1.0, 0), myOr(falseBool, trueBool)), myFloatIntDiv(passFloat(2.04794626486878), myFloatToInt(10.0)))))
	With Hash d67559cf72920bf8cfe473f4c793e3b0ec00f34bf539cdc8768f60bb5b73d8b4
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.131683
Received: NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(93, ARG0, randomUniformWeights, InputLayer(ARG0))), 100)
	With Hash 138bce9aac71129d4f785d54f4a3a7d161a607c23018300e6deba679adc2d2dd
	With Fitnesses: (0.04506511846853911, 744001.0)
	With Age: 1.0
TimeStamp | 2020-08-22 21:28:19.131789
Received: SVCMulti(ARG0)
	With Hash 648a3973d6585986482d65feb0fc12ed54a29df856626f34ead937092fdcf663
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.131860
Received: NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(95, ContourMaskMinArea(ARG0, passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatDiv(0.4694841172690589, 0.01)), randomUniformWeights, InputLayer(ARG0))), 100)
	With Hash 08b988b2de87e32637580ce23d67c39d511e74e623cedc2ae759670be81d34bc
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.131996
Received: CountVectorizer(RandomUniform(ImageAlignmentECC(AffinityPropagationClustering(ARG0, 100.0), MinimumFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 9621, -1.7933403997316133), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_0), myNot(trueBool), myFloatSub(1.0, 0.01), myIntSub(4, 150), myOr(trueBool, trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myIntDiv(myOr(trueBool, trueBool), greaterThan(1.0, 10.0)), lessThan(myFloatMult(0.1, 1.0), myFloatIntAdd(0.1, 50))), equal(myFloatDiv(myFloatMult(0.01, 1.0), myFloatAdd(0.01, 1.0)), myFloatAdd(myFloatIntSub(-4.421834917894127, 0), myFloatIntMult(1.0, 50))), lessThanOrEqual(myFloatIntSub(myFloatIntDiv(0.1, 64), greaterThan(1.0, 1.0)), myIntToFloat(equal(0.01, -1.684003098345955))), myIntDiv(passInt(myOr(trueBool, trueBool)), myIntSub(passInt(-1), myAnd(trueBool, falseBool))), notEqual(myFloatMult(myIntToFloat(trueBool), passFloat(0.1)), myFloatAdd(myFloatDiv(0.01, -0.7179046457343237), myFloatIntDiv(0.01, 64))))
	With Hash 09d508a4c18afe75f9c4d33d5f4e89d1b67e6ad297f574102c5deebce6ddfa40
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.132349
Received: NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 87)
	With Hash 09f7001d0182038df0b2bb745ad3ce0df702f38a7aa2d3fbd4edfdf03e2d5c5a
	With Fitnesses: (0.04619488466970034, 800001.0)
	With Age: 1.0
TimeStamp | 2020-08-22 21:28:19.132446
Received: NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 150)
	With Hash 0a8c809e9e83100b9ebe4d8a063ddbd63e33dbd3a3e92d963e166433a191ff85
	With Fitnesses: (0.044876824101678925, 800001.0)
	With Age: 1.0
TimeStamp | 2020-08-22 21:28:19.132539
Received: ThresholdBinaryInverse(ifThenElseDataPair(falseBool, ARG0, ARG0), passTriState(TriState.STREAM_TO_FEATURES), Axis.FULL, myFloatIntAdd(100.0, 4))
	With Hash 0cab0e80ee52cb6997ea70cc177dd61a66402644593b2d09e1202eadd6822ba3
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.132637
Received: StdDeviationHole(MyCumSum(RegionalMaxima(ThresholdBinaryInverseMask(ContourMaskMinExtent(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 64), TriState.FEATURES_TO_FEATURES, passAxis(Axis.AXIS_0), myFloatIntMult(-3.748829619063331, 1)), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), 3.9954131790236964), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), Axis.AXIS_2, passBool(trueBool)), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(Axis.AXIS_0), greaterThanEqual(ifThenElseFloat(greaterThan(myFloatIntDiv(1.0877889728248924, 1), 1.0), myIntToFloat(myIntDiv(5, 100)), myFloatIntMult(passFloat(0.01), myNot(trueBool))), myFloatIntSub(-3.847775854981872, passBool(lessThanOrEqual(0.08960161656990628, 100.0)))), myAnd(lessThanOrEqual(myFloatIntSub(myFloatDiv(0.1, 0.01), 255), 100.0), lessThanOrEqual(myFloatMult(myFloatSub(0.1, 0.1), myFloatDiv(10.0, 10.0)), myFloatMult(myFloatDiv(100.0, 0.1), ifThenElseFloat(trueBool, 0.01, 100.0)))))
	With Hash 0e29d70865974c0291e5ff08f137bd0e8812b0c0000425e7ca8e8565138b2bb1
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.132935
Received: LocalPoolingMean(ContourMaskRangeExtent(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 10, 7), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), falseBool)
	With Hash 11eebd29d86815397e4735cce9d0d67243feb46a96c0994b9324bcbc52aebe3f
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.133051
Received: MatchedFiltering(mySelFdr(mySelFwe(ARG0, TriState.STREAM_TO_FEATURES, 1, 10.0), passTriState(TriState.FEATURES_TO_FEATURES), lessThanOrEqual(10.0, -2.7563858572238544), myFloatDiv(0.01, -2.136480350665868)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myIntSub(equal(10.0, 100.0), notEqual(10.0, 0.01)))
	With Hash 14fa01afd86cc4d786116168afb436bf036335199e49365b34e2f1c513b1b79c
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.133196
Received: WindowPlanckTaper(EmadeDataMultiplyPair(Tangent(Cv2Pow(DogDetection(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 1.0, 10.0, 0.01, 0.01, 10.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myIntSub(64, 2)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), Axis.FULL), TfidfVectorizer(ContourMaskMaxExtentEnclosingCircle(HighpassSobelDerivative(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 2, 150, 0, 64, 100), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatMult(0.38169670497076513, 100.0)), passBool(greaterThan(100.0, -3.6156775163290353)), notEqual(passFloat(0.1), myFloatSub(0.1, 1.0)), lessThan(myIntToFloat(50), ifThenElseFloat(trueBool, 100.0, 2.1130843797060486)), equal(myFloatAdd(0.1, 1.0), passFloat(0.1))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), TriState.STREAM_TO_FEATURES, passAxis(passAxis(passAxis(Axis.FULL))), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myFloatIntAdd(myFloatIntMult(myFloatAdd(1.0, myIntToFloat(7662)), greaterThan(ifThenElseFloat(trueBool, 0.1, 1.0), myFloatAdd(0.1, 100.0))), notEqual(myFloatIntDiv(myFloatIntDiv(0.1, 10), myIntDiv(255, 9)), myFloatSub(myFloatIntDiv(1.3155389106398196, trueBool), myFloatIntDiv(1.0, 9)))))
	With Hash 157b48c3524586397a135a969d57e7ec79b3fd2d546e3b0a24dd3129cfb7b240
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.133597
Received: Sentiment(EmadeDataDivideInt(MorphBlackhatRect(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 50, 6), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myIntSub(-13, 50)), myOr(myAnd(falseBool, trueBool), greaterThan(10.0, 1.0)))
	With Hash 1730f8ae675445d9a6b2564def3140665a4092be5fc3f25000db279748a56507
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.133730
Received: ThresholdToZeroPixelFloat(ARG0, ARG0, passTriState(passTriState(TriState.STREAM_TO_FEATURES)), TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, Axis.FULL)
	With Hash 1c6d7d541a183452f2e83a75cd20ac68600b4b5e3dc1f8199ce410cb1e0ee3a6
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.133821
Received: LowpassFilterGaussian(HighpassFourierGaussian(ObjectDetection(LowpassFilterEllipsoid(FractionDouble(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_1, 150), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), greaterThanEqual(0.01, 1.1431636772955667)), equal(myFloatDiv(100.0, 100.0), myFloatSub(0.1, 2.861585867378899)), myFloatIntSub(myFloatDiv(100.0, 0.01), greaterThanEqual(10.0, 10.0)), passFloat(myFloatIntSub(1.0, 150))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(Axis.AXIS_2)), ifThenElseBool(notEqual(myFloatIntMult(0.1, 2), passFloat(0.01)), lessThan(myFloatSub(0.01, 0.01), myIntToFloat(128)), greaterThanEqual(myFloatSub(-4.607665311816691, 10.0), passFloat(100.0)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), myAnd(notEqual(myFloatMult(myFloatIntDiv(1.0, 50), myFloatIntDiv(100.0, 150)), 0.12068462746823183), myNot(lessThanOrEqual(ifThenElseFloat(falseBool, 10.0, 1.0), 10.0))), equal(myFloatIntAdd(2.395309711455159, myIntDiv(myIntAdd(55, 4), myOr(trueBool, trueBool))), passFloat(myFloatDiv(myFloatAdd(0.1, 0.1), myFloatDiv(10.0, 0.1)))), myFloatMult(myFloatIntAdd(myFloatDiv(myFloatAdd(0.1, 3.599236787526239), myFloatIntAdd(100.0, 150)), myNot(ifThenElseBool(falseBool, trueBool, trueBool))), 0.9726263569726115), myFloatSub(ifThenElseFloat(ifThenElseBool(equal(0.01, 1.0), greaterThanEqual(0.1, 10.0), greaterThan(100.0, 0.01)), myFloatIntSub(passFloat(100.0), myNot(falseBool)), 0.01), myFloatIntAdd(myFloatIntDiv(passFloat(0.01), myIntDiv(150, 255)), myIntMult(lessThan(100.0, 1.0), myIntDiv(1, 55)))))
	With Hash 1d35e3b50074a5c00d1ba40962f5f6dc520e28e8bde00c42b9b72be037a9b549
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.134305
Received: Cv2AbsDiff(Daisy(LowpassFourierShift(ConvolveChannelMerge(ARG0, 3), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myIntAdd(1436, 7)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), passBool(greaterThan(0.1, 0.1)), myIntSub(myOr(trueBool, falseBool), myOr(falseBool, falseBool)), lessThanOrEqual(ifThenElseFloat(trueBool, 10.0, 1.0), myIntToFloat(64)), myOr(lessThanOrEqual(100.0, 0.01), notEqual(1.0, 0.01)), notEqual(myFloatDiv(0.1, 0.01), ifThenElseFloat(trueBool, 1.0, 100.0))), Cv2iDFT(MorphGradientRect(SobelFilter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), greaterThanEqual(2.2414107956226648, 0.1), greaterThanEqual(10.0, -1.6419461213306894)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), passAxis(passAxis(passAxis(Axis.AXIS_1))))
	With Hash 1e10381ce50ed1fd9baf600530de9eafb89a7d76a453eadf5dfc5f9189868693
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.134603
Received: LocalPoolingMean(MaximumFilter(Cv2LessThanOrEqual(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), equal(100.0, 1.0), myFloatIntAdd(0.1, 64)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), lessThan(ifThenElseFloat(trueBool, 10.0, 0.1), myFloatIntMult(100.0, 255)))
	With Hash 24f854a3cdb92430fe7cb9962d36fb5ce0e3d6052b5423c0ae8aacd9752496a9
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.134754
Received: MorphDilateRect(ARG0, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myIntMult(6536, 2), ifThenElseBool(trueBool, trueBool, trueBool), myIntAdd(6, falseBool))
	With Hash 25f3216476f82543b84e835cc5e1e393c24a136b4ff0905e83f79e36cdf0a575
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.134854
Received: SVCMulti(AbsDiff(ContourMaskMinEquDiameter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 42), MySnapshot(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_2, trueBool), TriState.STREAM_TO_STREAM, passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_1)))
	With Hash 25fb2656209724bd6acbd673f75c532c8d2eda41dc77f7854197905eeefa4c6a
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.135009
Received: MultiplySpectrum(HighpassSobelDerivative(RandomShuffle(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myIntAdd(128, 150), 9, myAnd(falseBool, trueBool), myAnd(falseBool, trueBool), 55), ToUint8Scale(ThresholdBinary(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 0.01, 8), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1)), passTriState(TriState.STREAM_TO_FEATURES), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.AXIS_0)))
	With Hash 260d2c796be602e1557055794f62d0726d69346fcf1dbd61afd854653f50c5d8
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.135230
Received: Cv2DFTReal(Cv2iDCT(Tangent(MultiplySpectrum(Cv2Divide(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_1), ARG0, passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(Axis.FULL))))
	With Hash 2762fe28f9f5e791a4eb4f5d8961292b891037ea522fa7295532f1620a9e1274
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.135412
Received: MinimumFilter(ARG0, passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(Axis.AXIS_2), myIntSub(myAnd(myNot(trueBool), myOr(trueBool, trueBool)), myFloatToInt(myFloatIntMult(1.0, 10))), myFloatIntAdd(myFloatAdd(myFloatIntDiv(4.282246433732688, 32), ifThenElseFloat(falseBool, 0.1, 0.01)), myIntAdd(notEqual(-0.8743802203502646, 100.0), 128)))
	With Hash 2d40177c003c1d494344ef99f146b151fa61e51d224f7ad26a9412b32f861330
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.135562
Received: MorphBlackhatEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 10, falseBool)
	With Hash 2daeed02e8d3526cc9529056c7a8ff5900e43981ccadacc5025f0b8ddf7ee00e
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.135638
Received: FractionTriple(EqualizeDisk(SkiMedianFilter(Correlation(adf_1(ARG0), MyDWT(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 64), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), myIntDiv(passBool(trueBool), myIntMult(8, -3))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), notEqual(myFloatIntDiv(myFloatIntAdd(1.0, 255), greaterThan(0.1, 3.526481380461826)), myFloatMult(myFloatSub(10.0, 0.01), myFloatIntAdd(1.0, 100)))), EqualizeHist(MinimumFilter(mySpectralEmbedding(RXAnomalyDetector(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 0.3499789971259881), passTriState(TriState.STREAM_TO_FEATURES), greaterThan(1.0, 100.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myIntAdd(passInt(39), passInt(4)), myFloatIntDiv(myFloatIntMult(-0.11308845024453529, 32), myIntSub(5, 100))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL)))), GaussianPeakEM(ThresholdBinaryInverse(myICA(MorphGradientCross(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, -8, 50), passTriState(TriState.STREAM_TO_STREAM), myNot(falseBool), equal(0.1, -1.4327985470199565)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), ifThenElseFloat(myAnd(trueBool, falseBool), myFloatIntSub(1.0, 2), myFloatIntDiv(10.0, 50))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_0)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myAnd(ifThenElseBool(myOr(notEqual(0.1, -2.8222104328678252), greaterThan(0.1, 0.1)), myOr(equal(0.1, -3.1907020416019174), notEqual(10.0, 1.705837006246771)), myOr(ifThenElseBool(trueBool, falseBool, falseBool), passBool(trueBool))), equal(myFloatIntDiv(myFloatDiv(10.0, 0.01), myIntSub(5, 1145)), myFloatAdd(myFloatIntAdd(1.0, 10), myFloatDiv(1.0, 100.0)))))
adf_1: MorphTophatRect(ScalarMultiply(HashingVectorizer(ARG0, falseBool, 6, 97, 2083), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), myFloatIntSub(10.0, 50)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), ifThenElseBool(passBool(falseBool), greaterThan(10.0, -1.0265478275999316), myNot(falseBool)), greaterThan(myFloatMult(0.01, 0.1), myFloatIntSub(3.7013435250424447, 55)))
	With Hash 30a0a90421453cd3c508105ed4847fe82f585d4292d4bd1fd5a16d7446d7eb9c
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.136517
Received: myICA(Cv2GreaterThanOrEqual(MySum(ContourMaskRangeExtent(ARG0, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), greaterThan(10.0, 100.0), myOr(trueBool, falseBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0))), ContourMaskMinEnclosingCircle(ScalarMax(Fraction(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), myNot(trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myIntToFloat(ifThenElseBool(falseBool, falseBool, falseBool))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), Axis.AXIS_1), TriState.STREAM_TO_STREAM, greaterThanEqual(passFloat(myFloatIntDiv(0.01, lessThan(0.1, 1.0892904204063267))), myFloatIntDiv(myFloatMult(passFloat(0.1), ifThenElseFloat(trueBool, -3.7044563185788038, 2.2436539361785792)), passBool(notEqual(0.01, 100.0)))), trueBool)
	With Hash 32f5a26f0dd5a8ab1947f2dd37c36effff446ba70e440da4d7ebe94a1c0c793a
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.136803
Received: ContourMaskMinExtent(EmadeDataNumpyMultiplyFloat(ThresholdToZeroFloat(EmadeDataNumpyMultiplyFloat(LowpassFilterUniform(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 100), TriState.FEATURES_TO_FEATURES, passAxis(Axis.FULL), myFloatDiv(1.0, 1.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), myFloatMult(myFloatAdd(-1.290955640033229, 10.0), 0.1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatDiv(10.0, myFloatSub(myFloatDiv(0.01, 0.01), passFloat(1.0)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), falseBool)
	With Hash 3d8689a83385978485edeb3b8b1ffb6ef8755289e22d9541647a6a855a04bfe4
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.137022
Received: TfidfVectorizer(ContourMaskMaxExtentEnclosingCircle(EmadeDataDivideInt(MyCumProd(WindowBartlettHann(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passBool(falseBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myIntSub(ifThenElseBool(trueBool, trueBool, trueBool), myFloatToInt(-1.156625349300752))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_0))), ifThenElseFloat(lessThanOrEqual(myIntToFloat(55), myFloatIntDiv(0.01, 8236)), myFloatIntSub(myFloatIntSub(0.1, 9), myFloatToInt(0.1)), myFloatMult(myFloatIntAdd(0.1, 4840), myFloatIntMult(0.01, 0)))), myAnd(myAnd(myAnd(notEqual(100.0, -2.0908387547565654), myAnd(falseBool, falseBool)), passBool(greaterThanEqual(100.0, 10.0))), passBool(greaterThanEqual(passFloat(100.0), myFloatIntAdd(4.206921233493558, trueBool)))), passBool(myNot(lessThanOrEqual(myFloatIntMult(100.0, 7), passFloat(10.0)))), myIntAdd(ifThenElseBool(lessThanOrEqual(myFloatIntSub(0.08504293347279912, 3), myFloatIntMult(100.0, 3)), greaterThan(myFloatDiv(10.0, 100.0), myFloatSub(10.0, 10.0)), myAnd(myAnd(trueBool, trueBool), passBool(falseBool))), lessThanOrEqual(myIntToFloat(greaterThanEqual(-1.4806748594311534, 3.399488015272997)), myFloatDiv(myFloatIntDiv(100.0, 10), myFloatSub(0.01, 100.0)))), myFloatToInt(myFloatIntDiv(myFloatMult(myFloatAdd(0.01, 1.0), myFloatIntMult(0.1, 7)), lessThanOrEqual(passFloat(100.0), myIntToFloat(9)))))
	With Hash 3ea9793f963ec41056431f783ccbe01ef8889d06d19fedf21e4aa1d4e16b8a93
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.137421
Received: ScalarMax(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 7077)
	With Hash 43c4cb437dc90348329ab4426df965d54b9ee81dce78b9c948f2a0f5d771516b
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.137498
Received: MorphCloseEllipse(ARG0, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myAnd(myAnd(trueBool, equal(0.01, 0.01)), passBool(lessThanOrEqual(10.0, 1.0))), myNot(passBool(myOr(trueBool, falseBool))))
	With Hash 4540af8ba57f988b9a142d86805b80a131d5dcbe6c092e8e9b2b63383b2c52c6
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.137614
Received: NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 97)
	With Hash 4817ac538892158c94002325eb5b277515b450ab0fb3f68cc7420e094dffb4d9
	With Fitnesses: (0.04591244311941001, 800001.0)
	With Age: 1.0
TimeStamp | 2020-08-22 21:28:19.137701
Received: NumpyDivide(SVCMulti(Cv2LessThanOrEqual(ARG0, ContourMaskRangeExtent(ToFloat(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), myIntAdd(12, 6), myIntSub(8, 2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), TriState.STREAM_TO_STREAM, Axis.FULL, passAxis(passAxis(Axis.FULL)))), adf_2(ThresholdBinaryInverse(Cv2RMS(ARG0, TriState.STREAM_TO_FEATURES, passAxis(Axis.FULL), myOr(trueBool, falseBool)), passTriState(TriState.STREAM_TO_FEATURES), passAxis(passAxis(Axis.AXIS_2)), myFloatIntAdd(ifThenElseFloat(trueBool, 10.0, 0.1), equal(1.0, 100.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.AXIS_2)))
adf_2: MorphOpenRect(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 5, 50)
	With Hash 48702509451e04ef6e9a6e3fa892f654951bcc1b3f3943c0e5676af3cdff8738
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.138055
Received: MorphTophatEllipse(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 7, 2)
	With Hash 49dc5c0b12305263a29853372fcd9c74536bfde79c7ef91be32d72238b59b0e5
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.138134
Received: LogDetection(Cv2Pow(MeanFilter(ContourMaskMaxExtentEnclosingCircle(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatToInt(0.1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThan(myFloatDiv(-3.4316643674859906, 100.0), myFloatMult(-3.9664146998609673, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2))), passFloat(myFloatIntAdd(myFloatMult(10.0, 0.01), myFloatToInt(0.01))), ifThenElseFloat(notEqual(myFloatMult(0.1, 0.01), myFloatIntDiv(0.1, 4)), passFloat(myIntToFloat(99)), myFloatIntDiv(ifThenElseFloat(falseBool, 10.0, 0.01), equal(10.0, 0.1))), lessThan(ifThenElseFloat(notEqual(100.0, 0.01), myFloatIntDiv(0.01, 32), myFloatIntDiv(10.0, 64)), myFloatIntDiv(ifThenElseFloat(falseBool, 0.01, -3.1611027872158415), lessThan(0.01, 0.01))), myFloatMult(myFloatMult(myFloatDiv(10.0, 1.0), myFloatIntMult(0.1, 83)), myFloatAdd(myFloatDiv(-0.19263036148403323, -1.3909339498826565), myFloatIntSub(0.01, 10))), myFloatMult(myIntToFloat(myIntSub(4, 1)), myFloatDiv(myFloatIntSub(-4.661708200468498, 0), myIntToFloat(64))))
	With Hash 4a4bac4c71f4de2c09b10aa6090697a9bb5d5fa46c2d051de7cedff19aeeb83b
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.138473
Received: EmadeDataNumpyMultiplyFloat(MyCumSum(MyCumSum(CenterOfMass(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), lessThanOrEqual(0.01, 0.01)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), greaterThanEqual(myFloatDiv(-1.7849765477596624, 0.01), 0.1)), passTriState(TriState.STREAM_TO_STREAM), passAxis(passAxis(Axis.FULL)), myFloatSub(ifThenElseFloat(myOr(falseBool, trueBool), myFloatIntMult(1.0, 9), 1.0), passFloat(myFloatIntDiv(1.0, 5))))
	With Hash 4c9ff5c3acb34bd10a7b769bf518f5f626ed0f4e30d69e03fb9c12a7caaac24b
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.138666
Received: Learner(RandomShuffle(MinimumFilter(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 255, 10.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0)), ModifyLearnerList(ModifyLearnerFloat(LearnerType('KNN', {'K': 3, 'weights': 0}), 0.1, 3), passList(EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), greaterThanEqual(10.0, 0.1)), ModifyEnsembleInt(ModifyEnsembleFloat(EnsembleType('BAGGED', None), 100.0, 10), lessThan(100.0, 1.0), passInt(50)))
	With Hash 4dcee85ffccc6700278b009a32d6079246a79ebf419b3c63034a2aa015937700
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.138841
Received: ConvertToCounts(Cv2LessThanOrEqual(ARG0, AffinityPropagationClustering(MorphErosionCross(RXAnomalyDetector(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 10.0), passTriState(TriState.STREAM_TO_FEATURES), Axis.FULL, greaterThanEqual(0.7901885624626983, 10.0), myIntMult(64, 5), myIntAdd(8, 64)), myFloatMult(passFloat(0.01), passFloat(10.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), TriState.FEATURES_TO_FEATURES, passAxis(passAxis(passAxis(Axis.FULL))), Axis.FULL), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))))
	With Hash 50533eef335dc133faf0848dcf1edcdae46abb0ace18f148cb3dceca008070ee
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.139043
Received: ThresholdBinaryInverseMask(SpectralClustering(FFT(RXAnomalyDetector(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 0.01), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2)), passBool(myAnd(trueBool, trueBool)), myFloatIntSub(myFloatIntDiv(0.1, 50), myOr(falseBool, trueBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatIntDiv(myFloatIntSub(myFloatIntAdd(-3.787034217551224, 7), greaterThanEqual(10.0, 2.112472458245877)), myIntMult(myAnd(trueBool, falseBool), passInt(100))))
	With Hash 56e553a8126f53ce3278104437ad7def6773a5edaf37764fc473cf254e2b53da
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.139226
Received: MinimumFilter(ARG0, passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), lessThanOrEqual(ifThenElseFloat(passBool(falseBool), myFloatDiv(myFloatAdd(-1.9375893314771728, 10.0), myFloatDiv(100.0, 0.1)), myFloatMult(myFloatIntMult(0.01, trueBool), myFloatIntDiv(0.01, 0))), myFloatIntMult(myFloatSub(ifThenElseFloat(falseBool, 100.0, 100.0), myFloatIntAdd(1.0, 93)), 64)), myFloatMult(myFloatIntMult(0.01, myIntAdd(1, greaterThan(10.0, 1.0))), passFloat(myFloatIntSub(myFloatIntSub(10.0, 100), greaterThanEqual(10.0, 100.0)))))
	With Hash 57318e52015f9d8c1d11dc012760b00835b9a8761c1ec86871c1ba78dbf73a43
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.139427
Received: HighpassSobelDerivative(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 4, 150, falseBool, 3, 50)
	With Hash 5857740e39254a0f989349c988dfc0c3eb32cbccf56d97688d60e7c168fe4b9f
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.139511
Received: AccumulateWeighted(ContourMaskMinEnclosingCircle(GradientMagnitude(MorphOpenRect(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 128, 100), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), greaterThanEqual(0.872584709438831, 3.749519139327651)), passTriState(TriState.STREAM_TO_STREAM), passAxis(passAxis(Axis.AXIS_2)), ifThenElseFloat(lessThanOrEqual(1.0, 0.1), myFloatAdd(10.0, 10.0), 100.0)), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), Axis.FULL, 0.01)
	With Hash 5921453676d3ee2765d6a727ca78d518e5cc5884e8a542609a2daac9ef738a47
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.139669
Received: Cv2AbsDiff(MyBinaryThreshold(Cv2Max(MedianFilterHole(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 7, 32), EqualizeHist(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), ifThenElseFloat(ifThenElseBool(trueBool, falseBool, trueBool), ifThenElseFloat(falseBool, 10.0, 100.0), myFloatMult(10.0, 10.0))), Cv2AddWeighted(StdDeviationHole(HighpassUnsharpMask(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 55, 255, 150), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), equal(0.1, 1.0), lessThanOrEqual(100.0, 1.0)), mySubSampleData(EmadeDataMultiplyInt(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 50), passBool(falseBool), myIntDiv(32, 55)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passAxis(passAxis(Axis.AXIS_1)), myIntAdd(myIntDiv(50, 55), greaterThanEqual(100.0, 1.0)), myIntSub(lessThanOrEqual(0.1, 10.0), lessThanOrEqual(0.1, 100.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), passAxis(passAxis(passAxis(Axis.AXIS_0))))
	With Hash 5a578f0e47d0354d4b5d0f6520cad26ceec73c7f7bdee53596d95d551b757615
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.140030
Received: ContourMaskMaxEquDiameter(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 3)
	With Hash 5b1a2720495ca33df2c0da75f42fa50cc94be5938ba63a844d557fde6f0c91b9
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.140104
Received: ContourMaskMinLength(ContourMaskMaxExtent(ContourMaskMinArea(MorphOpenEllipse(ToFloat(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), lessThan(-0.6762484572072216, 100.0), myIntDiv(6, 32)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myIntToFloat(myFloatToInt(0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myIntSub(myNot(myOr(trueBool, falseBool)), lessThanOrEqual(myIntToFloat(10), myFloatSub(2.6315011508059785, 100.0)))), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(passAxis(Axis.AXIS_2)), myFloatIntSub(myFloatMult(ifThenElseFloat(lessThan(10.0, 1.0), myFloatIntMult(10.0, 150), ifThenElseFloat(trueBool, 100.0, -0.5743336376105344)), myFloatAdd(myFloatIntDiv(100.0, 50), myIntToFloat(150))), 8100))
	With Hash 5c25c06e4d973016e86e5d24c470499a77c18fadc8002bda63a61adf6f2f9dac
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.140352
Received: SpectralClustering(mySelFdr(BitwiseNOT(CCorrObjectFilter(StdDeviationHole(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 150, 8), Cv2Divide(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.FULL), myIntDiv(falseBool, 128), myFloatMult(2.712278516880108, 0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), lessThanOrEqual(myFloatAdd(myFloatSub(0.01, 1.0), myFloatMult(0.01, 0.1)), myFloatSub(0.1, myFloatIntAdd(100.0, 32))), myIntToFloat(myOr(greaterThan(1.0, 100.0), lessThanOrEqual(100.0, -3.579735167629683)))), notEqual(myIntToFloat(equal(0.1, myFloatMult(100.0, 0.01))), passFloat(myFloatIntAdd(myFloatIntSub(0.01, 2), ifThenElseBool(falseBool, falseBool, trueBool)))), myFloatMult(myFloatIntDiv(ifThenElseFloat(equal(100.0, 10.0), myFloatIntMult(2.476430078273766, 2), myFloatAdd(100.0, 0.01)), 0), myFloatIntDiv(myFloatIntDiv(myFloatIntAdd(100.0, 128), myNot(trueBool)), lessThanOrEqual(myFloatMult(0.1, 0.01), myFloatIntMult(10.0, 150)))))
	With Hash 5c6174f58869380843da611afdd92fa4cc4c948164c4475558d056e63af5d633
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.140661
Received: KalmanFilter(WindowCosine(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), passFloat(0.01), myFloatDiv(10.0, 0.01))
	With Hash 5dbd77f4de7424ebd7cd0d11b0b5ac83bcf2080feeeeb0d6be9384cb89c96f76
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.140779
Received: Cv2Multiply(MultiplyTransposed(MorphErosionEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 3, 5, 32), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myNot(falseBool)), Select1D(NumNamedEntities(ARG0), passTriState(TriState.STREAM_TO_FEATURES), Axis.AXIS_0, myOr(falseBool, falseBool), lessThanOrEqual(0.1, -2.433276027963754)), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_2)))
	With Hash 5f0df6984180c7b6ba2747c6f0f9640ea82f2fa39fef5b4a6491dc5154c05df0
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.140955
Received: CenterOfMass(Cv2GreaterThanOrEqual(DogDetection(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 1.0, 1.0, 100.0, 0.1, 0.01), WindowBartlettHann(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)))
	With Hash 5fe0c2026f0f9b562c9f7c22fb860b47ba834245f495fd7163f1c8a9d838b713
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.141101
Received: mySelKBest(ARG0, TriState.FEATURES_TO_FEATURES, trueBool, 4)
	With Hash 619b5e65208de20f4a89090d7b1f9cf06f685f47908b6d0d0037348887b3f589
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.141171
Received: Select1D(Cv2iDCT(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), passInt(64), ifThenElseBool(trueBool, falseBool, trueBool))
	With Hash 6273526c19ad285f1c318d8558d9f49994f297ae35887b5eba25bad69ae8bd18
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.141268
Received: ContoursMinLength(Cv2Max(MyInformedSearch(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.AXIS_2, 5, 100.0), WindowBlackmanHarris(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myIntSub(myFloatToInt(0.1), lessThan(0.1, 0.1)))
	With Hash 62b66f01e4bcd00291d916b0275d20df88f4d4a4171f0d4e2be2956ab633290c
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.141424
Received: Daisy(Cv2AbsDiff(Round(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), Prerejection(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 150, 3, 0.01), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThan(myFloatIntDiv(0.1, 95), myFloatIntMult(100.0, 1)), lessThanOrEqual(myFloatIntMult(-2.4033966752898586, 13), myFloatIntSub(0.1, 4)), myNot(myNot(falseBool)), myOr(ifThenElseBool(trueBool, falseBool, falseBool), greaterThan(0.1, 1.0)), 55)
	With Hash 6401ae109aea288996c58615406db71145f59b7f6e533a052d27f539ef99bdd1
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.141624
Received: MorphBlackhatEllipse(ARG0, passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), equal(1.0, 4.3123205224820325), myOr(trueBool, falseBool))
	With Hash 64297ed3900fa3bc93aa8f2dc671401a33ca171f1451953ee026a770926e74f0
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.141716
Received: EmadeDataSubtractPair(ContourMaskMinArea(RandomUniform(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 4, 3), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), myFloatIntSub(0.1, falseBool)), TfidfVectorizer(Cv2Max(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_1), myNot(trueBool), myIntDiv(5, 7), greaterThan(0.01, 0.1), myIntSub(8, 55)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(TriState.STREAM_TO_FEATURES), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_2)))
	With Hash 6517c11f7d4356a6d10d73931bc158ffca4650d860dff843a9f93a8bb3b94b63
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.141896
Received: NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(93, ARG0, randomUniformWeights, InputLayer(Cv2AddWeighted(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.FULL, 0, 92)))), 255)
	With Hash 65d3760ee50c783ffb73355b7f38834f9ea6f6abbcc8f3f8e68d2ba3277e403a
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.142015
Received: ConvertBW(SelectRange(ThresholdToZeroPixelFloat(TfidfVectorizer(Cv2Add(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, Axis.FULL), greaterThan(1.0, 100.0), myNot(trueBool), passInt(64), myIntSub(7, 2)), ThresholdToZeroPixelFloat(Stemmatizer(ARG0, falseBool, 8), LowpassFilterGaussian(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 255, 64, 0.1, 0.01), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), ifThenElseBool(greaterThan(myFloatIntSub(10.0, 7), myFloatIntSub(2.879830603263221, 128)), myOr(lessThan(10.0, 100.0), lessThan(1.0, 10.0)), lessThan(myFloatSub(0.1, 1.0), myFloatSub(0.01, 100.0))), lessThan(myFloatDiv(myFloatIntDiv(100.0, 9), myFloatIntAdd(0.01, 10)), myFloatAdd(myFloatSub(100.0, 1.0), myFloatSub(0.1, 1.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))))
	With Hash 66f11d21bd89282cbc8bc7497b85b6376cb757e6ccdd40e68c5abf79ea855546
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.142356
Received: Cv2Multiply(ARG0, ThresholdNLargest(LowpassFilterUniform(WindowGaussian(WindowFlatTop(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myFloatIntSub(10.0, 9)), passTriState(TriState.STREAM_TO_STREAM), Axis.FULL, myOr(myNot(trueBool), greaterThanEqual(3.9886090876778173, 0.1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myIntDiv(notEqual(10.0, myFloatDiv(-1.5751204061623092, 0.1428712150183431)), myIntDiv(passBool(falseBool), myIntSub(1, trueBool)))), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), passAxis(passAxis(Axis.AXIS_2)))
	With Hash 69353c16d0d1c72f6352d2e4ba7219d4d7967325d26899c01d85b6ea748583a4
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.142581
Received: MorphErosionEllipse(MorphDilateEllipse(Cv2Divide(MorphGradientEllipse(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 100, 128), StdDeviationHoleCustom(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.AXIS_0, trueBool, 4), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), 10, myOr(myNot(trueBool), trueBool), myIntSub(myIntAdd(9, 1), passBool(falseBool))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), lessThan(4.097480322861756, 100.0), myAnd(myOr(myAnd(trueBool, falseBool), equal(10.0, 0.1)), greaterThanEqual(100.0, 0.1)), myFloatToInt(10.0))
	With Hash 6f42fb9fff7e64650bc5395ba0814ce7acb003b373586f7cfa3677c2be587ca6
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.142832
Received: MyInformedSearch(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_1, 64, 100.0)
	With Hash 6f9e1aa10ac8529f2b6ff8722a9141cacac314d133ba7867a68334a21ca033d2
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.142922
Received: MaxLoc(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2)
	With Hash 6fac8260ab6d6f0c5bce61fb76d57981689a4e917ec5dffb3184676a4b9bc528
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.143003
Received: ContourMaskRangeSolidity(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 100.0, 0.01)
	With Hash 70b9d6f12d77f5b990a9179defcec3f675f29ad6b382b21b77a088bd8434b536
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.143081
Received: Cv2iDFT(Cv2Pow(RandomNormal(MaxLoc(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), greaterThan(10.0, 2.183066584028529), greaterThan(2.0114790284316477, 100.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), myFloatToInt(myFloatDiv(0.01, -4.876999431474868))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))))
	With Hash 715ed655824f01cd6a7fd48ea0ec1cd51063b25b935756935041e35dbae2d950
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.143239
Received: MyBinaryThreshold(DogDetection(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 2.668424135929646, 0.01, 1.0, 1.0, 1.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatIntMult(4.8187034061225305, 7))
	With Hash 72b7b5b45da54ac6d5f818e778c6f76744956a74e1a6a52502c3bf3dfadd0f33
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.143347
Received: ContourMaskRangeExtent(mySpectralEmbedding(ARG0, TriState.FEATURES_TO_FEATURES, 1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myNot(falseBool), myFloatToInt(0.1))
	With Hash 7418d49b681f846543a9193542337b6a457b543b828ba7cb575afb537a1794c1
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.143442
Received: GaussianFilter(EdgeDetectionCanny(LowpassFourierGaussian(HighpassFourierGaussian(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 8), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), greaterThan(-3.3287780050444384, 0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passBool(notEqual(1.0, 10.0)), ifThenElseBool(lessThanOrEqual(100.0, -1.91611843520604), lessThan(10.0, 100.0), lessThanOrEqual(1.0, 100.0)), equal(myFloatMult(10.0, 0.01), myFloatDiv(0.01, 10.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2))), passFloat(passFloat(myFloatDiv(1.0, 0.01))))
	With Hash 75b5c3492aa33b7291e0f5a5d83a044c0c976293034814694596b757f42ac892
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.143649
Received: BitwiseOr(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, Axis.FULL)
	With Hash 7ddd91b29573b0521cb8c90efc4baf4de0efa1e9c9c7e5c5287a165e150ef105
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.143727
Received: SubtractSaturate(ThresholdBinaryMax(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 35, 10.0), BackgroundSubtraction(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), TriState.STREAM_TO_FEATURES, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0))
	With Hash 7e41a901b17fa3f87cbd1f3f3b0de6c1ddecfc59bd68a808e43a905c0ce23add
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.143836
Received: MorphDilateCross(WindowCosine(TfidfVectorizer(ThresholdBinaryMax(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 2, 4.756369171538907), lessThan(4.615731731583043, 0.01), myAnd(trueBool, trueBool), 32, falseBool), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2))), TriState.STREAM_TO_FEATURES, passAxis(passAxis(passAxis(Axis.AXIS_2))), lessThanOrEqual(myIntToFloat(myAnd(trueBool, falseBool)), myFloatSub(myFloatMult(0.1, 100.0), myFloatAdd(0.01, 10.0))), myIntSub(64, myAnd(passBool(falseBool), greaterThanEqual(0.1, 100.0))), greaterThanEqual(myFloatDiv(myFloatIntAdd(1.0, 100), myFloatSub(1.0, -1.80813709854006)), 100.0))
	With Hash 80c4bc1ddc72905bc7cbfe2daf99d147a5a2da1d7c9040b43c1814fcdbe074a6
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.144056
Received: SetToZeroIf>Data&Factor(ContoursMaxLength(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 8), ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_0), myFloatIntSub(10.0, 4666))
	With Hash 834f9b73614b7716de2875c2e18af13a8cc813e50ea985a512762ec95f29d0d7
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.144164
Received: EqualizeHist(EqualizeHist(CornerDetectionEigen(StdDeviationHoleCustom(Cv2Subtract(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.FULL), SetToZeroIf>Data&Factor(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_0, -1.9967884891639098), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_2), lessThan(1.0, 1.0), equal(-3.2443671494734683, 100.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), greaterThan(myFloatIntDiv(0.1, 150), myFloatAdd(10.0, 1.0)), notEqual(myFloatDiv(1.0, 0.1), myFloatIntAdd(4.4060824977662385, 100)), myFloatIntAdd(myFloatSub(100.0, 10.0), greaterThanEqual(1.0, 10.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))))
	With Hash 86bf6aeb2fb77648c5b6767e2fc79b5d6c8a3714cd6cb8d4865ae97729cae0f1
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.144434
Received: FilterCentroids(ARG0)
	With Hash 89d4ca0a74ac9efd2e64554b52b9bba13edeb3c2fa9782007ff1d571cedf9d05
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.144497
Received: MyAutoCorr(mySelFpr(StandardNorm(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), 3, myFloatDiv(10.0, 0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)))
	With Hash 8be629fac424a7d59cacd8ed9e132a827d580c8b38362c2cb0941b264fe92ce6
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.144605
Received: HighpassFourierShift(ContourMaskMinArea(GradientMagnitude(HighpassSobelDerivative(MorphDilateRect(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, falseBool, falseBool, 128), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), greaterThan(0.1, 2.786419304314806), myNot(trueBool), lessThanOrEqual(0.1, 100.0), ifThenElseBool(falseBool, trueBool, falseBool), equal(-4.984486114261609, 2.744725551219613)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myOr(greaterThan(-0.5400219523893224, 0.01), myNot(trueBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatIntSub(myFloatIntAdd(passFloat(0.01), greaterThan(10.0, 0.01)), greaterThan(myFloatDiv(0.1, 0.01), myFloatMult(100.0, 10.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myIntSub(notEqual(myFloatIntMult(myFloatMult(0.1, 100.0), greaterThan(0.1, 1.0)), myFloatSub(ifThenElseFloat(trueBool, 0.01, 100.0), myFloatSub(0.6816162362787317, 0.1))), myIntMult(myAnd(lessThanOrEqual(1.0, 0.1), lessThanOrEqual(0.01, 2.071621441502006)), equal(myFloatIntMult(0.1, 50), myFloatMult(100.0, 0.1)))))
	With Hash 8ca8ddf0ffb6c25ce63fca2d87b6bd94fdb900c64243ad7cd0b216da40d2304d
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.144984
Received: WindowGaussian(mySelFwe(ContourMaskMinEquDiameter(Tangent(EdgeDetectionCanny(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 8, 37, 32), TriState.STREAM_TO_FEATURES, passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), equal(myFloatAdd(1.0, 100.0), myFloatSub(100.0, 100.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), myAnd(lessThanOrEqual(myFloatIntSub(0.1, 50), myFloatMult(100.0, 0.1)), notEqual(myFloatIntAdd(1.0, -2), 0.01)), passFloat(myFloatAdd(10.0, myFloatMult(100.0, 10.0)))), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), passFloat(passFloat(ifThenElseFloat(ifThenElseBool(falseBool, falseBool, trueBool), myFloatIntMult(100.0, 5), myFloatAdd(0.01, 1.0)))))
	With Hash 8e352ab66a2900de375845914d67558537738fb1a0f64e717de1b3bdd5f3d6cb
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.145222
Received: MyInformedSearch(ContourMaskMaxSolidity(SpectralClustering(ContourMaskMinLength(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 10.0), greaterThan(-4.409634329494464, 0.1), myIntToFloat(1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myFloatMult(myFloatIntDiv(0.1, 7993), myFloatAdd(-3.164378646300431, 0.01))), ContourMaskMinExtent(ContourMaskMinAspectRatio(MySnapshot(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.FULL, Axis.AXIS_2, 32), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), ifThenElseFloat(falseBool, 100.0, 1.8039063355072802)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), equal(myFloatMult(1.0, 1.0), myFloatMult(1.0, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), passAxis(passAxis(passAxis(Axis.FULL))), passInt(myIntMult(notEqual(0.1, 1.0), passInt(3))), myFloatIntSub(myFloatIntMult(ifThenElseFloat(trueBool, 1.0, 1.0), passBool(falseBool)), myAnd(lessThan(-0.7632607960436824, 0.01), equal(1.0, 1.0))))
	With Hash 8e3d5e25480a5cd145905d0802ee3ea2754910d9c7cce9fa781ad6246c7265d8
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.145518
Received: MorphCloseRect(Cv2Transpose(MorphOpenEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 0, 4), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThanOrEqual(passFloat(100.0), myFloatIntSub(10.0, 0)), myOr(ifThenElseBool(trueBool, trueBool, falseBool), passBool(trueBool)))
	With Hash 93869c0af6eaa84f18aab9dc66b6dc76f30c9301e55a9d24f5ba66d28ee96d07
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.145652
Received: Round(MatchedFiltering(RMS2D(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 6), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), myOr(falseBool, falseBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)))
	With Hash 9421945558e2c96b03ef81b4aa9837a61e02fe1847f7a3299cc787857dde467f
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.145758
Received: HighpassSobelDerivative(Prerejection(mySparsePCA(MedianFilterHole(AdjustConstrastGamma(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, -4.101416226567575, 1.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myIntAdd(3, 7), 55), passTriState(passTriState(TriState.STREAM_TO_STREAM)), greaterThan(myFloatIntAdd(1.0, 150), myFloatIntAdd(0.01, trueBool)), myFloatIntMult(myFloatAdd(0.01, 1.0), 255)), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), lessThan(myFloatAdd(myFloatMult(0.1, 0.1), passFloat(0.1)), ifThenElseFloat(passBool(falseBool), -3.9948408932836443, myFloatIntSub(0.1, -15))), myIntAdd(greaterThanEqual(100.0, myFloatIntAdd(0.01, 3)), passBool(lessThanOrEqual(10.0, 0.01))), ifThenElseFloat(falseBool, myFloatMult(myFloatIntAdd(1.114563607086816, 8), myFloatIntMult(100.0, trueBool)), myFloatIntDiv(myFloatAdd(10.0, 100.0), greaterThan(1.0, 0.1)))), TriState.STREAM_TO_FEATURES, passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), myIntDiv(ifThenElseBool(myAnd(trueBool, lessThanOrEqual(0.1, 0.01)), myOr(lessThan(2.2894660583643844, 0.01), ifThenElseBool(falseBool, falseBool, falseBool)), equal(0.01, myFloatIntSub(100.0, 1))), lessThan(myFloatIntMult(myIntToFloat(5), myFloatToInt(0.04691336717417016)), myFloatSub(myFloatIntAdd(100.0, 4), 1.0))), myIntAdd(myOr(greaterThan(myFloatMult(0.1, 1.0), myIntToFloat(falseBool)), greaterThan(myIntToFloat(100), myFloatIntSub(0.1, 0))), myIntDiv(myOr(ifThenElseBool(falseBool, falseBool, trueBool), passBool(falseBool)), 6)), myNot(myOr(lessThan(myFloatIntAdd(100.0, 6), myFloatIntAdd(10.0, 5)), equal(myIntToFloat(-8), myFloatIntDiv(1.0, 2)))), myIntDiv(myOr(greaterThanEqual(ifThenElseFloat(trueBool, 10.0, 0.1), myFloatSub(10.0, 4.016717203457642)), notEqual(myFloatSub(1.0, 0.1), myFloatAdd(1.0, 10.0))), lessThanOrEqual(myFloatAdd(myFloatAdd(0.1, 100.0), myFloatMult(0.01, 2.2918283838845745)), myIntToFloat(lessThan(100.0, 0.01)))), notEqual(myFloatIntMult(myFloatIntAdd(myFloatDiv(100.0, 0.43506167317339006), ifThenElseBool(trueBool, trueBool, trueBool)), ifThenElseBool(greaterThan(-2.0994014052525656, 100.0), greaterThan(0.1, 10.0), myNot(trueBool))), 100.0))
	With Hash 9a13a54a8ebd36d159cabaf952d9774c3312a451a4d2c91222998837d58d1f97
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.146306
Received: GetCentroids(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2)
	With Hash 9c4b5a5abc70e08f6dbbc3ff12bc7ed15174fcd674ac040a94e3c8055b4a34c7
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.146376
Received: Cv2Transpose(LowpassFilterUniform(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 5), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1))
	With Hash 9e76bcd2d3cc978d8fcc4c2e10cd7e36572f4d0ff2cb462aced9b69743ce2d34
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.146458
Received: MorphOpenCross(EqualizeDisk(EmadeDataIntegerDivide(HighpassUnsharpMask(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 2, 4, 32), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), ifThenElseFloat(falseBool, 0.01, 10.0)), TriState.STREAM_TO_STREAM, passAxis(passAxis(Axis.AXIS_2)), -3), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL))), myOr(myNot(trueBool), lessThan(myFloatSub(10.0, 1.0), passFloat(10.0))), passBool(greaterThan(myFloatMult(1.0, 1.2137787611428665), myFloatIntSub(3.854469707383876, 9))))
	With Hash 9faa374c1e30ae39d034cc5f8a762d0925104f841dbbef54a0284f21e8b6882c
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.146637
Received: MorphCloseCross(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 1, 64)
	With Hash a0bad825da2d0af2ccf34f17fe7a6dd88be9e01348e9706ee567f45f2b94a097
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.146709
Received: ThresholdBinary(NormalLikelihood(ARG0, trueBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatIntDiv(10.0, 55), notEqual(1.0, 10.0))
	With Hash a10cb58928d5ae2e98a73f5c1b434be59f3bae4857be30cbdeac63719b8ce890
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.146798
Received: TfidfVectorizer(ARG0, trueBool, trueBool, 64, 50)
	With Hash a72977269255c1b06499dfcb1e9381f4125369e2f539c2d49ff6bd504d9d177c
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.146863
Received: Cv2LessThan(PeakFinder(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 1.0, 32), ContourMaskMaxExtent(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 55), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.FULL))
	With Hash a7bacb4dea929b78e4960cece0c7e79406eb037bebfc603a955b4c1ef46262d3
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.146995
Received: SEPObjectDetection(Select3D(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 9982, 7, 32, 8, 9, 8), 1, -1.2843788976633053, myFloatDiv(2.5396375880965714, 100.0))
	With Hash a9b7273c9763acec0db92f71265b080eb88fd5fa4723e993be81ffc4b334c161
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.147097
Received: LowpassFilterMedian(CCorrObjectFilter(ARG0, ARG0, 4, 1.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), equal(-0.10305461821649331, 0.01))
	With Hash aafed40357129413acff7d38048e55abca8b84fbec1492a6c9a83b38f04a6a00
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.147188
Received: Cv2LessThanOrEqual(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_0)
	With Hash acb3f498112711ed92e8770d330767be2ad7f314ad92d8150d160ba97e31958f
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.147260
Received: SpectralClustering(StandardNorm(ARG0, TriState.STREAM_TO_STREAM, passAxis(passAxis(passAxis(Axis.AXIS_0)))), lessThan(myFloatIntAdd(myFloatIntDiv(myFloatSub(0.1, 0.1), passInt(10)), notEqual(-4.863904585918977, 0.01)), myFloatSub(0.01, myIntToFloat(lessThanOrEqual(10.0, 100.0)))), 0.1)
	With Hash adb54d5872d1d573bc6c4243a26ae912557ae2775c6eacfa33b161b258706fd8
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.147381
Received: NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 89)
	With Hash ae038017ee6c94a0d040149db202975db011cc98d0a596d97d9dc0127d6245f8
	With Fitnesses: (0.045881060724933365, 800001.0)
	With Age: 1.0
TimeStamp | 2020-08-22 21:28:19.147463
Received: OtsuBinaryThreshold(WindowTurkey(StdDeviationHoleCustom(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_0, 1, 7), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myFloatIntAdd(-1.2718848843656194, 150)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myAnd(greaterThan(1.0, 0.1), greaterThan(-2.002584319607249, 100.0)))
	With Hash b03c9a1bb11fc2268a322049c8cf1d8d77b2d5f4060523446d1008b4a680b23a
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.147602
Received: Round(MorphOpenEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 9132, 55), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1))
	With Hash b58a68e8c248c393d89506489878e174559a272b3f69ab07775fb362b3eb95c4
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.147687
Received: birch_clustering(Fraction(MyInformedSearch(ContourMaskMaxArea(BitwiseOr(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatDiv(3.902935830697686, 10.0)), mySelPercentile(ArcCosine(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), myNot(trueBool), myFloatToInt(10.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.FULL)), greaterThanEqual(myFloatAdd(0.1, 1.0), myFloatIntSub(10.0, 150)), ifThenElseFloat(myAnd(trueBool, trueBool), myFloatDiv(-1.069937810499355, 100.0), myFloatMult(0.1, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myAnd(greaterThan(ifThenElseFloat(trueBool, 100.0, 100.0), myFloatIntSub(10.0, 100)), lessThan(passFloat(100.0), myFloatIntDiv(4.381976693959436, 6)))), ifThenElseFloat(myNot(myNot(passBool(falseBool))), passFloat(myFloatMult(myFloatAdd(-4.570421268450316, 0.01), myFloatIntSub(0.1, 18))), myFloatMult(myFloatIntSub(myFloatAdd(0.01, 10.0), myFloatToInt(100.0)), passFloat(myFloatIntMult(0.01, 32)))), myNot(ifThenElseBool(passBool(ifThenElseBool(trueBool, trueBool, falseBool)), equal(myIntToFloat(3), myFloatSub(0.1, 0.1)), lessThanOrEqual(myFloatIntMult(100.0, 2), myFloatIntMult(4.84979375267932, 3)))), myIntSub(greaterThanEqual(myFloatIntDiv(myFloatDiv(100.0, 1.1005220885659615), ifThenElseBool(trueBool, trueBool, falseBool)), myFloatIntAdd(myIntToFloat(4), myNot(falseBool))), lessThanOrEqual(myFloatIntAdd(myFloatIntAdd(10.0, 50), myIntMult(5, 3)), myFloatSub(myFloatAdd(1.0, 0.1), ifThenElseFloat(falseBool, 1.0, 0.1)))))
	With Hash b6891e8ebbcce14a9efe6c0b2c7c6797c50fbf71ddaa23f6bf2c99664d0bcf62
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.148131
Received: ThresholdBinaryInverse(TfidfVectorizer(ToFloatNorm(AbsoluteValue(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL)), passBool(lessThanOrEqual(1.0, 0.01)), notEqual(myFloatAdd(100.0, 10.0), myFloatIntAdd(0.1, 55)), notEqual(myFloatIntAdd(0.01, 3), myIntToFloat(1)), greaterThan(myFloatIntSub(100.0, 64), myFloatMult(0.01, 2.9593579154603313))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myFloatIntSub(myFloatMult(myFloatMult(100.0, 10.0), passFloat(10.0)), equal(myFloatSub(0.01, -2.8704754994918247), myFloatAdd(-3.8963734389255924, -1.425706702083934))))
	With Hash bad9a16f043ad27945e2058d7b770c487e96fad30673a4c7dc6fc5ddba8b0557
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.148335
Received: Prerejection(ScalarDivide(Sine(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myIntToFloat(9729)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myOr(lessThan(-3.3131528187125117, 0.1), myOr(trueBool, trueBool)), myFloatToInt(myFloatSub(0.01, 10.0)), myFloatIntAdd(ifThenElseFloat(greaterThan(2.4325666852482506, 1.0), 100.0, 100.0), myIntAdd(1, 6)))
	With Hash bccd36c53b754fc1514afd2a4aacaeb04b7743cfea43473087bb568f571aef9c
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.148491
Received: MorphCloseCross(EmadeDataAddPair(MeanShiftClustering(SkiMedianFilter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 150)), Round(NumpyDivide(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0)), TriState.STREAM_TO_STREAM, passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.AXIS_2))), TriState.STREAM_TO_FEATURES, Axis.AXIS_2, greaterThanEqual(myFloatIntDiv(myIntToFloat(50), greaterThan(100.0, 1.0)), ifThenElseFloat(myNot(trueBool), myFloatIntMult(-3.3811334780900304, 255), myFloatDiv(0.01, 1.0))), 100)
	With Hash bd02af06ebd2d3d27d1c937c7348e00a8a98318dc901e2412e77e87c0573d5d5
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.148676
Received: SelectRange(LocalPoolingMean(EqualizeAdaptHist(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0.01), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), greaterThanEqual(10.0, 100.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passInt(myAnd(falseBool, falseBool)), myFloatToInt(myFloatIntAdd(100.0, 50)))
	With Hash bf31d2b8da3211d75cddca11cb2898678d997843fad5839d3655cc65a23332d0
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.148803
Received: ScalarMax(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 50)
	With Hash bf6df58dafa3eae642e666cf02823ecad71b5ba03ef63262d007cf12dcecbf73
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.148870
Received: ThresholdBinary(PeakFinder(WienerFilter(SobelFilter(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myFloatIntAdd(myFloatSub(1.0, 3.2098808544895725), myFloatToInt(0.01)), equal(myFloatIntSub(100.0, 1246), myFloatDiv(1.0, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatAdd(myFloatIntMult(myFloatAdd(0.01, 1.1398201342094616), greaterThanEqual(1.0, 0.1)), myFloatDiv(myFloatIntDiv(0.1, 1), myFloatIntDiv(100.0, 55))), myIntSub(passInt(myOr(falseBool, falseBool)), greaterThan(myFloatSub(0.01, 1.0), myFloatAdd(100.0, 10.0))))
	With Hash c2c735d0d6f9a4345adbb5b7f90afbcef8c5b7de09d27489127b23208bdc1002
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.149110
Received: ContourMaskMaxExtentEnclosingCircle(StdDeviationHole(Select2D(Cv2DFTReal(EmadeDataAddPair(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), Axis.AXIS_0), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThan(myFloatIntDiv(0.1, 7), -2.425601875451062), passBool(trueBool), lessThan(myFloatMult(10.0, 100.0), myIntToFloat(7)), myAnd(greaterThan(0.1, 3.0011748839657955), trueBool)), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(Axis.AXIS_0), equal(myFloatIntMult(myFloatIntDiv(0.1, 100), myAnd(falseBool, trueBool)), passFloat(myFloatIntMult(0.01, 0))), passInt(lessThanOrEqual(myFloatDiv(100.0, 10.0), -4.126451103850784))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myFloatMult(myFloatMult(myFloatIntDiv(myIntToFloat(50), lessThanOrEqual(1.0, 0.1)), myFloatMult(10.0, 100.0)), 1.0))
	With Hash c4cdfb940b09a5699c0998a9d33626ac481905dfb0e93be6a87f3a2a452e8846
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.149381
Received: StdDeviationHole(ToFloatNorm(ARG0, passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), ifThenElseBool(falseBool, lessThan(myIntToFloat(myIntAdd(10, 50)), myFloatAdd(ifThenElseFloat(trueBool, 1.0, 1.0), myFloatSub(4.090160302723984, 1.327063548034256))), equal(passFloat(myFloatIntMult(100.0, 4)), myIntToFloat(passInt(13)))), myIntSub(passInt(equal(myFloatIntAdd(0.1, 1605), myFloatAdd(10.0, 0.1))), passInt(passBool(myOr(trueBool, trueBool)))))
	With Hash c658780f322be42191508a431ac613b5b057dece6b13d4e2a45a47ee92e75845
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.149573
Received: Cv2Sqrt(LabelByCenterOfMass(Cv2Equal(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.AXIS_1), ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), Axis.AXIS_1)
	With Hash c916698bb5c69ca39a56a272dfb99dfb55ea22b65b3445955e688e5f851e188f
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.149677
Received: NumNamedEntities(ThresholdBinaryFloat(InRange(EmadeDataSubtractFloat(myPCA(ARG0, TriState.FEATURES_TO_FEATURES, falseBool, trueBool), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), ifThenElseFloat(trueBool, 0.01, 10.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), ifThenElseBool(myNot(falseBool), equal(1.0, 0.1), notEqual(0.1, 1.0)), greaterThanEqual(myFloatIntSub(0.1, 8), myFloatSub(0.5924658640746303, 10.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), passFloat(100.0), myFloatIntDiv(myFloatIntSub(myFloatDiv(0.1, 10.0), myNot(trueBool)), 50)))
	With Hash cee15ee029f9ac43860b6faee6850d9a8288a1ec622175d9a8263c6846b09435
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.149876
Received: Cv2Pow(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 0)
	With Hash d3e9176737e726fea4b75b0fd0b38cd745896431cebd94ef42ed1fd12c272f88
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.149953
Received: ContourMaskMinEnclosingCircle(mySelFpr(ARG0, TriState.FEATURES_TO_FEATURES, 1, 1.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatIntMult(0.1, 4))
	With Hash d48564cf4ceebc535294bb130799ecf792c6916dd6303e75bde00264fe860d40
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.150045
Received: NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(150, ARG0, randomUniformWeights, InputLayer(ConvolveChannelMerge(ARG0, 50)))), 100)
	With Hash d5067f52e013cda090e6713dcc362879cfcd88996ab24e2e08ad2ca7442aad41
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.150126
Received: MultiplyTransposed(GaussianFilter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 0.1), TriState.STREAM_TO_FEATURES, Axis.AXIS_1, trueBool)
	With Hash d8d4217c5ff739c14ebea71c6bd404067dc56940fc5a8892277586e2b7c87dbd
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.150205
Received: MeanFilter(adf_0(ARG0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), greaterThan(100.0, 2.211944758392791))
adf_0: LowpassFilterBilateral(MeanShiftClustering(ARG0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), greaterThan(10.0, 0.01), myIntSub(3, 1), myIntDiv(1, trueBool))
	With Hash db52b1efeb33d52305c7a96334aff4ad30a86e3ab0bcdc060aed2504ebc416e9
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.150430
Received: WindowCosine(ThresholdToZero(myPCA(ContourMask(Select3D(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 0, 1002, 7, 10, 4, 9), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passInt(notEqual(10.0, 0.01)), greaterThanEqual(myIntToFloat(6), myIntToFloat(trueBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myFloatMult(myFloatIntMult(ifThenElseFloat(trueBool, 10.0, 0.1), myAnd(falseBool, falseBool)), myFloatSub(myIntToFloat(150), myFloatDiv(100.0, -0.2193816702640552)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))))
	With Hash dbbeaab96ee9845c1faeb29e2b899ea877e4bf54f37d992bf35e1563c72aa3dc
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.150648
Received: ThresholdToZero(RMS2D(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passFloat(10.0))
	With Hash dcc938b71c54e3b97e22269779f193784fbd2854cd28ac8d19bda9b7841e43c0
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.150736
Received: MySum(HashingVectorizer(ARG0, falseBool, 100, 9, 28), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL))
	With Hash dd406404c1fbef9679ab00d9b1a6684533b0bd904348740495507e906542184a
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.150816
Received: LocalPoolingMax(ARG0, passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), 2)
	With Hash e12706e6b88ae66b0c304a54b20e1da40e0e77c3204db796b65cce0a0143489c
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.150886
Received: MorphDilateCross(GetCentroids(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), greaterThan(0.01, -0.11553853002848147), lessThan(10.0, 0.01), 128)
	With Hash e2ea9003b1fdc8be030174e4f559f93129d493dcc2f49189166bde7d08465997
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.150997
Received: GaussianPeakEM(myICA(BackgroundSubtraction(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), myOr(trueBool, trueBool), myNot(trueBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)))
	With Hash e45a7949229d71c3020ca64fd48f9ecd84eaec9d20bdadd5f80887d85fd39dc4
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.151100
Received: MyCumSum(Cv2RMS(SubtractSaturate(ThresholdToZeroFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 100.0), MultiplyTransposed(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, falseBool), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), myNot(lessThan(100.0, 100.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), passInt(myIntDiv(myIntAdd(3, falseBool), passBool(falseBool))))
	With Hash e66275e2a1f953d3d75c60a1632d8b599c42be1d363fad899933b257ea1bd741
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.151288
Received: mySparsePCA(WindowBackmanNuttall(Cv2NotEqual(ContourMaskRangeExtent(Cv2Pow(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 4), passTriState(TriState.FEATURES_TO_FEATURES), Axis.AXIS_0, myIntSub(3, 5), myIntDiv(2, 4)), ARG0, passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), Axis.FULL, passAxis(passAxis(Axis.FULL))), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(passAxis(passAxis(Axis.FULL)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passInt(myAnd(trueBool, passBool(greaterThanEqual(-2.952947301306584, 10.0)))), myFloatIntAdd(myFloatIntAdd(myFloatMult(ifThenElseFloat(falseBool, 0.01, 0.01), myFloatIntDiv(3.6168695943794056, 0)), passBool(lessThan(0.01, 10.0))), passInt(lessThanOrEqual(myFloatMult(4.468172156892056, 100.0), passFloat(100.0)))))
	With Hash ec6cd50c64c1520a42dce66114162d34dfe829c36db4e71819fc44248a08c421
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.151520
Received: NumpyDivide(NumNamedEntities(HashingVectorizer(Sentiment(MatchedFiltering2D(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 63, 0.1), greaterThan(100.0, 10.0)), myOr(ifThenElseBool(falseBool, falseBool, trueBool), greaterThan(0.01, 10.0)), myNot(lessThanOrEqual(3.5743410410976306, 100.0)), passBool(lessThan(10.0, 1.0)), myIntMult(myFloatToInt(1.0), ifThenElseBool(falseBool, trueBool, trueBool)))), ThresholdBinary(Prerejection(MorphOpenCross(Daisy(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 10, 32, 2710, falseBool, 8), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), greaterThanEqual(0.01, 100.0), myIntMult(50, 150)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myIntAdd(myNot(falseBool), equal(100.0, 0.1)), equal(myFloatMult(4.028142764245674, 10.0), myFloatIntMult(0.01, 32)), myFloatIntDiv(myFloatSub(10.0, 0.01), notEqual(0.01, 100.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myFloatDiv(myFloatIntMult(myFloatIntDiv(0.1, 0), greaterThanEqual(0.01, 0.1)), myFloatAdd(myFloatIntSub(0.01, 14), myFloatMult(3.614471924353671, 1.0))), lessThanOrEqual(myFloatSub(myFloatDiv(10.0, 1.0), myFloatIntMult(0.01, 32)), myIntToFloat(equal(-1.429476834409308, 1.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))))
	With Hash ee6c43ca3bbefe554251d01dda88437b4c607b8b448cd84a7ab7b153b19b67a1
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.151918
Received: ContourMaskMinLength(LowpassFilterAverage(Fraction(AccumulateWeighted(HighpassIrst(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatIntSub(0.1, 128)), TriState.STREAM_TO_FEATURES, passAxis(passAxis(Axis.AXIS_1)), passInt(myIntAdd(falseBool, 32))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myIntMult(ifThenElseBool(lessThanOrEqual(0.1, 0.1), myNot(falseBool), myAnd(trueBool, falseBool)), ifThenElseBool(myNot(trueBool), notEqual(-2.945577077817526, 0.1), myOr(falseBool, trueBool)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), myFloatIntMult(myFloatIntDiv(0.1, 100), lessThanOrEqual(100.0, myFloatSub(myIntToFloat(10), myFloatIntDiv(3.2379221126339335, 128)))))
	With Hash ef9aa261b88724016cda7cf50a05b68b4c409dad88c1664331e59db6bf1a082f
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.152167
Received: MorphErosionCross(ARG0, TriState.FEATURES_TO_FEATURES, passAxis(passAxis(Axis.AXIS_0)), lessThan(0.1, myFloatIntAdd(-3.880951514416121, 4)), lessThanOrEqual(myFloatIntDiv(0.01, 1), myFloatIntSub(0.01, 1)), passInt(ifThenElseBool(trueBool, falseBool, trueBool)))
	With Hash f323d5dd7441635c9fe5f7e81da15b6447cb419e829b0dce6895d1d1726521c9
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.152282
Received: ScalarAdd(ScalarMin(NormalLikelihood(ARG0, 64), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passInt(falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatAdd(ifThenElseFloat(trueBool, 0.01, 0.1), myFloatMult(10.0, 100.0)))
	With Hash f5471a53a3630d58605841568b4b8ccb44b6a66ab58d1b846d2632dabb4b88d7
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.152402
Received: ContourMaskRangeExtentEnclosingCircle(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 3, 8)
	With Hash f7c46230dcdd5fb72fdb2a6163fc2f85af35bf894a864fd0bbd402626554a8b3
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.152474
Received: WindowPlanckTaper(b-spline(WindowLanczos(Cv2Divide(MyAverager(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 9), MyAutoCorr(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), myIntToFloat(equal(myFloatSub(passFloat(0.8425333993447115), myFloatMult(0.1, -0.09814325781197031)), ifThenElseFloat(greaterThan(0.1, 0.1), myFloatMult(1.0, 4.0367555739795264), myFloatIntMult(0.1, falseBool)))))
	With Hash f8c6daa4766e0850755fe9043898951dc22b5b1e2bf1a927a80c6ce585359e43
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.152695
Received: ZeroOneNorm(InRange(BitwiseAnd(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_2), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myIntMult(9763, trueBool), myAnd(falseBool, falseBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)))
	With Hash fc078468bb5e48ee41cdcd7d95b5215167d8ba78e775a6e4b72be32188f3674c
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.152815
Received: Cv2GreaterThan(DohDetection(EqualizeDisk(ArcTangent(HighpassFourierShift(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 128), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), equal(myFloatSub(1.0, 100.0), myFloatIntMult(1.0, 32))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myFloatIntSub(ifThenElseFloat(greaterThan(100.0, 1.0), myFloatIntMult(100.0, -6), ifThenElseFloat(falseBool, 0.01, 10.0)), myAnd(myNot(falseBool), greaterThanEqual(100.0, 100.0))), myFloatIntDiv(myFloatIntSub(myFloatIntAdd(0.1, 7), greaterThanEqual(0.01, 1.149773193854145)), myIntMult(equal(-1.0006354747544122, 1.0), myIntDiv(50, 32))), myOr(myNot(lessThan(0.01, 0.01)), notEqual(myFloatMult(100.0, 1.710747811868588), myFloatDiv(1.0, 10.0))), ifThenElseFloat(lessThanOrEqual(myFloatIntDiv(0.01, 55), myFloatAdd(1.0, 0.1)), myFloatSub(myFloatMult(1.0, 0.01), passFloat(1.0)), myFloatSub(myFloatIntAdd(100.0, 4), myIntToFloat(3731))), ifThenElseFloat(myNot(myAnd(trueBool, falseBool)), myFloatDiv(myFloatIntDiv(0.1, 55), myFloatAdd(0.01, 10.0)), myFloatIntAdd(ifThenElseFloat(trueBool, 0.01, 100.0), myIntMult(6, 3)))), Log(LowpassFilterMedian(WindowHamming(NNLearner(ARG0, EmbeddingLayer(7, ARG0, randomUniformWeights, InputLayer(ARG0)), 39), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myOr(falseBool, trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), equal(passFloat(0.01), myFloatMult(100.0, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))))
	With Hash fc4bf3fef36dba10ee415575cb480987aa6d9de922ef39cbcd7569b278021d4a
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.153317
Received: Prerejection(ContourMaskRangeEquDiameter(RandomUniform(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, falseBool, 255), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myIntDiv(1, 55), notEqual(-1.5339542588046107, 0.01)), TriState.STREAM_TO_STREAM, passAxis(passAxis(Axis.AXIS_0)), 3, myIntAdd(100, lessThanOrEqual(0.01, -4.674255599033462)), 100.0)
	With Hash fd0e3c3463412dc7ed4c464bad2d8edd1c22d5f2126958453ea4a22b0ec3754a
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.153457
Received: StdDeviation(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 64)
	With Hash ff1a9435fc2e7774e5c212652e39d4d62575a9c7d1997d00a2b63a07322fb9ef
	With Fitnesses: (inf, inf)
	With Age: 0
TimeStamp | 2020-08-22 21:28:19.153526
Received: HighpassFourierUniform(EmadeDataAddFloat(ContourMaskMinEnclosingCircle(myIfThenElse(ARG0, ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, 10), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatIntMult(0.01, 5)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myFloatDiv(ifThenElseFloat(trueBool, 4.645336856249276, 10.0), myFloatSub(10.0, 0.1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), myFloatToInt(myFloatIntMult(myFloatIntSub(0.1, 3), greaterThan(0.01, 1.0))))
	With Hash ff82375963ef36bbfe4cb331b6901953b09a345d1add643c678275f352d60274
	With Fitnesses: (inf, inf)
	With Age: 0
Elite Pool has: 51 individuals, and 51 are unique
evaluated offspring has: 127 individuals, and 127 are unique
Gene Pool has: 178 individuals, and 176 are unique
Got Redundant NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 91) (0.04490820649615568, 800001.0) 4376795a5a254724d947d0454392ea19d1725e1f1e22cd6f095d2430e2542cea
Got Redundant NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(93, ARG0, randomUniformWeights, InputLayer(ARG0))), 100) (0.04506511846853911, 744001.0) 138bce9aac71129d4f785d54f4a3a7d161a607c23018300e6deba679adc2d2dd
Sanity check after removal of redundant individuals
Elite Pool has: 51 individuals, and 51 are unique
evaluated offspring has: 127 individuals, and 127 are unique
Gene Pool has: 176 individuals, and 176 are unique
Before History Addition | 2020-08-22 21:28:20.454850
After History Addition | 2020-08-22 21:28:25.926271
23 FullDataSet individuals
Gene pool assembled
After adjust for data set 176 out of 176 are unique
After select nsga2 176 out of 176 are unique
NSGAII Completed
23 FullDataSet individuals
176 total individuals
Before Uneval Count Query | 2020-08-22 21:28:35.192461
After Uneval Count Query | 2020-08-22 21:28:35.268270
420 individuals evaluated thus far
Right before binary tournament 176 out of 176 are unique
Parents Selected 32 from 176
31 out of 32 are unique
[0.7695652173913143, 0.23043478260868563, 0.5130434782607993, inf, inf, inf, inf, inf, inf, inf, 1.0, inf, 1.0, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Updating Pareto Front
Pareto Front Updated
Before Pareto Front Addition | 2020-08-22 21:28:35.631575
After Pareto Front Addition | 2020-08-22 21:28:36.221706
Pareto Front Updated
(0.04437470579005176, 800001.0)
(0.04446885297348191, 792001.0)
(0.04456300015691195, 752001.0)
(0.04506511846853911, 744001.0)
(0.045096500863015865, 560001.0)
Hypervolume:  44910003.52898157
Pareto Individual 0 after gen 3 is NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 88)(0.04437470579005176, 800001.0) Age 1.0
Pareto Individual 1 after gen 3 is NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(99, ARG0, randomUniformWeights, InputLayer(ARG0))), 100)(0.04446885297348191, 792001.0) Age 1.0
Pareto Individual 2 after gen 3 is NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(94, ARG0, randomUniformWeights, InputLayer(ARG0))), 100)(0.04456300015691195, 752001.0) Age 1.0
Pareto Individual 3 after gen 3 is NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(93, ARG0, randomUniformWeights, InputLayer(ARG0))), 100)(0.04506511846853911, 744001.0) Age 1.0
Pareto Individual 4 after gen 3 is NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(myIntMult(10, 7), ARG0, randomUniformWeights, InputLayer(ARG0))), 128)(0.045096500863015865, 560001.0) Age 1.0
Updated Elite Pool
Finished Calculating Statistics
Starting Gen 4
Producing offspring
After cloning from parents 31 out of 32 are unique
Additionally 32 individuals are unique in memory
And 101 mains and adfs are unique
Mating offspring
Mated 62 individuals
Mating offspring Ephemerals
Mated 66 individuals ephermerals
Mating offspring headless chicken
Mated 24 individuals
Mating offspring Ephemerals headless chicken
Mated 44 individuals ephermerals
Mutating offspring (Node Replace)
Mutated 118 individuals
Heal Offspring
[<deap.gp.Terminal object at 0x7f46a6ad0120>]
[<deap.gp.Primitive object at 0x7f46a6a64188>, <deap.gp.Primitive object at 0x7f46a6a59638>, <deap.gp.Primitive object at 0x7f46a6ad2cc8>, <deap.gp.Terminal object at 0x7f46a6ad0120>, <deap.gp.TriStateGen object at 0x7f469ed4faf0>, <deap.gp.AxisGen object at 0x7f469ed4fb48>, <deap.gp.Terminal object at 0x7f46a6a6a510>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.TriStateGen object at 0x7f469ed4fba0>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.AxisGen object at 0x7f469ed4fbf8>, <deap.gp.Primitive object at 0x7f46a6a5b868>, <deap.gp.Primitive object at 0x7f46a6a61ea8>, <deap.gp.Terminal object at 0x7f46a6ad0120>, <deap.gp.TriStateGen object at 0x7f469ed4fc50>, <deap.gp.AxisGen object at 0x7f469ed4fca8>, <deap.gp.Terminal object at 0x7f46a6a6a090>, <deap.gp.Primitive object at 0x7f46a6a64408>, <deap.gp.Terminal object at 0x7f46a6ad0120>, <deap.gp.TriStateGen object at 0x7f469ed4fd00>, <deap.gp.AxisGen object at 0x7f469ed4fd58>, <deap.gp.Terminal object at 0x7f46a6a6a090>, <deap.gp.Terminal object at 0x7f46a6a6a120>, <deap.gp.Terminal object at 0x7f46a6a6a678>, <deap.gp.Terminal object at 0x7f46a6a6a1b0>, <deap.gp.Terminal object at 0x7f46a6a6a090>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.TriStateGen object at 0x7f469ed4fdb0>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.TriStateGen object at 0x7f469ed4fe08>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.AxisGen object at 0x7f469ed4fe60>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.AxisGen object at 0x7f469ed4feb8>, <deap.gp.Primitive object at 0x7f46a6a54548>, <deap.gp.Primitive object at 0x7f46a6a675e8>, <deap.gp.Terminal object at 0x7f46a6ad0120>, <deap.gp.Primitive object at 0x7f46a6a67188>, <deap.gp.Terminal object at 0x7f46a6a6a1f8>, <deap.gp.Terminal object at 0x7f46a6ad0120>, <deap.gp.Terminal object at 0x7f46a6a6a828>, <deap.gp.Primitive object at 0x7f46a6a67138>, <deap.gp.Terminal object at 0x7f46a6ad0120>, <deap.gp.Terminal object at 0x7f46a6a6a708>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.TriStateGen object at 0x7f469ed4ff68>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.AxisGen object at 0x7f469ed4ffc0>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.TriStateGen object at 0x7f469ecf7048>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.TriStateGen object at 0x7f469ecf70a0>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.TriStateGen object at 0x7f469ecf70f8>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.AxisGen object at 0x7f469ecf7150>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.AxisGen object at 0x7f469ecf71a8>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.AxisGen object at 0x7f469ecf7200>]
<class 'deap.gp.PrimitiveTree'>
[<deap.gp.Terminal object at 0x7f46a6ad0120>]
[<deap.gp.Primitive object at 0x7f46a6a55408>, <deap.gp.Primitive object at 0x7f46a6a55d18>, <deap.gp.Primitive object at 0x7f46a6a675e8>, <deap.gp.Terminal object at 0x7f46a6ad0120>, <deap.gp.Primitive object at 0x7f46a6a67188>, <deap.gp.Terminal object at 0x7f46a6a6a6c0>, <deap.gp.Terminal object at 0x7f46a6ad0120>, <deap.gp.Terminal object at 0x7f46a6a6a750>, <deap.gp.Primitive object at 0x7f46a6a67138>, <deap.gp.Terminal object at 0x7f46a6ad0120>, <deap.gp.Terminal object at 0x7f46a6a6a6c0>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.TriStateGen object at 0x7f469f2828e0>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.AxisGen object at 0x7f469f282938>, <deap.gp.Primitive object at 0x7f46a6a64e58>, <deap.gp.Terminal object at 0x7f46a6ad0fc0>, <deap.gp.Terminal object at 0x7f46a6a6a048>, <deap.gp.Primitive object at 0x7f46a6a66048>, <deap.gp.Terminal object at 0x7f46a6a6a048>, <deap.gp.Terminal object at 0x7f46a6ad0fc0>, <deap.gp.Terminal object at 0x7f46a6a6a048>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.Primitive object at 0x7f46a6a667c8>, <deap.gp.TriStateGen object at 0x7f469f282990>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.Primitive object at 0x7f46a6a66818>, <deap.gp.AxisGen object at 0x7f469f2829e8>, <deap.gp.Primitive object at 0x7f46a6a665e8>, <deap.gp.Primitive object at 0x7f46a6a64d18>, <deap.gp.Terminal object at 0x7f46a6a6a1b0>, <deap.gp.Terminal object at 0x7f46a6a6a168>]
<class 'deap.gp.PrimitiveTree'>
Healed128 individuals
Mutating offspring (Add Layer)
MorphDilateCross(ZeroOneNorm(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1), TriState.STREAM_TO_FEATURES, passAxis(Axis.AXIS_2), myNot(trueBool), myNot(falseBool), lessThanOrEqual(1.0, -2.75248714536355))
15
ContourMaskRangeExtentEnclosingCircle(LabelByCenterOfMass(Cv2Equal(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_1), ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_2), TriState.FEATURES_TO_FEATURES, Axis.FULL, 3, 8)
18
ObjectDetection(Exponetial(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), greaterThan(10.0, 0.1), myFloatDiv(0.1, 100.0), myFloatIntDiv(2.6006493644286977, 50))
14
CornerDetectionHarris(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 255, 4, 0.1)
7
birch_clustering(Fraction(mySelFdr(ARG0, TriState.STREAM_TO_FEATURES, 4, 0.1), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myAnd(greaterThan(ifThenElseFloat(trueBool, 100.0, 100.0), myFloatIntSub(10.0, 100)), lessThan(passFloat(100.0), myFloatIntDiv(4.381976693959436, 6)))), ifThenElseFloat(myNot(myNot(passBool(falseBool))), passFloat(myFloatMult(myFloatAdd(-4.570421268450316, 0.01), myFloatIntSub(0.1, 18))), myFloatMult(myFloatIntSub(myFloatAdd(0.01, 10.0), myFloatToInt(100.0)), passFloat(myFloatIntMult(0.01, 32)))), myNot(ifThenElseBool(passBool(ifThenElseBool(trueBool, trueBool, falseBool)), equal(myIntToFloat(3), myFloatSub(0.1, 0.1)), lessThanOrEqual(myFloatIntMult(100.0, 2), myFloatIntMult(4.84979375267932, 3)))), myIntSub(greaterThanEqual(myFloatIntDiv(myFloatDiv(100.0, 1.1005220885659615), ifThenElseBool(trueBool, trueBool, falseBool)), myFloatIntAdd(myIntToFloat(4), myNot(falseBool))), lessThanOrEqual(myFloatIntAdd(myFloatIntAdd(10.0, 50), myIntMult(5, 3)), myFloatSub(myFloatAdd(1.0, 0.1), ifThenElseFloat(falseBool, 1.0, 0.1)))))
105
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(7, ARG0, randomUniformWeights, InputLayer(ARG0))), 100)
11
index
2
2
10
add node
GlobalMaxPoolingLayer1D
after make
NNLearner(ARG0, OutputLayer(ARG0, GlobalMaxPoolingLayer1D(EmbeddingLayer(7, ARG0, randomUniformWeights, InputLayer(ARG0)))), 100)
NNLearner(ARG0, OutputLayer(ARG0, GlobalMaxPoolingLayer1D(EmbeddingLayer(7, ARG0, randomUniformWeights, InputLayer(ARG0)))), 100)
WindowCosine(ThresholdToZero(myPCA(ContourMask(Select3D(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 0, 1002, 7, 10, 4, 9), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passInt(notEqual(10.0, 0.01)), greaterThanEqual(myIntToFloat(6), myIntToFloat(trueBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myFloatMult(myFloatIntMult(ifThenElseFloat(trueBool, 10.0, 0.1), myAnd(falseBool, falseBool)), myFloatSub(myIntToFloat(150), myFloatDiv(100.0, -0.2193816702640552)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))))
63
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 87)
11
index
2
2
10
add node
Conv1DLayer
after make
NNLearner(ARG0, OutputLayer(ARG0, Conv1DLayer(32, 150, 0, falseBool, 64, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)))), 87)
NNLearner(ARG0, OutputLayer(ARG0, Conv1DLayer(32, 150, 0, falseBool, 64, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)))), 87)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 150)
11
index
2
2
10
add node
GlobalMaxPoolingLayer2D
after make
NNLearner(ARG0, OutputLayer(ARG0, GlobalMaxPoolingLayer2D(EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)))), 150)
NNLearner(ARG0, OutputLayer(ARG0, GlobalMaxPoolingLayer2D(EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)))), 150)
EmadeDataDivideFloat(Exponetial(Cv2GreaterThanOrEqual(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), passFloat(myFloatAdd(100.0, 10.0)))
23
MySnapshot(ContourMaskConvex(Cv2Divide(Sine(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), Cv2Max(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), myNot(greaterThanEqual(100.0, 100.0))), EmadeDataAddInt(WienerFilter(ThresholdToZeroPixelFloat(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), lessThanOrEqual(myFloatIntSub(0.01, 128), passFloat(0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), passAxis(passAxis(passAxis(Axis.AXIS_2))), notEqual(ifThenElseFloat(ifThenElseBool(falseBool, trueBool, falseBool), passFloat(2.9900549360085655), ifThenElseFloat(trueBool, 0.01, -4.268745342159392)), myFloatIntDiv(myIntToFloat(255), myIntAdd(4, 128))))
91
SVCMulti(ARG0)
2
Daisy(Cv2AbsDiff(Round(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), Prerejection(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 150, 3, 0.01), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThan(myFloatIntDiv(0.1, 95), myFloatIntMult(100.0, 1)), lessThanOrEqual(myFloatIntMult(-2.4033966752898586, 9438), myFloatIntSub(0.1, 4)), myNot(myNot(falseBool)), myOr(ifThenElseBool(trueBool, falseBool, falseBool), greaterThan(0.1, 1.0)), 55)
53
MatchedFiltering(mySelFdr(mySelFwe(ARG0, TriState.STREAM_TO_FEATURES, 1, 10.0), passTriState(TriState.FEATURES_TO_FEATURES), lessThanOrEqual(10.0, -2.7563858572238544), myFloatDiv(0.1, -2.136480350665868)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myIntSub(equal(10.0, 100.0), notEqual(10.0, 0.01)))
28
Cv2Multiply(MultiplyTransposed(MorphErosionEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 3, 5, 32), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myNot(falseBool)), Select1D(NumNamedEntities(ARG0), passTriState(TriState.STREAM_TO_FEATURES), Axis.AXIS_0, myOr(falseBool, falseBool), lessThanOrEqual(0.01, -2.433276027963754)), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_2)))
37
MyDCT(WindowBartlettHann(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), greaterThanEqual(0.1, 0.1), myIntMult(7, 9))
15
CreateBBox(LowpassFilterEllipsoid(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 50), WindowHamming(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, falseBool), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_2), myNot(falseBool))
21
mySelKBest(ARG0, TriState.FEATURES_TO_FEATURES, trueBool, 4)
5
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(8, ARG0, randomUniformWeights, OutputLayer(ARG0, EmbeddingLayer(3, ARG0, randomUniformWeights, InputLayer(ARG0))))), 9793)
17
index
2
2
16
add node
AttentionLayer
after make
NNLearner(ARG0, OutputLayer(ARG0, AttentionLayer([], EmbeddingLayer(8, ARG0, randomUniformWeights, OutputLayer(ARG0, EmbeddingLayer(3, ARG0, randomUniformWeights, InputLayer(ARG0)))))), 9793)
NNLearner(ARG0, OutputLayer(ARG0, AttentionLayer(EmbeddingLayer(8, ARG0, randomUniformWeights, OutputLayer(ARG0, EmbeddingLayer(3, ARG0, randomUniformWeights, InputLayer(ARG0)))), EmbeddingLayer(8, ARG0, randomUniformWeights, OutputLayer(ARG0, EmbeddingLayer(3, ARG0, randomUniformWeights, InputLayer(ARG0)))))), 9793)
NNLearner(RandomUniform(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 0, 9), OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 92)
16
index
7
7
15
add node
MaxPoolingLayer1D
after make
NNLearner(RandomUniform(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 0, 9), OutputLayer(ARG0, MaxPoolingLayer1D(0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)))), 92)
NNLearner(RandomUniform(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 0, 9), OutputLayer(ARG0, MaxPoolingLayer1D(0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)))), 92)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 88)
11
index
2
2
10
add node
ConcatenateLayer3
after make
NNLearner(ARG0, OutputLayer(ARG0, ConcatenateLayer3([], [], EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)))), 88)
NNLearner(ARG0, OutputLayer(ARG0, ConcatenateLayer3(EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)), EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)), EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)))), 88)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(64, ARG0, randomUniformWeights, InputLayer(ARG0))), 7)
11
index
2
2
10
add node
GlobalMaxPoolingLayer2D
after make
NNLearner(ARG0, OutputLayer(ARG0, GlobalMaxPoolingLayer2D(EmbeddingLayer(64, ARG0, randomUniformWeights, InputLayer(ARG0)))), 7)
NNLearner(ARG0, OutputLayer(ARG0, GlobalMaxPoolingLayer2D(EmbeddingLayer(64, ARG0, randomUniformWeights, InputLayer(ARG0)))), 7)
EmadeDataDivideFloat(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 0.1)
5
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, MyDWT(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 50), randomUniformWeights, InputLayer(ARG0))), 100)
15
index
2
2
14
add node
Conv2DLayer
after make
NNLearner(ARG0, OutputLayer(ARG0, Conv2DLayer(55, 64, 50, falseBool, 255, EmbeddingLayer(100, MyDWT(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 50), randomUniformWeights, InputLayer(ARG0)))), 100)
NNLearner(ARG0, OutputLayer(ARG0, Conv2DLayer(55, 64, 50, falseBool, 255, EmbeddingLayer(100, MyDWT(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 50), randomUniformWeights, InputLayer(ARG0)))), 100)
KalmanFilter(EqualizeHist(Rebase(LocalPoolingMax(MorphBlackhatRect(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 4, 64), TriState.FEATURES_TO_FEATURES, passAxis(Axis.AXIS_1), ifThenElseBool(trueBool, falseBool, falseBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), Axis.AXIS_1), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), passFloat(passFloat(passFloat(myFloatIntSub(10.0, 5469)))), myFloatMult(myFloatMult(ifThenElseFloat(notEqual(100.0, 0.1), myIntToFloat(64), myFloatIntMult(1.0, falseBool)), passFloat(ifThenElseFloat(trueBool, 100.0, 4.2866232571471645))), myFloatIntSub(myIntToFloat(notEqual(1.9701394954076603, 1.0)), 55)))
67
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(6, Cv2LessThanOrEqual(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_2), randomUniformWeights, InputLayer(ARG0))), 0)
17
index
2
2
16
add node
MaxPoolingLayer2D
after make
NNLearner(ARG0, OutputLayer(ARG0, MaxPoolingLayer2D(-7, EmbeddingLayer(6, Cv2LessThanOrEqual(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_2), randomUniformWeights, InputLayer(ARG0)))), 0)
NNLearner(ARG0, OutputLayer(ARG0, MaxPoolingLayer2D(-7, EmbeddingLayer(6, Cv2LessThanOrEqual(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_2), randomUniformWeights, InputLayer(ARG0)))), 0)
HighpassSobelDerivative(Prerejection(mySparsePCA(MedianFilterHole(AdjustConstrastGamma(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, -4.101416226567575, 1.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myIntAdd(3, 7), 55), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), greaterThan(myFloatIntAdd(1.0, 150), myFloatIntAdd(0.01, trueBool)), myFloatIntMult(myFloatAdd(0.01, 1.0), 255)), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), lessThan(myFloatAdd(myFloatMult(0.1, 0.1), passFloat(0.1)), ifThenElseFloat(passBool(falseBool), -3.9948408932836443, myFloatIntSub(0.1, -15))), myIntAdd(greaterThanEqual(100.0, myFloatIntAdd(0.01, 3)), passBool(lessThanOrEqual(10.0, 0.01))), ifThenElseFloat(falseBool, myFloatMult(myFloatIntAdd(1.114563607086816, 8), myFloatIntMult(100.0, trueBool)), myFloatIntDiv(myFloatAdd(10.0, 100.0), greaterThan(1.0, 0.1)))), TriState.STREAM_TO_FEATURES, passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), myIntDiv(ifThenElseBool(myAnd(trueBool, lessThanOrEqual(0.1, 0.01)), myOr(lessThan(2.2894660583643844, 0.01), ifThenElseBool(falseBool, falseBool, falseBool)), equal(0.01, myFloatIntSub(100.0, 1))), lessThan(myFloatIntMult(myIntToFloat(5), myFloatToInt(0.04691336717417016)), myFloatSub(myFloatIntAdd(100.0, 4), 1.0))), myIntAdd(myOr(greaterThan(myFloatMult(0.1, 1.0), myIntToFloat(falseBool)), greaterThan(myIntToFloat(100), myFloatIntSub(0.1, 0))), myIntDiv(myOr(ifThenElseBool(falseBool, falseBool, trueBool), passBool(falseBool)), 6)), myNot(myOr(lessThan(myFloatIntAdd(100.0, 6), myFloatIntAdd(10.0, 5)), equal(myIntToFloat(-8), myFloatIntDiv(1.0, 2)))), myIntDiv(myOr(greaterThanEqual(ifThenElseFloat(trueBool, 10.0, 0.1), myFloatSub(10.0, 4.016717203457642)), notEqual(myFloatSub(1.0, 0.1), myFloatAdd(1.0, 10.0))), lessThanOrEqual(myFloatAdd(myFloatAdd(0.1, 100.0), myFloatMult(0.01, 2.2918283838845745)), myIntToFloat(lessThan(100.0, 0.01)))), notEqual(myFloatIntMult(myFloatIntAdd(myFloatDiv(100.0, 0.43506167317339006), ifThenElseBool(trueBool, trueBool, trueBool)), ifThenElseBool(greaterThan(-2.0994014052525656, 100.0), greaterThan(0.1, 10.0), myNot(trueBool))), 100.0))
205
EmadeDataAddPairTriple(CCorrObjectFilter(ARG0, ARG0, 2, 0.1), MorphTophatRect(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 9, 3), CopyStreamToTarget(ARG0), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_1))
26
ConvertBW(SelectRange(ThresholdToZeroPixelFloat(TfidfVectorizer(Cv2Add(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, Axis.FULL), greaterThan(1.0, 100.0), myNot(trueBool), passInt(64), myIntSub(7, 2)), ThresholdToZeroPixelFloat(Stemmatizer(ARG0, falseBool, 8), LowpassFilterGaussian(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 255, 64, 0.1, 0.01), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), ifThenElseBool(greaterThan(myFloatIntSub(10.0, 7), myFloatIntSub(2.879830603263221, 128)), myOr(lessThan(10.0, 100.0), lessThan(1.0, 10.0)), lessThan(myFloatSub(0.1, 1.0), myFloatSub(0.01, 100.0))), lessThan(myFloatDiv(myFloatIntDiv(100.0, 9), myFloatIntAdd(0.01, 10)), myFloatAdd(myFloatSub(100.0, 1.0), myFloatSub(0.1, 1.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))))
109
CornerDetectionHarris(ARG0, passTriState(TriState.STREAM_TO_STREAM), Axis.AXIS_1, 255, 4, 0.1)
8
LogDetection(Cv2Pow(MeanFilter(ContourMaskMaxExtentEnclosingCircle(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatToInt(0.1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThan(myFloatDiv(-3.4316643674859906, 100.0), myFloatMult(-3.9664146998609673, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2))), passFloat(myFloatIntAdd(myFloatMult(10.0, 0.01), myFloatToInt(0.01))), ifThenElseFloat(notEqual(myFloatMult(0.1, 0.01), myFloatIntDiv(0.1, 4)), passFloat(myIntToFloat(99)), myFloatIntDiv(ifThenElseFloat(falseBool, 10.0, 0.01), equal(10.0, 0.1))), lessThan(ifThenElseFloat(notEqual(100.0, 0.01), myFloatIntDiv(0.01, 32), myFloatIntDiv(10.0, 64)), myFloatIntDiv(ifThenElseFloat(falseBool, 0.01, -3.1611027872158415), lessThan(0.01, 0.01))), myFloatMult(myFloatMult(myFloatDiv(10.0, 1.0), myFloatIntMult(0.1, 83)), myFloatAdd(myFloatDiv(-0.19263036148403323, -1.3909339498826565), myFloatIntSub(0.01, 10))), myFloatMult(myIntToFloat(myIntSub(4, 1)), myFloatDiv(myFloatIntSub(-4.661708200468498, 0), myIntToFloat(64))))
106
MorphTophatEllipse(ContourMask(ECDF(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 7), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), ifThenElseBool(myOr(falseBool, falseBool), equal(0.01, 0.01), equal(10.0, -3.3733985464249336)), myIntSub(lessThan(0.01, 100.0), notEqual(0.01, 0.01)))
34
MeanWithHole(Hog(EmadeDataNumpyMultiplyFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 100.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myAnd(falseBool, trueBool), lessThan(1.0, 100.0), passInt(trueBool), passInt(10)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), greaterThan(myIntToFloat(32), ifThenElseFloat(falseBool, 0.01, 0.08380888567614964)), myIntAdd(ifThenElseBool(trueBool, falseBool, trueBool), myIntSub(1, 100)))
42
WienerFilter(MedianFilterHole(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 7, -10), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0))
11
ThresholdBinaryInverseMask(EmadeDataNumpyMultiplyFloat(RemoveFeature(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 2), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), ifThenElseFloat(falseBool, 0.01, 4.051201393755267)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), passFloat(myFloatDiv(10.0, 10.0)))
25
Sine(LowpassFilterUniform(Cv2Min(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_2, Axis.AXIS_2), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), ifThenElseBool(trueBool, falseBool, trueBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(Axis.FULL))
22
mySelFdr(ARG0, TriState.FEATURES_TO_FEATURES, 6, 0.1)
5
EmadeDataAddPairTriple(Cv2DCT(LinearPredictiveCoding(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 32), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2)), ThresholdToZeroPixelFloat(EmadeDataNumpyMultiplyFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 100.0), LogDetection(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 100.0, 1.0, 150, 0.01, 100.0), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_1)), ConvertBW(NNLearner(ARG0, EmbeddingLayer(0, ARG0, gloveTwitterWeights, InputLayer(ARG0)), 55), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.FULL)), passAxis(passAxis(Axis.AXIS_2)))
66
RegionalMaxima(ThresholdBinaryInverseMask(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, -0.8495801211260723), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), myIntToFloat(64))
12
WindowBlackmanHarris(TfidfVectorizer(AbsoluteValue(ContoursConvexConcave(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, falseBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0)), myOr(notEqual(10.0, 10.0), equal(1.0, 10.0)), myAnd(ifThenElseBool(falseBool, falseBool, falseBool), passBool(trueBool)), 1, equal(1.5460653774057374, myIntToFloat(4))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(Axis.FULL))
37
SelectRange(adf_0(ARG0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), greaterThan(1.0, 100.0), notEqual(1.0, 0.1))
13
EmadeDataAddPair(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_2)
7
HighpassFourierEllipsoid(ContourMaskRangeExtentEnclosingCircle(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, trueBool, 0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), ifThenElseBool(falseBool, trueBool, trueBool))
15
ArcTangent(adf_1(ARG0), TriState.STREAM_TO_STREAM, Axis.FULL)
5
mySparsePCA(MatchedFiltering(ContourMaskMinEnclosingCircle(Tfisf(adf_0(ARG0), greaterThan(100.0, -3.6196067880950853), equal(0.01, 10.0), myIntAdd(2, 4), myIntSub(1574, 55)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), myFloatSub(myFloatIntSub(0.1, 7), myFloatIntSub(0.1, 10))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL))), lessThanOrEqual(passFloat(ifThenElseFloat(falseBool, 10.0, 0.01)), passFloat(myFloatIntSub(-0.31747137817785376, 50)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), greaterThan(myFloatAdd(myFloatAdd(myFloatMult(10.0, -2.6956640280954924), passFloat(-1.1519029584187015)), myFloatIntMult(myFloatMult(1.0, 0.1), myFloatToInt(0.1))), myFloatIntDiv(ifThenElseFloat(lessThanOrEqual(0.01, 100.0), passFloat(0.1), myFloatMult(0.01, 1.0)), lessThanOrEqual(passFloat(100.0), myFloatIntMult(0.01, 5)))), myFloatIntSub(ifThenElseFloat(passBool(myOr(falseBool, trueBool)), myFloatAdd(myFloatIntMult(-0.04991247957525058, 32), myFloatAdd(100.0, 0.1)), myFloatAdd(myFloatMult(0.01, 10.0), myFloatIntAdd(0.01, 2))), myFloatToInt(passFloat(myFloatIntSub(0.01, 33)))))
109
AccumulateWeighted(EmadeDataMultiplyInt(MorphGradientEllipse(Correlation(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatToInt(10.0), greaterThanEqual(10.0, 0.1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), myIntSub(myOr(falseBool, trueBool), lessThan(0.1, 10.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myFloatMult(myFloatDiv(passFloat(3.1918990996551226), myFloatIntAdd(100.0, 75)), ifThenElseFloat(myNot(trueBool), myFloatIntSub(2.023202771563196, 8), myFloatAdd(0.1, 0.1))))
56
ContourMaskMaxExtentEnclosingCircle(SetToZeroIf<Data&Factor(Fraction(MyProd(WindowLanczos(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), myOr(myOr(falseBool, trueBool), myNot(falseBool))), Cv2iDCT(EmadeDataMultiplyFloat(CornerDetectionEigen(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 5, 4, 100.0), TriState.FEATURES_TO_FEATURES, passAxis(Axis.AXIS_1), myFloatIntSub(0.01, 32)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), TriState.STREAM_TO_STREAM, passAxis(passAxis(passAxis(Axis.AXIS_1))), passAxis(passAxis(passAxis(Axis.AXIS_0))), lessThanOrEqual(passFloat(myFloatAdd(2.9069080112270287, 0.01)), myFloatIntAdd(myIntToFloat(255), passInt(255)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myFloatIntMult(myFloatSub(10.0, myFloatAdd(myIntToFloat(55), myFloatIntAdd(-3.6836299710455744, 32))), ifThenElseBool(greaterThan(myFloatDiv(1.0, 1.0), myFloatIntMult(-4.4212489551614285, trueBool)), myAnd(myNot(trueBool), lessThan(0.01, 0.1)), myOr(greaterThan(0.1, 0.01), lessThanOrEqual(100.0, 100.0)))))
106
ContourMaskMaxExtentEnclosingCircle(ToUint8Scale(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), myIntToFloat(100))
11
SubtractSaturate(Cv2iDCT(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), EmadeDataNumpyMultiplyInt(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 0), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_1))
18
MorphBlackhatEllipse(ContourMaskMaxEquDiameter(ARG0, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myNot(falseBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), greaterThanEqual(passFloat(2.0718433601865724), passFloat(1.0)), myOr(notEqual(0.1, 1.0), lessThanOrEqual(100.0, 100.0)))
27
Tfisf(ContourMaskMinLength(ContourMaskConvex(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, falseBool), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myFloatIntDiv(100.0, 64)), myNot(trueBool), myOr(equal(3.8139005120978506, 0.1), ifThenElseBool(falseBool, falseBool, trueBool)), myAnd(myAnd(trueBool, falseBool), falseBool), passInt(notEqual(-0.49742443561056326, 1.4542023334113585)))
33
MorphOpenCross(MultiplyTransposed(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, falseBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myOr(falseBool, falseBool), lessThanOrEqual(10.0, 100.0))
16
LogDetection(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 0.1, 1.0, 3, 0.1, 1.0)
9
MySum(WindowGaussian(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 0.1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1))
10
Cv2Equal(TfidfVectorizer(ConvertBW(Cv2iDFT(Stemmatizer(ARG0, 64, 64), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2))), greaterThan(myFloatIntAdd(myIntToFloat(5), myIntAdd(10, 32)), myFloatMult(myFloatIntAdd(10.0, 255), myIntToFloat(64))), myIntSub(myNot(notEqual(-0.4264393286094119, 0.1980906707621619)), lessThan(passFloat(0.1), myIntToFloat(158))), lessThan(myFloatAdd(myIntToFloat(150), passFloat(0.1)), myFloatDiv(myIntToFloat(100), myFloatIntDiv(0.1, -6))), myAnd(myAnd(lessThanOrEqual(100.0, 10.0), myAnd(falseBool, trueBool)), lessThan(myFloatIntAdd(1.0, 100), myFloatDiv(100.0, 1.0)))), ContourMaskMinAspectRatio(EmadeDataAddFloat(Cv2Log(LocalPoolingMean(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, trueBool), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passFloat(myFloatMult(1.0, 10.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatSub(myFloatIntDiv(ifThenElseFloat(trueBool, 0.1, 100.0), passInt(-2)), myFloatAdd(myFloatIntSub(0.01, 50), passFloat(1.0)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))))
132
ContoursAll(ThresholdBinaryFloat(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 10.0, 100.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1))
11
LocalPoolingMax(LocalPoolingMean(LowpassFourierShift(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 150), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myIntDiv(falseBool, 4)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), myNot(myAnd(falseBool, falseBool)))
24
ContourMaskMinEnclosingCircle(ARG0, passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myIntToFloat(myAnd(falseBool, falseBool)))
12
SobelFilter(Cv2ScaleAbs(MinimumFilter(Cv2DCT(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myIntDiv(8, 1), passFloat(0.1)), TriState.STREAM_TO_FEATURES, Axis.AXIS_1, lessThanOrEqual(1.0, myFloatAdd(3.474025506368065, 100.0)), greaterThanEqual(myFloatMult(1.4417816121668512, 2.8803222037658207), myFloatIntDiv(10.0, 55))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))))
38
ContourMaskMinEnclosingCircle(Supersampling(Cv2NotEqual(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.FULL, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatSub(0.1, 1.0), 2), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatIntAdd(ifThenElseFloat(trueBool, 0.1, -3.825933979275329), passInt(7)))
30
Prerejection(Cv2GreaterThan(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myNot(trueBool), passInt(150), myIntToFloat(5082))
18
ThresholdToZeroPixelFloat(GaussianFilter(ToFloatNorm(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myFloatIntSub(0.01, 0)), MorphCloseCross(Cv2Sqrt(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myAnd(trueBool, trueBool), notEqual(0.42700619744325863, 10.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_0)))
40
MaximumWindow(ARG0, 9, falseBool, 100.0)
5
BitwiseOr(StandardNorm(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0), HashingVectorizer(ARG0, falseBool, trueBool, 100, 81), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.FULL))
19
ToFloat(BayesMulti(ThresholdToZeroFloat(Select3D(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 128, 64, 8, 9, 150, 7005), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myFloatIntDiv(10.0, 0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))))
28
ImageAlignmentECC(CornerDetectionHarris(LowpassFilterMedian(LowpassFourierShift(OtsuBinaryThreshold(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), notEqual(0.01, 0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myIntAdd(greaterThan(10.0, 0.1), myIntDiv(64, 0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myIntAdd(myIntSub(lessThan(-1.5569071332646098, 1.0), myIntAdd(55, 32)), passBool(greaterThan(10.0, 100.0))), passInt(myFloatToInt(myFloatDiv(0.1, 10.0))), myFloatAdd(myFloatIntSub(myFloatDiv(1.0, 1.0), myIntMult(-3, 3)), myFloatIntDiv(myFloatAdd(0.01, 0.1), greaterThan(10.0, 100.0)))), FilterCentroids(k_means_clustering(Fraction(MaximumFilter(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 1, 100.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myOr(trueBool, trueBool)), myNot(lessThanOrEqual(10.0, 0.1)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), myIntAdd(greaterThanEqual(myFloatIntSub(myFloatIntSub(0.1, 8), ifThenElseBool(falseBool, falseBool, falseBool)), myFloatMult(myFloatMult(0.1, 1.869954833051473), myIntToFloat(5728))), passBool(lessThan(ifThenElseFloat(trueBool, 10.0, 1.0), myFloatAdd(0.01, 1.0)))), myFloatMult(myFloatIntAdd(myIntToFloat(equal(0.01, 0.1)), myIntMult(passBool(falseBool), ifThenElseBool(trueBool, falseBool, trueBool))), myFloatIntAdd(myFloatIntMult(myFloatSub(1.0, 0.1), ifThenElseBool(trueBool, falseBool, falseBool)), lessThanOrEqual(myFloatIntDiv(100.0, 2), ifThenElseFloat(falseBool, -1.576691446942525, -0.7349096011325473)))), notEqual(myFloatMult(myFloatMult(myFloatIntDiv(100.0, 7), myFloatMult(-2.834149273754465, 0.1)), myFloatMult(myIntToFloat(8), myIntToFloat(32))), myFloatAdd(myFloatMult(myFloatSub(10.0, 1.0), myFloatIntSub(1.0, 255)), myFloatDiv(myFloatIntAdd(100.0, 6), ifThenElseFloat(falseBool, -0.9614780718571652, 100.0)))), equal(myFloatAdd(myFloatIntDiv(myFloatIntSub(-2.9298023137682536, 1), passInt(64)), myFloatIntDiv(myFloatIntMult(0.01, 2), passBool(trueBool))), myFloatDiv(myFloatIntMult(myFloatDiv(10.0, 1.0), myIntDiv(50, 2)), myFloatIntSub(myFloatAdd(100.0, 1.1298946272551849), notEqual(-0.24572172274385196, -3.8649009111939248)))))
223
ContourMaskRangeAspectRatio(ContourMaskMinEnclosingCircle(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 0.01), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myFloatToInt(-3.9377984780653694), passBool(falseBool))
14
ContourMaskMaxEquDiameter(Round(Cv2Multiply(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1)), passTriState(TriState.STREAM_TO_FEATURES), passAxis(passAxis(Axis.FULL)), passInt(50))
20
MorphCloseRect(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 10, 8)
6
CountVectorizer(MaximumFilter(myICA(BitwiseOr(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), myOr(falseBool, trueBool), ifThenElseBool(trueBool, trueBool, trueBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), myIntSub(myFloatToInt(10.0), ifThenElseBool(trueBool, falseBool, falseBool)), passFloat(myFloatAdd(0.1, 0.01))), myAnd(notEqual(myIntToFloat(64), ifThenElseFloat(falseBool, 0.1, 0.01)), equal(myFloatMult(0.1, 10.0), passFloat(10.0))), notEqual(myFloatAdd(myFloatIntSub(-1.7358915329958169, 8), myFloatIntAdd(100.0, 5)), myFloatSub(myFloatDiv(100.0, 100.0), passFloat(-3.2963906250991384))), myFloatToInt(myFloatIntMult(myFloatIntAdd(0.1, 5), myFloatToInt(1.0835664995529335))), myIntSub(myIntSub(myAnd(trueBool, falseBool), myIntDiv(55, 150)), myIntAdd(myIntMult(4, 2), passInt(6609))))
85
MinimumFilter(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 32, 0.01)
6
HighpassFourierGaussian(MorphCloseEllipse(NNLearner(ARG0, EmbeddingLayer(255, ARG0, gloveWeights, InputLayer(ARG0)), 255), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myAnd(trueBool, falseBool), ifThenElseBool(falseBool, trueBool, falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), passInt(greaterThanEqual(0.01, 0.1)))
32
NumNamedEntities(Cv2Divide(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.FULL))
8
HighpassFourierGaussian(mySelFpr(ARG0, TriState.STREAM_TO_FEATURES, 3, -1.5992028546918546), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), equal(4.811053779351106, -1.7384454033552377))
13
Cv2Divide(WindowBartlettHann(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0), ContourMaskMinSolidity(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 13), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_2))
18
Fraction(ObjectDetection(Select1D(KalmanFilter(MorphTophatRect(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, falseBool, 3), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatIntSub(-2.846416719645023, 64), myFloatIntSub(100.0, 8)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passInt(myFloatToInt(10.0)), myIntSub(lessThanOrEqual(0.01, 100.0), notEqual(0.01, 10.0))), lessThanOrEqual(myIntToFloat(myAnd(trueBool, trueBool)), myFloatIntAdd(ifThenElseFloat(falseBool, 0.01, 1.0), lessThan(2.6156783409283246, -3.4866257930551225))), myFloatIntAdd(myFloatDiv(ifThenElseFloat(falseBool, 10.0, 10.0), myFloatIntMult(-1.4866137766821397, -9)), myOr(passBool(falseBool), myOr(trueBool, falseBool))), myIntToFloat(notEqual(myFloatSub(0.1, 0.1), myFloatIntDiv(1.0, 4128)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), lessThan(myFloatIntMult(passFloat(myFloatIntDiv(0.1, 8)), greaterThan(myFloatDiv(-1.0140044719765817, 10.0), passFloat(1.0))), myFloatSub(myFloatIntSub(myFloatSub(1.0, 10.0), myOr(falseBool, trueBool)), ifThenElseFloat(equal(1.0, 0.01), myFloatIntDiv(1.0, 64), passFloat(1.7916250845425177)))))
111
Cv2Min(ContourMaskMaxLength(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 0.46640438263221196), WindowGaussian(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 1.0), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.FULL))
19
Cv2GreaterThan(ContourMaskMaxSolidity(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 3.4062945594133467), WindowTriangular(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_1))
18
EmadeDataSubtractFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 1.0)
5
MaxLoc(LogDetection(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 0.01, 3.055869691614209, 8, 10.0, 0.01), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1))
14
MatchedFiltering(ContourMaskMaxArea(EmadeDataAddPairTriple(ARG0, ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.FULL, Axis.FULL, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatIntSub(100.0, 4)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), notEqual(myIntToFloat(5), myFloatDiv(10.0, 10.0)))
31
KalmanFilter(MinLoc(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), myFloatIntDiv(10.0, 32), myFloatIntDiv(100.0, 57))
15
ContourMaskMinLength(Cv2AbsDiff(LowpassFilterMedian(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 78), EmadeDataSubtractFloat(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0.01), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), myFloatIntDiv(myFloatIntDiv(100.0, 100), myIntMult(2, 14)))
33
myIfThenElse(ARG0, ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, 3)
8
SavitzkyGolayFilter(WindowFlatTop(WienerFilter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), greaterThan(myIntToFloat(8), myFloatIntAdd(100.0, 10)), myFloatToInt(myFloatAdd(4.642159803784727, 1.0)), myIntMult(greaterThan(2.9739130158698766, 1.0), passBool(falseBool)))
32
GaussianPeakEM(agglomerative_clustering(ARG0, 48), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0))
8
Cv2Divide(ArcTangent(ContourMaskRangeLength(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 7, 1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), InRange(MyDiff(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myIntMult(2, 50), myFloatToInt(0.9186821042990614)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_1)))
38
AbsoluteValue(mySelGenUni(ARG0, TriState.STREAM_TO_FEATURES, 6, 75, 10.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0))
11
ScalarMin(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 7)
5
SobelFilter(WindowPlanckTaper(ContoursMinLength(MyCumSum(EqualizeDisk(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 6), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), greaterThan(1.0, 1.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myIntDiv(equal(10.0, -0.6942869188435976), myFloatToInt(0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatIntMult(myFloatMult(myFloatIntAdd(1.0, 5), myFloatAdd(2.740912950258231, 10.0)), ifThenElseBool(myNot(trueBool), lessThanOrEqual(100.0, 0.1), passBool(trueBool)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))))
62
LogDetection(Cv2LessThan(ARG0, MorphErosionCross(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 5, 7, 8), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatMult(myFloatIntDiv(10.0, 3), myFloatIntDiv(100.0, 9)), myFloatAdd(0.1, 1.0), 2, 0.01, myFloatIntDiv(myIntToFloat(100), myIntAdd(150, 2)))
42
LowpassFilterAverage(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 50)
5
FilterCentroids(ARG0)
2
mySpectralEmbedding(WindowNuttal(Cv2NotEqual(EmadeDataDivideInt(SVCMulti(ARG0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), 128), ContourMaskRangeLength(CornerDetectionEigen(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 55, 64, 0.1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), 70, greaterThan(0.1, 0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), myIntSub(greaterThan(myFloatDiv(myFloatAdd(100.0, 10.0), myFloatAdd(3.0323474012476606, 1.332261136000234)), 100.0), ifThenElseBool(myAnd(lessThanOrEqual(10.0, 1.0), myNot(trueBool)), myNot(falseBool), equal(myFloatSub(-2.729953515448541, 100.0), myFloatIntSub(100.0, 6)))))
78
ThresholdBinaryInverse(EmadeDataAddFloat(ContourMaskRangeEquDiameter(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 150, 10), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatDiv(0.01, 100.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), passFloat(myFloatIntAdd(10.0, 32)))
25
AffinityPropagationClustering(Cv2Multiply(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.AXIS_2), myFloatIntAdd(10.0, 128))
11
EmadeDataAddPair(Log(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1), EmadeDataDividePair(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.FULL, Axis.AXIS_0), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), Axis.AXIS_1, passAxis(Axis.AXIS_1))
19
ContourMaskMaxExtent(Prerejection(MeanWithHole(ContourMaskRangeAspectRatio(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 7, 2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myAnd(falseBool, falseBool), myFloatToInt(3.744190720147474)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), equal(myFloatMult(1.0, 0.1), myFloatAdd(1.5308492332506516, -2.374395204788402)), lessThanOrEqual(myFloatDiv(-0.5194807259975676, 100.0), myFloatIntDiv(100.0, 150)), myFloatIntSub(myFloatSub(100.0, 1.0), myIntAdd(51, 5))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), passInt(passInt(passBool(trueBool))))
57
Round(Cv2Log(MorphDilateRect(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 8, trueBool, 10), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)))
19
Learner(ArcTangent(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), ModifyLearnerInt(LearnerType('EXTRATREES', {'n_estimators': 100, 'max_depth': 6, 'criterion': 0}), 32, 34), ModifyEnsembleFloat(EnsembleType('GRID', None), -1.6382172755005033, 5))
13
MorphDilateEllipse(MyAverager(ARG0, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), greaterThanEqual(10.0, 10.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), equal(myIntToFloat(trueBool), myIntToFloat(6)), ifThenElseBool(trueBool, falseBool, ifThenElseBool(falseBool, falseBool, falseBool)), myIntSub(myIntMult(4, 9), myFloatToInt(1.0)))
34
Select3D(Stemmatizer(ARG0, 0, 3), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myAnd(falseBool, trueBool), myOr(falseBool, falseBool), myFloatToInt(-3.2533742914250805), equal(100.0, 100.0), myIntDiv(9429, 8), myIntAdd(255, 0))
26
ContourMaskMaxExtentEnclosingCircle(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 1.0)
5
MySum(Tfisf(myPCA(ContourMaskMinAspectRatio(WindowBlackman(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 100.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), myFloatIntAdd(0.01, 150)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), myIntMult(myIntDiv(4, 9), greaterThanEqual(10.0, 0.1)), greaterThanEqual(myFloatSub(0.01, 0.1), myFloatSub(0.4234660382392015, 0.01))), myOr(ifThenElseBool(greaterThan(1.0, 1.0), lessThan(0.01, 1.0), ifThenElseBool(falseBool, falseBool, falseBool)), lessThanOrEqual(myFloatSub(0.1, 0.1), myFloatMult(1.0, 10.0))), greaterThan(myFloatIntDiv(myFloatDiv(0.01, 1.0), notEqual(2.0360012860578323, 0.1)), myIntToFloat(myOr(falseBool, falseBool))), myIntMult(myFloatToInt(myFloatIntAdd(1.0, 50)), myFloatToInt(myIntToFloat(4))), notEqual(myFloatDiv(ifThenElseFloat(trueBool, 2.42885643351452, 0.01), myFloatIntSub(-1.2724160164802658, 10)), myFloatIntMult(myFloatDiv(0.1, 0.1), myFloatToInt(1.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))))
97
CountVectorizer(RandomShuffle(mySelFdr(ARG0, TriState.STREAM_TO_STREAM, 99, 100.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2)), lessThan(myFloatIntDiv(-3.735114044215967, 6), myFloatAdd(100.0, 0.01)), lessThanOrEqual(myFloatSub(10.0, 0.01), myFloatAdd(0.1, 0.1)), myIntAdd(passInt(3), passBool(trueBool)), lessThan(myFloatSub(-2.2713066792640246, 100.0), myFloatSub(-0.6546960608601538, 1.0)))
37
SepDetectionWindow(ARG0, 255, 10, 3.193747095809975)
5
MorphTophatRect(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 6, 5)
6
EmadeDataSubtractInt(Cv2ScaleAbs(MinLoc(WindowFlatTop(Tfisf(ARG0, falseBool, 100, 3, 2), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myAnd(ifThenElseBool(lessThan(-2.979924706014281, 2.425543532421644), myNot(falseBool), notEqual(100.0, 1.0)), ifThenElseBool(greaterThan(10.0, 0.01), passBool(trueBool), passBool(trueBool))), equal(myFloatIntSub(myFloatAdd(10.0, 0.01), myAnd(falseBool, falseBool)), myIntToFloat(ifThenElseBool(falseBool, trueBool, trueBool)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), myNot(passBool(ifThenElseBool(greaterThan(0.01, 100.0), passBool(trueBool), notEqual(10.0, 100.0)))))
80
mySpectralEmbedding(HighpassFourierUniform(MatchedFiltering2D(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 50, 1.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myNot(trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), lessThan(myFloatSub(2.5551613265153943, 0.1), ifThenElseFloat(falseBool, 1.0, 0.01)))
25
Cv2Pow(AccumulateWeighted(KalmanFilter(ArcTangent(LowpassFilterGaussian(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 55, 150, 0.01, -0.4686883882860631), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), myFloatIntAdd(myFloatDiv(1.0, 100.0), lessThan(-2.1946026276757213, 10.0)), myFloatSub(myFloatAdd(1.0, 1.0), myFloatAdd(100.0, -2.713441767546639))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myFloatDiv(ifThenElseFloat(lessThanOrEqual(1.0, 10.0), myIntToFloat(0), myFloatAdd(1.0, 0.01)), myFloatIntDiv(myFloatIntDiv(100.0, 66), myOr(trueBool, falseBool)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myNot(equal(myFloatIntAdd(myFloatAdd(10.0, 100.0), myIntSub(32, falseBool)), myIntToFloat(notEqual(-4.189680856909805, 10.0)))))
84
RandomUniform(Cv2GreaterThan(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), ifThenElseBool(trueBool, falseBool, trueBool), lessThanOrEqual(-0.9270506777438401, 2.034647173946146))
19
OtsuBinaryThreshold(EqualizeAdaptHist(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 100.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), notEqual(1.1878308309101886, 1.0))
13
ToUint8(SepDetectionWindow(ContourMaskConvex(rmsHole(MyCumProd(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 128), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), lessThan(10.0, 0.1), notEqual(0.01, -3.4505110710960074)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), lessThanOrEqual(ifThenElseFloat(trueBool, 1.0, 100.0), myFloatIntAdd(0.1, 1))), greaterThan(myFloatDiv(myIntToFloat(8), passFloat(0.1)), myFloatSub(myFloatSub(-1.2024004571658153, 100.0), myFloatIntDiv(100.0, 5))), lessThan(myFloatSub(passFloat(4.048146470179383), myFloatSub(-4.224846585753146, 10.0)), myFloatIntAdd(myFloatDiv(100.0, 0.1), myNot(falseBool))), myIntToFloat(myIntDiv(greaterThanEqual(1.0, 0.1), equal(100.0, 0.1)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))))
77
ArcSine(EmadeDataDivideFloat(MorphTophatEllipse(ImagePeakFinder(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), greaterThanEqual(0.01, -3.7499696617950837), myIntDiv(3, 32)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatIntSub(myFloatIntAdd(0.01, 32), greaterThan(0.01, 100.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))))
38
Log(EqualizeHist(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL))
9
WienerFilter(FractionDouble(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.FULL, 10), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1))
13
MorphGradientCross(MorphTophatCross(Cv2DCT(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), passBool(falseBool), lessThanOrEqual(10.0, 10.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myAnd(myAnd(falseBool, trueBool), passBool(falseBool)), myIntSub(lessThan(10.0, 0.01), myIntMult(308, 5)))
34
ContourMaskRangeSolidity(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 1.0, -3.9667207836151954)
6
FilterCentroids(AdjustConstrastLog(ContourMaskMinEquDiameter(SpectralClustering(ARG0, 64, 10.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), greaterThan(0.1, 100.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatSub(myFloatMult(10.0, 0.1), myFloatMult(0.01, 100.0))))
27
WindowBartlettHann(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2)
4
Correlation(mySelPercentile(ARG0, TriState.FEATURES_TO_FEATURES, 1468, 9), TfidfVectorizer(ARG0, trueBool, 5, 150, 29), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_1))
20
MultiplySpectrum(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, Axis.FULL)
7
ScalarAdd(InRange(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 150, 32), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myFloatIntAdd(1.0, 150))
14
Mutated 123 individuals
Mutating offspring (Remove Layer)
MorphDilateCross(Cv2Subtract(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myFloatToInt(100.0), myIntMult(10, 1468), greaterThan(1.0, 100.0))
MorphDilateCross(Cv2Subtract(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myFloatToInt(100.0), myIntMult(10, 1468), greaterThan(1.0, 100.0))
ThresholdNLargestBinary(ContourMaskMaxEnclosingCircle(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 100.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passBool(falseBool))
ThresholdNLargestBinary(ContourMaskMaxEnclosingCircle(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 100.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passBool(falseBool))
ContourMaskMaxExtentEnclosingCircle(ARG0, passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myFloatMult(myFloatMult(myFloatIntDiv(myIntToFloat(50), lessThanOrEqual(1.0, 0.1)), myFloatMult(10.0, 100.0)), 1.0))
ContourMaskMaxExtentEnclosingCircle(ARG0, passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myFloatMult(myFloatMult(myFloatIntDiv(myIntToFloat(50), lessThanOrEqual(1.0, 0.1)), myFloatMult(10.0, 100.0)), 1.0))
GaussianPeakEM(CopyStreamToTarget(ARG0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(passAxis(Axis.AXIS_1)))
GaussianPeakEM(CopyStreamToTarget(ARG0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(passAxis(Axis.AXIS_1)))
birch_clustering(Fraction(mySelFdr(ARG0, TriState.STREAM_TO_FEATURES, 4, 0.1), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myAnd(greaterThan(ifThenElseFloat(trueBool, 100.0, 100.0), myFloatIntSub(10.0, 100)), lessThan(passFloat(100.0), myFloatIntDiv(4.381976693959436, 6)))), ifThenElseFloat(myNot(myNot(passBool(falseBool))), passFloat(myFloatMult(myFloatAdd(-4.570421268450316, 0.01), myFloatIntSub(0.1, 18))), myFloatMult(myFloatIntSub(myFloatAdd(0.01, 10.0), myFloatToInt(100.0)), passFloat(myFloatIntMult(0.01, 32)))), myNot(ifThenElseBool(passBool(ifThenElseBool(trueBool, trueBool, falseBool)), equal(myIntToFloat(3), myFloatSub(0.1, 0.1)), lessThanOrEqual(myFloatIntMult(100.0, 2), myFloatIntMult(4.84979375267932, 3)))), myIntSub(greaterThanEqual(myFloatIntDiv(myFloatDiv(100.0, 1.1005220885659615), ifThenElseBool(trueBool, trueBool, falseBool)), myFloatIntAdd(myIntToFloat(4), myNot(falseBool))), lessThanOrEqual(myFloatIntAdd(myFloatIntAdd(10.0, 50), myIntMult(5, 3)), myFloatSub(myFloatAdd(1.0, 0.1), ifThenElseFloat(falseBool, 1.0, 0.1)))))
birch_clustering(Fraction(mySelFdr(ARG0, TriState.STREAM_TO_FEATURES, 4, 0.1), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myAnd(greaterThan(ifThenElseFloat(trueBool, 100.0, 100.0), myFloatIntSub(10.0, 100)), lessThan(passFloat(100.0), myFloatIntDiv(4.381976693959436, 6)))), ifThenElseFloat(myNot(myNot(passBool(falseBool))), passFloat(myFloatMult(myFloatAdd(-4.570421268450316, 0.01), myFloatIntSub(0.1, 18))), myFloatMult(myFloatIntSub(myFloatAdd(0.01, 10.0), myFloatToInt(100.0)), passFloat(myFloatIntMult(0.01, 32)))), myNot(ifThenElseBool(passBool(ifThenElseBool(trueBool, trueBool, falseBool)), equal(myIntToFloat(3), myFloatSub(0.1, 0.1)), lessThanOrEqual(myFloatIntMult(100.0, 2), myFloatIntMult(4.84979375267932, 3)))), myIntSub(greaterThanEqual(myFloatIntDiv(myFloatDiv(100.0, 1.1005220885659615), ifThenElseBool(trueBool, trueBool, falseBool)), myFloatIntAdd(myIntToFloat(4), myNot(falseBool))), lessThanOrEqual(myFloatIntAdd(myFloatIntAdd(10.0, 50), myIntMult(5, 3)), myFloatSub(myFloatAdd(1.0, 0.1), ifThenElseFloat(falseBool, 1.0, 0.1)))))
NNLearner(ARG0, OutputLayer(ARG0, GlobalMaxPoolingLayer1D(EmbeddingLayer(7, ARG0, randomUniformWeights, InputLayer(ARG0)))), 100)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(7, ARG0, randomUniformWeights, InputLayer(ARG0))), 100)
CornerDetectionEigen(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 150, 128, 100.0)
CornerDetectionEigen(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 150, 128, 100.0)
NNLearner(ARG0, OutputLayer(ARG0, Conv1DLayer(32, 150, 0, falseBool, 64, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)))), 87)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 87)
NNLearner(ARG0, OutputLayer(ARG0, GlobalMaxPoolingLayer2D(EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)))), 150)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 150)
SpectralClustering(StandardNorm(ARG0, TriState.STREAM_TO_FEATURES, passAxis(passAxis(passAxis(Axis.AXIS_0)))), lessThan(myFloatIntAdd(myFloatIntDiv(myFloatSub(0.1, 0.1), passInt(10)), notEqual(-2.4033966752898586, 0.01)), myFloatSub(0.01, myIntToFloat(lessThanOrEqual(10.0, 100.0)))), 0.1)
SpectralClustering(StandardNorm(ARG0, TriState.STREAM_TO_FEATURES, passAxis(passAxis(passAxis(Axis.AXIS_0)))), lessThan(myFloatIntAdd(myFloatIntDiv(myFloatSub(0.1, 0.1), passInt(10)), notEqual(-2.4033966752898586, 0.01)), myFloatSub(0.01, myIntToFloat(lessThanOrEqual(10.0, 100.0)))), 0.1)
AbsoluteValue(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0)
AbsoluteValue(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0)
ConvolveChannelMerge(ARG0, 1676)
ConvolveChannelMerge(ARG0, 1676)
Daisy(Cv2AbsDiff(Round(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), Prerejection(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 150, 3, 0.01), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThan(myFloatIntDiv(0.1, 95), myFloatIntMult(100.0, 1)), lessThanOrEqual(myFloatIntMult(-2.4033966752898586, 9438), myFloatIntSub(0.1, 4)), myNot(myNot(falseBool)), myOr(ifThenElseBool(trueBool, falseBool, falseBool), greaterThan(0.1, 1.0)), 55)
Daisy(Cv2AbsDiff(Round(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), Prerejection(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 150, 3, 0.01), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThan(myFloatIntDiv(0.1, 95), myFloatIntMult(100.0, 1)), lessThanOrEqual(myFloatIntMult(-2.4033966752898586, 9438), myFloatIntSub(0.1, 4)), myNot(myNot(falseBool)), myOr(ifThenElseBool(trueBool, falseBool, falseBool), greaterThan(0.1, 1.0)), 55)
WindowBartlett(CopyStreamToTarget(ContourMaskRangeEquDiameter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 128, 4)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)))
WindowBartlett(CopyStreamToTarget(ContourMaskRangeEquDiameter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 128, 4)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)))
Cv2Multiply(MultiplyTransposed(MorphErosionEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 3, 5, 32), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myNot(falseBool)), Select1D(NumNamedEntities(ARG0), passTriState(TriState.STREAM_TO_FEATURES), Axis.AXIS_0, myOr(falseBool, falseBool), lessThanOrEqual(0.01, -2.433276027963754)), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_2)))
Cv2Multiply(MultiplyTransposed(MorphErosionEllipse(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 3, 5, 32), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myNot(falseBool)), Select1D(NumNamedEntities(ARG0), passTriState(TriState.STREAM_TO_FEATURES), Axis.AXIS_0, myOr(falseBool, falseBool), lessThanOrEqual(0.01, -2.433276027963754)), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_2)))
SpectralClustering(mySelFdr(BitwiseNOT(CCorrObjectFilter(StdDeviationHole(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 150, 8), Cv2Divide(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.FULL), myIntDiv(falseBool, 128), myFloatMult(2.712278516880108, 0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), lessThanOrEqual(myFloatAdd(myFloatSub(0.01, 1.0), myFloatMult(0.01, 0.1)), myFloatSub(0.1, myFloatIntAdd(100.0, 32))), myIntToFloat(myOr(greaterThan(1.0, 100.0), lessThanOrEqual(100.0, -3.579735167629683)))), notEqual(myIntToFloat(equal(0.1, myFloatMult(100.0, 0.01))), passFloat(myFloatIntAdd(myFloatIntSub(0.01, 2), ifThenElseBool(falseBool, falseBool, trueBool)))), myFloatMult(myFloatIntDiv(ifThenElseFloat(equal(100.0, 10.0), myFloatIntMult(2.476430078273766, 2), myFloatAdd(100.0, 0.01)), 0), myFloatIntDiv(myFloatIntDiv(myFloatIntAdd(100.0, 128), myNot(trueBool)), lessThanOrEqual(myFloatMult(0.1, 0.01), myFloatIntMult(10.0, 150)))))
SpectralClustering(mySelFdr(BitwiseNOT(CCorrObjectFilter(StdDeviationHole(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 150, 8), Cv2Divide(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.FULL), myIntDiv(falseBool, 128), myFloatMult(2.712278516880108, 0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), lessThanOrEqual(myFloatAdd(myFloatSub(0.01, 1.0), myFloatMult(0.01, 0.1)), myFloatSub(0.1, myFloatIntAdd(100.0, 32))), myIntToFloat(myOr(greaterThan(1.0, 100.0), lessThanOrEqual(100.0, -3.579735167629683)))), notEqual(myIntToFloat(equal(0.1, myFloatMult(100.0, 0.01))), passFloat(myFloatIntAdd(myFloatIntSub(0.01, 2), ifThenElseBool(falseBool, falseBool, trueBool)))), myFloatMult(myFloatIntDiv(ifThenElseFloat(equal(100.0, 10.0), myFloatIntMult(2.476430078273766, 2), myFloatAdd(100.0, 0.01)), 0), myFloatIntDiv(myFloatIntDiv(myFloatIntAdd(100.0, 128), myNot(trueBool)), lessThanOrEqual(myFloatMult(0.1, 0.01), myFloatIntMult(10.0, 150)))))
CreateBBox(LowpassFilterEllipsoid(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 50), WindowHamming(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, falseBool), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_2), myNot(falseBool))
CreateBBox(LowpassFilterEllipsoid(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 50), WindowHamming(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, falseBool), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_2), myNot(falseBool))
mySelKBest(ARG0, TriState.FEATURES_TO_FEATURES, trueBool, 4)
mySelKBest(ARG0, TriState.FEATURES_TO_FEATURES, trueBool, 4)
NNLearner(RandomUniform(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 0, 9), OutputLayer(ARG0, MaxPoolingLayer1D(0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)))), 92)
NNLearner(RandomUniform(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 0, 9), OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 92)
NNLearner(ARG0, OutputLayer(ARG0, ConcatenateLayer3(EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)), EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)), EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0)))), 88)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 88)
NNLearner(ARG0, OutputLayer(ARG0, GlobalMaxPoolingLayer2D(EmbeddingLayer(64, ARG0, randomUniformWeights, InputLayer(ARG0)))), 7)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(64, ARG0, randomUniformWeights, InputLayer(ARG0))), 7)
DBSCANClustering(Cv2NotEqual(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_0), myFloatIntSub(0.1, 78), myFloatIntMult(4.597384690743992, 50))
DBSCANClustering(Cv2NotEqual(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_0), myFloatIntSub(0.1, 78), myFloatIntMult(4.597384690743992, 50))
NNLearner(ARG0, OutputLayer(ARG0, Conv2DLayer(55, 64, 50, falseBool, 255, EmbeddingLayer(100, MyDWT(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 50), randomUniformWeights, InputLayer(ARG0)))), 100)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, MyDWT(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 50), randomUniformWeights, InputLayer(ARG0))), 100)
NNLearner(ARG0, OutputLayer(ARG0, MaxPoolingLayer2D(-7, EmbeddingLayer(6, Cv2LessThanOrEqual(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_2), randomUniformWeights, InputLayer(ARG0)))), 0)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(6, Cv2LessThanOrEqual(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_2), randomUniformWeights, InputLayer(ARG0))), 0)
SelectRange(LocalPoolingMean(EqualizeAdaptHist(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 0.01), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), greaterThanEqual(10.0, 100.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passInt(myAnd(falseBool, falseBool)), myFloatToInt(myFloatIntAdd(100.0, 50)))
SelectRange(LocalPoolingMean(EqualizeAdaptHist(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 0.01), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), greaterThanEqual(10.0, 100.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), passInt(myAnd(falseBool, falseBool)), myFloatToInt(myFloatIntAdd(100.0, 50)))
RichardsonLucy(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 9)
RichardsonLucy(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 9)
GaussianPeakEM(CopyStreamToTarget(ARG0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL))
GaussianPeakEM(CopyStreamToTarget(ARG0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL))
LogDetection(Cv2Pow(MeanFilter(ContourMaskMaxExtentEnclosingCircle(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatToInt(0.1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThan(myFloatDiv(-3.4316643674859906, 100.0), myFloatMult(-3.9664146998609673, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2))), passFloat(myFloatIntAdd(myFloatMult(10.0, 0.01), myFloatToInt(0.01))), ifThenElseFloat(notEqual(myFloatMult(0.1, 0.01), myFloatIntDiv(0.1, 4)), passFloat(myIntToFloat(99)), myFloatIntDiv(ifThenElseFloat(falseBool, 10.0, 0.01), equal(10.0, 0.1))), lessThan(ifThenElseFloat(notEqual(100.0, 0.01), myFloatIntDiv(0.01, 32), myFloatIntDiv(10.0, 64)), myFloatIntDiv(ifThenElseFloat(falseBool, 0.01, -3.1611027872158415), lessThan(0.01, 0.01))), myFloatMult(myFloatMult(myFloatDiv(10.0, 1.0), myFloatIntMult(0.1, 83)), myFloatAdd(myFloatDiv(-0.19263036148403323, -1.3909339498826565), myFloatIntSub(0.01, 10))), myFloatMult(myIntToFloat(myIntSub(4, 1)), myFloatDiv(myFloatIntSub(-4.661708200468498, 0), myIntToFloat(64))))
LogDetection(Cv2Pow(MeanFilter(ContourMaskMaxExtentEnclosingCircle(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatToInt(0.1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThan(myFloatDiv(-3.4316643674859906, 100.0), myFloatMult(-3.9664146998609673, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2))), passFloat(myFloatIntAdd(myFloatMult(10.0, 0.01), myFloatToInt(0.01))), ifThenElseFloat(notEqual(myFloatMult(0.1, 0.01), myFloatIntDiv(0.1, 4)), passFloat(myIntToFloat(99)), myFloatIntDiv(ifThenElseFloat(falseBool, 10.0, 0.01), equal(10.0, 0.1))), lessThan(ifThenElseFloat(notEqual(100.0, 0.01), myFloatIntDiv(0.01, 32), myFloatIntDiv(10.0, 64)), myFloatIntDiv(ifThenElseFloat(falseBool, 0.01, -3.1611027872158415), lessThan(0.01, 0.01))), myFloatMult(myFloatMult(myFloatDiv(10.0, 1.0), myFloatIntMult(0.1, 83)), myFloatAdd(myFloatDiv(-0.19263036148403323, -1.3909339498826565), myFloatIntSub(0.01, 10))), myFloatMult(myIntToFloat(myIntSub(4, 1)), myFloatDiv(myFloatIntSub(-4.661708200468498, 0), myIntToFloat(64))))
MorphTophatEllipse(ContourMask(ECDF(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 7), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), ifThenElseBool(myOr(falseBool, falseBool), equal(0.01, 0.01), equal(10.0, -3.3733985464249336)), myIntSub(lessThan(0.01, 100.0), notEqual(0.01, 0.01)))
MorphTophatEllipse(ContourMask(ECDF(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 7), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), ifThenElseBool(myOr(falseBool, falseBool), equal(0.01, 0.01), equal(10.0, -3.3733985464249336)), myIntSub(lessThan(0.01, 100.0), notEqual(0.01, 0.01)))
MeanWithHole(Hog(EmadeDataNumpyMultiplyFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 100.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myAnd(falseBool, trueBool), lessThan(1.0, 100.0), passInt(trueBool), passInt(10)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), greaterThan(myIntToFloat(32), ifThenElseFloat(falseBool, 0.01, 0.08380888567614964)), myIntAdd(ifThenElseBool(trueBool, falseBool, trueBool), myIntSub(1, 100)))
MeanWithHole(Hog(EmadeDataNumpyMultiplyFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 100.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myAnd(falseBool, trueBool), lessThan(1.0, 100.0), passInt(trueBool), passInt(10)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), greaterThan(myIntToFloat(32), ifThenElseFloat(falseBool, 0.01, 0.08380888567614964)), myIntAdd(ifThenElseBool(trueBool, falseBool, trueBool), myIntSub(1, 100)))
WienerFilter(MedianFilterHole(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 7, -10), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0))
WienerFilter(MedianFilterHole(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 7, -10), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0))
StdDeviationHoleCustom(MyNorm(WindowHann(ThresholdBinaryInverse(Cv2Divide(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatSub(0.1, 1.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), notEqual(myFloatIntAdd(1.0, 7), myIntToFloat(3))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_0))), ifThenElseBool(myAnd(passBool(trueBool), myOr(falseBool, trueBool)), ifThenElseBool(greaterThan(100.0, 1.3042473324992523), passBool(trueBool), myOr(trueBool, falseBool)), myAnd(greaterThan(1.0, 10.0), ifThenElseBool(falseBool, trueBool, falseBool)))), MyDCT(PeakFinder(MyCumProd(ArcTangent(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), passBool(trueBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myFloatDiv(myFloatAdd(0.01, 1.0), myFloatDiv(100.0, 0.1)), passBool(myAnd(trueBool, trueBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_0))), lessThan(ifThenElseFloat(passBool(falseBool), myIntToFloat(32), myFloatSub(100.0, 10.0)), myFloatDiv(myFloatIntMult(0.1, 10), passFloat(0.01))), greaterThanEqual(myIntToFloat(myAnd(falseBool, falseBool)), myFloatDiv(myFloatIntSub(0.1, 50), ifThenElseFloat(trueBool, 0.01, 1.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), myIntMult(ifThenElseBool(passBool(lessThan(10.0, 0.01)), ifThenElseBool(greaterThanEqual(100.0, 0.1), myOr(trueBool, trueBool), greaterThanEqual(1.3580484825165398, 100.0)), ifThenElseBool(equal(0.01, 1.0), notEqual(100.0, -3.2800340559325), notEqual(100.0, 1.652410072834714))), myIntMult(myNot(myNot(falseBool)), lessThan(myFloatMult(10.0, 0.01), myFloatDiv(0.01, 0.01)))), greaterThan(myFloatAdd(myFloatSub(myFloatMult(0.1, 0.1), myFloatIntMult(1.0, 100)), ifThenElseFloat(myAnd(falseBool, falseBool), myFloatIntMult(100.0, 50), myFloatIntAdd(10.0, 10))), passFloat(myFloatIntAdd(myFloatIntDiv(10.0, 1), greaterThanEqual(0.01, 10.0)))))
StdDeviationHoleCustom(MyNorm(WindowHann(ThresholdBinaryInverse(Cv2Divide(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatSub(0.1, 1.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), notEqual(myFloatIntAdd(1.0, 7), myIntToFloat(3))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_0))), ifThenElseBool(myAnd(passBool(trueBool), myOr(falseBool, trueBool)), ifThenElseBool(greaterThan(100.0, 1.3042473324992523), passBool(trueBool), myOr(trueBool, falseBool)), myAnd(greaterThan(1.0, 10.0), ifThenElseBool(falseBool, trueBool, falseBool)))), MyDCT(PeakFinder(MyCumProd(ArcTangent(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), passBool(trueBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myFloatDiv(myFloatAdd(0.01, 1.0), myFloatDiv(100.0, 0.1)), passBool(myAnd(trueBool, trueBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_0))), lessThan(ifThenElseFloat(passBool(falseBool), myIntToFloat(32), myFloatSub(100.0, 10.0)), myFloatDiv(myFloatIntMult(0.1, 10), passFloat(0.01))), greaterThanEqual(myIntToFloat(myAnd(falseBool, falseBool)), myFloatDiv(myFloatIntSub(0.1, 50), ifThenElseFloat(trueBool, 0.01, 1.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), myIntMult(ifThenElseBool(passBool(lessThan(10.0, 0.01)), ifThenElseBool(greaterThanEqual(100.0, 0.1), myOr(trueBool, trueBool), greaterThanEqual(1.3580484825165398, 100.0)), ifThenElseBool(equal(0.01, 1.0), notEqual(100.0, -3.2800340559325), notEqual(100.0, 1.652410072834714))), myIntMult(myNot(myNot(falseBool)), lessThan(myFloatMult(10.0, 0.01), myFloatDiv(0.01, 0.01)))), greaterThan(myFloatAdd(myFloatSub(myFloatMult(0.1, 0.1), myFloatIntMult(1.0, 100)), ifThenElseFloat(myAnd(falseBool, falseBool), myFloatIntMult(100.0, 50), myFloatIntAdd(10.0, 10))), passFloat(myFloatIntAdd(myFloatIntDiv(10.0, 1), greaterThanEqual(0.01, 10.0)))))
Cv2TemplateMatching(SubtractSaturate(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.AXIS_2), greaterThanEqual(0.1, 0.1), myIntMult(9, 1))
Cv2TemplateMatching(SubtractSaturate(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.AXIS_2), greaterThanEqual(0.1, 0.1), myIntMult(9, 1))
SetToZeroIf<Data&Factor(ARG0, MyInformedSearch(ContourMaskMaxArea(BitwiseOr(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatDiv(3.902935830697686, 10.0)), mySelPercentile(ArcCosine(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), myNot(trueBool), myFloatToInt(10.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.FULL)), greaterThanEqual(myFloatAdd(0.1, 1.0), myFloatIntSub(10.0, 150)), ifThenElseFloat(myAnd(trueBool, trueBool), myFloatDiv(-1.069937810499355, 100.0), myFloatMult(0.1, 0.01))), TriState.FEATURES_TO_FEATURES, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), Axis.AXIS_1, 32)
SetToZeroIf<Data&Factor(ARG0, MyInformedSearch(ContourMaskMaxArea(BitwiseOr(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatDiv(3.902935830697686, 10.0)), mySelPercentile(ArcCosine(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), myNot(trueBool), myFloatToInt(10.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.FULL)), greaterThanEqual(myFloatAdd(0.1, 1.0), myFloatIntSub(10.0, 150)), ifThenElseFloat(myAnd(trueBool, trueBool), myFloatDiv(-1.069937810499355, 100.0), myFloatMult(0.1, 0.01))), TriState.FEATURES_TO_FEATURES, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), Axis.AXIS_1, 32)
ContourMaskMaxExtentEnclosingCircle(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 0.8613375867044546)
ContourMaskMaxExtentEnclosingCircle(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 0.8613375867044546)
ContourMaskRangeExtent(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 55, trueBool)
ContourMaskRangeExtent(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 55, trueBool)
CrossCorrelation(SavitzkyGolayFilter(BitwiseXOr(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), notEqual(0.9603154592969974, 3.544866284379122), passInt(255), myIntSub(6940, 8142)), Round(ContoursMaxArea(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 128), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.AXIS_2)))
CrossCorrelation(SavitzkyGolayFilter(BitwiseXOr(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), notEqual(0.9603154592969974, 3.544866284379122), passInt(255), myIntSub(6940, 8142)), Round(ContoursMaxArea(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 128), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.AXIS_2)))
SelectRange(adf_0(ARG0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), greaterThan(1.0, 100.0), notEqual(1.0, 0.1))
SelectRange(adf_0(ARG0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), greaterThan(1.0, 100.0), notEqual(1.0, 0.1))
ThresholdBinaryInverseMask(MorphOpenCross(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, -8, 1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myFloatAdd(10.0, 4.8026361294134485))
ThresholdBinaryInverseMask(MorphOpenCross(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, -8, 1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myFloatAdd(10.0, 4.8026361294134485))
MyCumProd(MorphOpenCross(EmadeDataAddInt(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 5), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myIntMult(55, 50), myFloatToInt(0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passBool(notEqual(100.0, 0.1)))
MyCumProd(MorphOpenCross(EmadeDataAddInt(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 5), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myIntMult(55, 50), myFloatToInt(0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passBool(notEqual(100.0, 0.1)))
HighpassFourierEllipsoid(ContourMaskRangeExtentEnclosingCircle(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, trueBool, 0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), ifThenElseBool(falseBool, trueBool, trueBool))
HighpassFourierEllipsoid(ContourMaskRangeExtentEnclosingCircle(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, trueBool, 0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), ifThenElseBool(falseBool, trueBool, trueBool))
ArcTangent(adf_1(ARG0), TriState.STREAM_TO_STREAM, Axis.FULL)
ArcTangent(adf_1(ARG0), TriState.STREAM_TO_STREAM, Axis.FULL)
EmadeDataDivideFloat(Cv2Sqrt(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatIntSub(2.84640879060042, 4))
EmadeDataDivideFloat(Cv2Sqrt(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatIntSub(2.84640879060042, 4))
Tfisf(ThresholdBinaryFloat(ARG0, TriState.FEATURES_TO_FEATURES, passAxis(Axis.AXIS_2), -2.9850907703642795, 100.0), passBool(trueBool), myNot(trueBool), ifThenElseBool(trueBool, trueBool, trueBool), myIntSub(2, 55))
Tfisf(ThresholdBinaryFloat(ARG0, TriState.FEATURES_TO_FEATURES, passAxis(Axis.AXIS_2), -2.9850907703642795, 100.0), passBool(trueBool), myNot(trueBool), ifThenElseBool(trueBool, trueBool, trueBool), myIntSub(2, 55))
Cv2AbsDiff(myPCA(ContourMaskMaxExtent(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 2), passTriState(TriState.STREAM_TO_FEATURES), greaterThan(0.01, 0.01), ifThenElseBool(falseBool, falseBool, falseBool)), RemoveFeature(ScalarDivide(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), equal(10.0, 0.01)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), passAxis(passAxis(Axis.AXIS_0)))
Cv2AbsDiff(myPCA(ContourMaskMaxExtent(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 2), passTriState(TriState.STREAM_TO_FEATURES), greaterThan(0.01, 0.01), ifThenElseBool(falseBool, falseBool, falseBool)), RemoveFeature(ScalarDivide(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), equal(10.0, 0.01)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), passAxis(passAxis(Axis.AXIS_0)))
myICA(MorphCloseRect(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 75, 3085), passTriState(TriState.STREAM_TO_FEATURES), equal(100.0, 0.1), passBool(falseBool))
myICA(MorphCloseRect(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 75, 3085), passTriState(TriState.STREAM_TO_FEATURES), equal(100.0, 0.1), passBool(falseBool))
SubtractSaturate(Cv2iDCT(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), EmadeDataNumpyMultiplyInt(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 0), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_1))
SubtractSaturate(Cv2iDCT(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), EmadeDataNumpyMultiplyInt(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 0), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_1))
Hog(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, falseBool, 5, 50, 50)
Hog(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, falseBool, 5, 50, 50)
Tfisf(ContourMaskMinLength(ContourMaskConvex(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, falseBool), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myFloatIntDiv(100.0, 64)), myNot(trueBool), myOr(equal(3.8139005120978506, 0.1), ifThenElseBool(falseBool, falseBool, trueBool)), myAnd(myAnd(trueBool, falseBool), falseBool), passInt(notEqual(-0.49742443561056326, 1.4542023334113585)))
Tfisf(ContourMaskMinLength(ContourMaskConvex(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, falseBool), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myFloatIntDiv(100.0, 64)), myNot(trueBool), myOr(equal(3.8139005120978506, 0.1), ifThenElseBool(falseBool, falseBool, trueBool)), myAnd(myAnd(trueBool, falseBool), falseBool), passInt(notEqual(-0.49742443561056326, 1.4542023334113585)))
MorphOpenCross(MultiplyTransposed(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, falseBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myOr(falseBool, falseBool), lessThanOrEqual(10.0, 100.0))
MorphOpenCross(MultiplyTransposed(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, falseBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myOr(falseBool, falseBool), lessThanOrEqual(10.0, 100.0))
HighpassSobelDerivative(agglomerative_clustering(ARG0, 10), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myIntSub(100, 7), lessThanOrEqual(2.8878689330896714, 1.0), myAnd(falseBool, falseBool), greaterThan(0.01, 0.01), myIntSub(7319, 9))
HighpassSobelDerivative(agglomerative_clustering(ARG0, 10), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myIntSub(100, 7), lessThanOrEqual(2.8878689330896714, 1.0), myAnd(falseBool, falseBool), greaterThan(0.01, 0.01), myIntSub(7319, 9))
ImageAlignmentECC(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_2, Axis.FULL, 19, 10.0, 2643, 91)
ImageAlignmentECC(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_2, Axis.FULL, 19, 10.0, 2643, 91)
LowpassFilterMedian(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, trueBool)
LowpassFilterMedian(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, trueBool)
ContoursAll(ThresholdBinaryFloat(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 10.0, 100.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1))
ContoursAll(ThresholdBinaryFloat(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 10.0, 100.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1))
LocalPoolingMax(LocalPoolingMean(LowpassFourierShift(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 150), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myIntDiv(falseBool, 4)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), myNot(myAnd(falseBool, falseBool)))
LocalPoolingMax(LocalPoolingMean(LowpassFourierShift(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 150), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myIntDiv(falseBool, 4)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), myNot(myAnd(falseBool, falseBool)))
ContourMaskMinEnclosingCircle(ARG0, passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myIntToFloat(myAnd(falseBool, falseBool)))
ContourMaskMinEnclosingCircle(ARG0, passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myIntToFloat(myAnd(falseBool, falseBool)))
SobelFilter(Cv2ScaleAbs(MinimumFilter(Cv2DCT(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myIntDiv(8, 1), passFloat(0.1)), TriState.STREAM_TO_FEATURES, Axis.AXIS_1, lessThanOrEqual(1.0, myFloatAdd(3.474025506368065, 100.0)), greaterThanEqual(myFloatMult(1.4417816121668512, 2.8803222037658207), myFloatIntDiv(10.0, 55))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))))
SobelFilter(Cv2ScaleAbs(MinimumFilter(Cv2DCT(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myIntDiv(8, 1), passFloat(0.1)), TriState.STREAM_TO_FEATURES, Axis.AXIS_1, lessThanOrEqual(1.0, myFloatAdd(3.474025506368065, 100.0)), greaterThanEqual(myFloatMult(1.4417816121668512, 2.8803222037658207), myFloatIntDiv(10.0, 55))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))))
ContourMaskMinEnclosingCircle(Supersampling(Cv2NotEqual(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.FULL, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatSub(0.1, 1.0), 2), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatIntAdd(ifThenElseFloat(trueBool, 0.1, -3.825933979275329), passInt(7)))
ContourMaskMinEnclosingCircle(Supersampling(Cv2NotEqual(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.FULL, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatSub(0.1, 1.0), 2), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatIntAdd(ifThenElseFloat(trueBool, 0.1, -3.825933979275329), passInt(7)))
ScalarAdd(RandomUniform(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 255, 0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatIntAdd(2.5524071259889265, 3))
ScalarAdd(RandomUniform(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 255, 0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatIntAdd(2.5524071259889265, 3))
ThresholdToZeroPixelFloat(GaussianFilter(ToFloatNorm(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myFloatIntSub(0.01, 0)), MorphCloseCross(Cv2Sqrt(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myAnd(trueBool, trueBool), notEqual(0.42700619744325863, 10.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_0)))
ThresholdToZeroPixelFloat(GaussianFilter(ToFloatNorm(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myFloatIntSub(0.01, 0)), MorphCloseCross(Cv2Sqrt(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myAnd(trueBool, trueBool), notEqual(0.42700619744325863, 10.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_0)))
MaximumWindow(ARG0, 9, falseBool, 100.0)
MaximumWindow(ARG0, 9, falseBool, 100.0)
BitwiseOr(StandardNorm(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0), HashingVectorizer(ARG0, falseBool, trueBool, 100, 81), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.FULL))
BitwiseOr(StandardNorm(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0), HashingVectorizer(ARG0, falseBool, trueBool, 100, 81), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.FULL))
ToFloat(BayesMulti(ThresholdToZeroFloat(Select3D(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 128, 64, 8, 9, 150, 7005), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myFloatIntDiv(10.0, 0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))))
ToFloat(BayesMulti(ThresholdToZeroFloat(Select3D(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 128, 64, 8, 9, 150, 7005), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myFloatIntDiv(10.0, 0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))))
ContourMaskMinArea(MorphTophatRect(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 55, 32), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myIntToFloat(22))
ContourMaskMinArea(MorphTophatRect(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 55, 32), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myIntToFloat(22))
ContourMaskRangeAspectRatio(ContourMaskMinEnclosingCircle(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 0.01), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myFloatToInt(-3.9377984780653694), passBool(falseBool))
ContourMaskRangeAspectRatio(ContourMaskMinEnclosingCircle(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 0.01), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myFloatToInt(-3.9377984780653694), passBool(falseBool))
ContourMaskMaxEquDiameter(Round(Cv2Multiply(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1)), passTriState(TriState.STREAM_TO_FEATURES), passAxis(passAxis(Axis.FULL)), passInt(50))
ContourMaskMaxEquDiameter(Round(Cv2Multiply(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1)), passTriState(TriState.STREAM_TO_FEATURES), passAxis(passAxis(Axis.FULL)), passInt(50))
EmadeDataAddFloat(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, -4.262732263538723)
EmadeDataAddFloat(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, -4.262732263538723)
CountVectorizer(MaximumFilter(myICA(BitwiseOr(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), myOr(falseBool, trueBool), ifThenElseBool(trueBool, trueBool, trueBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), myIntSub(myFloatToInt(10.0), ifThenElseBool(trueBool, falseBool, falseBool)), passFloat(myFloatAdd(0.1, 0.01))), myAnd(notEqual(myIntToFloat(64), ifThenElseFloat(falseBool, 0.1, 0.01)), equal(myFloatMult(0.1, 10.0), passFloat(10.0))), notEqual(myFloatAdd(myFloatIntSub(-1.7358915329958169, 8), myFloatIntAdd(100.0, 5)), myFloatSub(myFloatDiv(100.0, 100.0), passFloat(-3.2963906250991384))), myFloatToInt(myFloatIntMult(myFloatIntAdd(0.1, 5), myFloatToInt(1.0835664995529335))), myIntSub(myIntSub(myAnd(trueBool, falseBool), myIntDiv(55, 150)), myIntAdd(myIntMult(4, 2), passInt(6609))))
CountVectorizer(MaximumFilter(myICA(BitwiseOr(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), myOr(falseBool, trueBool), ifThenElseBool(trueBool, trueBool, trueBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), myIntSub(myFloatToInt(10.0), ifThenElseBool(trueBool, falseBool, falseBool)), passFloat(myFloatAdd(0.1, 0.01))), myAnd(notEqual(myIntToFloat(64), ifThenElseFloat(falseBool, 0.1, 0.01)), equal(myFloatMult(0.1, 10.0), passFloat(10.0))), notEqual(myFloatAdd(myFloatIntSub(-1.7358915329958169, 8), myFloatIntAdd(100.0, 5)), myFloatSub(myFloatDiv(100.0, 100.0), passFloat(-3.2963906250991384))), myFloatToInt(myFloatIntMult(myFloatIntAdd(0.1, 5), myFloatToInt(1.0835664995529335))), myIntSub(myIntSub(myAnd(trueBool, falseBool), myIntDiv(55, 150)), myIntAdd(myIntMult(4, 2), passInt(6609))))
MinimumFilter(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 32, 0.01)
MinimumFilter(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 32, 0.01)
HighpassFourierGaussian(MorphCloseEllipse(NNLearner(ARG0, EmbeddingLayer(255, ARG0, gloveWeights, InputLayer(ARG0)), 255), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myAnd(trueBool, falseBool), ifThenElseBool(falseBool, trueBool, falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), passInt(greaterThanEqual(0.01, 0.1)))
HighpassFourierGaussian(MorphCloseEllipse(NNLearner(ARG0, EmbeddingLayer(255, ARG0, gloveWeights, InputLayer(ARG0)), 255), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myAnd(trueBool, falseBool), ifThenElseBool(falseBool, trueBool, falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), passInt(greaterThanEqual(0.01, 0.1)))
Cv2Equal(GradientMagnitude(ThresholdBinaryInverse(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0.1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myFloatToInt(0.1)), ContourMaskMinEnclosingCircle(EmadeDataMultiplyPair(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatDiv(100.0, 0.1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.AXIS_0)))
Cv2Equal(GradientMagnitude(ThresholdBinaryInverse(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0.1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), myFloatToInt(0.1)), ContourMaskMinEnclosingCircle(EmadeDataMultiplyPair(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatDiv(100.0, 0.1)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.AXIS_0)))
HighpassFourierGaussian(mySelFpr(ARG0, TriState.STREAM_TO_FEATURES, 3, -1.5992028546918546), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), equal(4.811053779351106, -1.7384454033552377))
HighpassFourierGaussian(mySelFpr(ARG0, TriState.STREAM_TO_FEATURES, 3, -1.5992028546918546), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), equal(4.811053779351106, -1.7384454033552377))
Cv2Divide(WindowBartlettHann(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0), ContourMaskMinSolidity(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 13), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_2))
Cv2Divide(WindowBartlettHann(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0), ContourMaskMinSolidity(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 13), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_2))
Cv2Min(ContourMaskMaxLength(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 0.46640438263221196), WindowGaussian(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 1.0), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.FULL))
Cv2Min(ContourMaskMaxLength(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 0.46640438263221196), WindowGaussian(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 1.0), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.FULL))
Cv2GreaterThan(ContourMaskMaxSolidity(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 3.4062945594133467), WindowTriangular(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_1))
Cv2GreaterThan(ContourMaskMaxSolidity(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 3.4062945594133467), WindowTriangular(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_1))
EmadeDataDivideInt(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 3)
EmadeDataDivideInt(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 3)
RegionalMaxima(LowpassFourierGaussian(RegionalMaxima(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 100.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passInt(5)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myIntToFloat(myIntSub(trueBool, 7)))
RegionalMaxima(LowpassFourierGaussian(RegionalMaxima(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 100.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passInt(5)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), myIntToFloat(myIntSub(trueBool, 7)))
MatchedFiltering(ContourMaskMaxArea(EmadeDataAddPairTriple(ARG0, ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.FULL, Axis.FULL, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatIntSub(100.0, 4)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), notEqual(myIntToFloat(5), myFloatDiv(10.0, 10.0)))
MatchedFiltering(ContourMaskMaxArea(EmadeDataAddPairTriple(ARG0, ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.FULL, Axis.FULL, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatIntSub(100.0, 4)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), notEqual(myIntToFloat(5), myFloatDiv(10.0, 10.0)))
ScalarMin(MedianFilterHole(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 32, 100), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myAnd(falseBool, trueBool))
ScalarMin(MedianFilterHole(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 32, 100), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myAnd(falseBool, trueBool))
Cv2Multiply(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_2, Axis.FULL)
Cv2Multiply(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_2, Axis.FULL)
MultiplySpectrum(EmadeDataAddInt(WindowBlackmanHarris(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myAnd(falseBool, falseBool)), adf_2(LowpassFourierGaussian(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 3)), passTriState(TriState.STREAM_TO_FEATURES), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), Axis.AXIS_1)
MultiplySpectrum(EmadeDataAddInt(WindowBlackmanHarris(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myAnd(falseBool, falseBool)), adf_2(LowpassFourierGaussian(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 3)), passTriState(TriState.STREAM_TO_FEATURES), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), Axis.AXIS_1)
Prerejection(LowpassFourierShift(Log(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), lessThanOrEqual(100.0, 1.9906882412655813)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myIntSub(greaterThanEqual(0.01, 0.01), myNot(falseBool)), lessThan(myFloatAdd(100.0, 100.0), ifThenElseFloat(falseBool, -2.7871056941363523, 10.0)), myFloatSub(myFloatIntMult(0.13316223042843944, 2), myIntToFloat(falseBool)))
Prerejection(LowpassFourierShift(Log(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), lessThanOrEqual(100.0, 1.9906882412655813)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myIntSub(greaterThanEqual(0.01, 0.01), myNot(falseBool)), lessThan(myFloatAdd(100.0, 100.0), ifThenElseFloat(falseBool, -2.7871056941363523, 10.0)), myFloatSub(myFloatIntMult(0.13316223042843944, 2), myIntToFloat(falseBool)))
MorphGradientCross(Sentiment(ARG0, trueBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myIntAdd(falseBool, 21), myAnd(trueBool, trueBool))
MorphGradientCross(Sentiment(ARG0, trueBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myIntAdd(falseBool, 21), myAnd(trueBool, trueBool))
Cv2Divide(ArcTangent(ContourMaskRangeLength(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 7, 1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), InRange(MyDiff(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myIntMult(2, 50), myFloatToInt(0.9186821042990614)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_1)))
Cv2Divide(ArcTangent(ContourMaskRangeLength(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 7, 1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), InRange(MyDiff(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myIntMult(2, 50), myFloatToInt(0.9186821042990614)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), passAxis(passAxis(Axis.AXIS_1)))
AbsoluteValue(mySelGenUni(ARG0, TriState.STREAM_TO_FEATURES, 6, 75, 10.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0))
AbsoluteValue(mySelGenUni(ARG0, TriState.STREAM_TO_FEATURES, 6, 75, 10.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0))
ScalarMin(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 7)
ScalarMin(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 7)
SobelFilter(WindowPlanckTaper(ContoursMinLength(MyCumSum(EqualizeDisk(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 6), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), greaterThan(1.0, 1.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myIntDiv(equal(10.0, -0.6942869188435976), myFloatToInt(0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatIntMult(myFloatMult(myFloatIntAdd(1.0, 5), myFloatAdd(2.740912950258231, 10.0)), ifThenElseBool(myNot(trueBool), lessThanOrEqual(100.0, 0.1), passBool(trueBool)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))))
SobelFilter(WindowPlanckTaper(ContoursMinLength(MyCumSum(EqualizeDisk(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 6), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), greaterThan(1.0, 1.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myIntDiv(equal(10.0, -0.6942869188435976), myFloatToInt(0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatIntMult(myFloatMult(myFloatIntAdd(1.0, 5), myFloatAdd(2.740912950258231, 10.0)), ifThenElseBool(myNot(trueBool), lessThanOrEqual(100.0, 0.1), passBool(trueBool)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))))
MorphOpenEllipse(Learner(ThresholdToZeroPixelFloat(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.FULL), ModifyLearnerBool(LearnerType('LIGHTGBM', {'max_depth': -1, 'learning_rate': 0.1, 'boosting_type': 0, 'num_leaves': 31}), trueBool, 5), ModifyEnsembleInt(EnsembleType('BAGGED', None), 32, 4)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), greaterThanEqual(ifThenElseFloat(trueBool, 100.0, 100.0), myFloatIntSub(100.0, 4)), myOr(notEqual(-1.8513797715794955, 10.0), greaterThanEqual(0.01, 2.1925548710351306)))
MorphOpenEllipse(Learner(ThresholdToZeroPixelFloat(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.FULL), ModifyLearnerBool(LearnerType('LIGHTGBM', {'max_depth': -1, 'learning_rate': 0.1, 'boosting_type': 0, 'num_leaves': 31}), trueBool, 5), ModifyEnsembleInt(EnsembleType('BAGGED', None), 32, 4)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), greaterThanEqual(ifThenElseFloat(trueBool, 100.0, 100.0), myFloatIntSub(100.0, 4)), myOr(notEqual(-1.8513797715794955, 10.0), greaterThanEqual(0.01, 2.1925548710351306)))
SkiMedianFilter(MorphCloseRect(SavitzkyGolayFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 50, 6, 5), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myIntSub(3, 3), ifThenElseBool(trueBool, trueBool, falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), passInt(myIntDiv(55, 10)))
SkiMedianFilter(MorphCloseRect(SavitzkyGolayFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 50, 6, 5), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myIntSub(3, 3), ifThenElseBool(trueBool, trueBool, falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), passInt(myIntDiv(55, 10)))
mySpectralEmbedding(WindowNuttal(Cv2NotEqual(EmadeDataDivideInt(SVCMulti(ARG0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), 128), ContourMaskRangeLength(CornerDetectionEigen(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 55, 64, 0.1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), 70, greaterThan(0.1, 0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), myIntSub(greaterThan(myFloatDiv(myFloatAdd(100.0, 10.0), myFloatAdd(3.0323474012476606, 1.332261136000234)), 100.0), ifThenElseBool(myAnd(lessThanOrEqual(10.0, 1.0), myNot(trueBool)), myNot(falseBool), equal(myFloatSub(-2.729953515448541, 100.0), myFloatIntSub(100.0, 6)))))
mySpectralEmbedding(WindowNuttal(Cv2NotEqual(EmadeDataDivideInt(SVCMulti(ARG0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), 128), ContourMaskRangeLength(CornerDetectionEigen(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 55, 64, 0.1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), 70, greaterThan(0.1, 0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), myIntSub(greaterThan(myFloatDiv(myFloatAdd(100.0, 10.0), myFloatAdd(3.0323474012476606, 1.332261136000234)), 100.0), ifThenElseBool(myAnd(lessThanOrEqual(10.0, 1.0), myNot(trueBool)), myNot(falseBool), equal(myFloatSub(-2.729953515448541, 100.0), myFloatIntSub(100.0, 6)))))
ContourMaskMinLength(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 0.1)
ContourMaskMinLength(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 0.1)
AffinityPropagationClustering(Cv2Multiply(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.AXIS_2), myFloatIntAdd(10.0, 128))
AffinityPropagationClustering(Cv2Multiply(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.AXIS_2), myFloatIntAdd(10.0, 128))
LowpassFilterGaussian(ContoursMinArea(Cv2AddWeighted(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_2, 150, 9), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myOr(falseBool, falseBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), lessThan(myFloatDiv(-1.156550656374904, 100.0), myFloatIntAdd(1.0, 255)), myOr(equal(0.9276108821308977, 100.0), myOr(falseBool, trueBool)), myFloatMult(myFloatDiv(100.0, 1.0), myFloatDiv(0.07717185372101643, 100.0)), passFloat(myFloatAdd(100.0, 100.0)))
LowpassFilterGaussian(ContoursMinArea(Cv2AddWeighted(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_2, 150, 9), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myOr(falseBool, falseBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), lessThan(myFloatDiv(-1.156550656374904, 100.0), myFloatIntAdd(1.0, 255)), myOr(equal(0.9276108821308977, 100.0), myOr(falseBool, trueBool)), myFloatMult(myFloatDiv(100.0, 1.0), myFloatDiv(0.07717185372101643, 100.0)), passFloat(myFloatAdd(100.0, 100.0)))
ContourMaskMaxExtent(Prerejection(MeanWithHole(ContourMaskRangeAspectRatio(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 7, 2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myAnd(falseBool, falseBool), myFloatToInt(3.744190720147474)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), equal(myFloatMult(1.0, 0.1), myFloatAdd(1.5308492332506516, -2.374395204788402)), lessThanOrEqual(myFloatDiv(-0.5194807259975676, 100.0), myFloatIntDiv(100.0, 150)), myFloatIntSub(myFloatSub(100.0, 1.0), myIntAdd(51, 5))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), passInt(passInt(passBool(trueBool))))
ContourMaskMaxExtent(Prerejection(MeanWithHole(ContourMaskRangeAspectRatio(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 7, 2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myAnd(falseBool, falseBool), myFloatToInt(3.744190720147474)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), equal(myFloatMult(1.0, 0.1), myFloatAdd(1.5308492332506516, -2.374395204788402)), lessThanOrEqual(myFloatDiv(-0.5194807259975676, 100.0), myFloatIntDiv(100.0, 150)), myFloatIntSub(myFloatSub(100.0, 1.0), myIntAdd(51, 5))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), passInt(passInt(passBool(trueBool))))
k_means_clustering(ARG0, 9)
k_means_clustering(ARG0, 9)
BitwiseAnd(MorphDilateRect(MorphCloseCross(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0, 0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), notEqual(100.0, -1.8606177326679605), ifThenElseBool(trueBool, trueBool, trueBool), myAnd(trueBool, trueBool)), Cv2Subtract(MorphErosionRect(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 1, 9, 128), StdDeviationHole(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, falseBool, 6), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), passAxis(passAxis(Axis.AXIS_2)))
BitwiseAnd(MorphDilateRect(MorphCloseCross(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0, 0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), notEqual(100.0, -1.8606177326679605), ifThenElseBool(trueBool, trueBool, trueBool), myAnd(trueBool, trueBool)), Cv2Subtract(MorphErosionRect(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 1, 9, 128), StdDeviationHole(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, falseBool, 6), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), passAxis(passAxis(Axis.AXIS_2)))
mySelFwe(EmadeDataDivideInt(CutDataLead(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, falseBool), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), lessThan(0.1, 1.0622487114710193)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), myAnd(equal(100.0, 1.0), greaterThan(10.0, 10.0)), myIntToFloat(myIntAdd(2, 50)))
mySelFwe(EmadeDataDivideInt(CutDataLead(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, falseBool), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), lessThan(0.1, 1.0622487114710193)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), myAnd(equal(100.0, 1.0), greaterThan(10.0, 10.0)), myIntToFloat(myIntAdd(2, 50)))
MorphDilateEllipse(MyAverager(ARG0, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), greaterThanEqual(10.0, 10.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), equal(myIntToFloat(trueBool), myIntToFloat(6)), ifThenElseBool(trueBool, falseBool, ifThenElseBool(falseBool, falseBool, falseBool)), myIntSub(myIntMult(4, 9), myFloatToInt(1.0)))
MorphDilateEllipse(MyAverager(ARG0, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), greaterThanEqual(10.0, 10.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), equal(myIntToFloat(trueBool), myIntToFloat(6)), ifThenElseBool(trueBool, falseBool, ifThenElseBool(falseBool, falseBool, falseBool)), myIntSub(myIntMult(4, 9), myFloatToInt(1.0)))
rmsHole(WindowBlackman(Cosine(ThresholdBinary(ContourMaskRangeLength(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 6, 0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), myFloatIntDiv(10.0, 2), greaterThanEqual(10.0, 0.1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatIntAdd(myFloatIntMult(myFloatIntAdd(0.1, 8), myFloatToInt(1.0)), myNot(myNot(falseBool)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), greaterThan(passFloat(myFloatIntMult(myFloatIntDiv(0.01, 55), passBool(falseBool))), passFloat(myIntToFloat(myIntAdd(50, 10)))), ifThenElseBool(lessThanOrEqual(myFloatIntAdd(myFloatAdd(-2.7795218417238408, 0.1), greaterThanEqual(0.01, 10.0)), myFloatIntAdd(myFloatAdd(0.1, 0.01), myAnd(trueBool, falseBool))), myNot(myOr(greaterThanEqual(0.01, -0.29532310420097385), notEqual(0.1, 1.0))), equal(myFloatIntSub(myFloatIntAdd(0.01, 50), myIntSub(55, 3)), myIntToFloat(passInt(37)))))
rmsHole(WindowBlackman(Cosine(ThresholdBinary(ContourMaskRangeLength(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 6, 0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), myFloatIntDiv(10.0, 2), greaterThanEqual(10.0, 0.1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatIntAdd(myFloatIntMult(myFloatIntAdd(0.1, 8), myFloatToInt(1.0)), myNot(myNot(falseBool)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), greaterThan(passFloat(myFloatIntMult(myFloatIntDiv(0.01, 55), passBool(falseBool))), passFloat(myIntToFloat(myIntAdd(50, 10)))), ifThenElseBool(lessThanOrEqual(myFloatIntAdd(myFloatAdd(-2.7795218417238408, 0.1), greaterThanEqual(0.01, 10.0)), myFloatIntAdd(myFloatAdd(0.1, 0.01), myAnd(trueBool, falseBool))), myNot(myOr(greaterThanEqual(0.01, -0.29532310420097385), notEqual(0.1, 1.0))), equal(myFloatIntSub(myFloatIntAdd(0.01, 50), myIntSub(55, 3)), myIntToFloat(passInt(37)))))
CrossCorrelation(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.FULL, Axis.AXIS_0)
CrossCorrelation(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.FULL, Axis.AXIS_0)
MySum(Tfisf(myPCA(ContourMaskMinAspectRatio(WindowBlackman(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 100.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), myFloatIntAdd(0.01, 150)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), myIntMult(myIntDiv(4, 9), greaterThanEqual(10.0, 0.1)), greaterThanEqual(myFloatSub(0.01, 0.1), myFloatSub(0.4234660382392015, 0.01))), myOr(ifThenElseBool(greaterThan(1.0, 1.0), lessThan(0.01, 1.0), ifThenElseBool(falseBool, falseBool, falseBool)), lessThanOrEqual(myFloatSub(0.1, 0.1), myFloatMult(1.0, 10.0))), greaterThan(myFloatIntDiv(myFloatDiv(0.01, 1.0), notEqual(2.0360012860578323, 0.1)), myIntToFloat(myOr(falseBool, falseBool))), myIntMult(myFloatToInt(myFloatIntAdd(1.0, 50)), myFloatToInt(myIntToFloat(4))), notEqual(myFloatDiv(ifThenElseFloat(trueBool, 2.42885643351452, 0.01), myFloatIntSub(-1.2724160164802658, 10)), myFloatIntMult(myFloatDiv(0.1, 0.1), myFloatToInt(1.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))))
MySum(Tfisf(myPCA(ContourMaskMinAspectRatio(WindowBlackman(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 100.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), myFloatIntAdd(0.01, 150)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), myIntMult(myIntDiv(4, 9), greaterThanEqual(10.0, 0.1)), greaterThanEqual(myFloatSub(0.01, 0.1), myFloatSub(0.4234660382392015, 0.01))), myOr(ifThenElseBool(greaterThan(1.0, 1.0), lessThan(0.01, 1.0), ifThenElseBool(falseBool, falseBool, falseBool)), lessThanOrEqual(myFloatSub(0.1, 0.1), myFloatMult(1.0, 10.0))), greaterThan(myFloatIntDiv(myFloatDiv(0.01, 1.0), notEqual(2.0360012860578323, 0.1)), myIntToFloat(myOr(falseBool, falseBool))), myIntMult(myFloatToInt(myFloatIntAdd(1.0, 50)), myFloatToInt(myIntToFloat(4))), notEqual(myFloatDiv(ifThenElseFloat(trueBool, 2.42885643351452, 0.01), myFloatIntSub(-1.2724160164802658, 10)), myFloatIntMult(myFloatDiv(0.1, 0.1), myFloatToInt(1.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))))
AbsDiff(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.FULL)
AbsDiff(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.FULL)
SepDetectionWindow(ARG0, 255, 10, 3.193747095809975)
SepDetectionWindow(ARG0, 255, 10, 3.193747095809975)
AdjustConstrastLog(EmadeDataMultiplyInt(WindowHann(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, falseBool), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passInt(-9)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatDiv(ifThenElseFloat(trueBool, -1.054845708725043, 1.0), myFloatIntDiv(0.1, 6)))
AdjustConstrastLog(EmadeDataMultiplyInt(WindowHann(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, falseBool), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), passInt(-9)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatDiv(ifThenElseFloat(trueBool, -1.054845708725043, 1.0), myFloatIntDiv(0.1, 6)))
Round(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0)
Round(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0)
mySpectralEmbedding(HighpassFourierUniform(MatchedFiltering2D(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 50, 1.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myNot(trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), lessThan(myFloatSub(2.5551613265153943, 0.1), ifThenElseFloat(falseBool, 1.0, 0.01)))
mySpectralEmbedding(HighpassFourierUniform(MatchedFiltering2D(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 50, 1.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myNot(trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), lessThan(myFloatSub(2.5551613265153943, 0.1), ifThenElseFloat(falseBool, 1.0, 0.01)))
Cv2Pow(AccumulateWeighted(KalmanFilter(ArcTangent(LowpassFilterGaussian(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 55, 150, 0.01, -0.4686883882860631), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), myFloatIntAdd(myFloatDiv(1.0, 100.0), lessThan(-2.1946026276757213, 10.0)), myFloatSub(myFloatAdd(1.0, 1.0), myFloatAdd(100.0, -2.713441767546639))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myFloatDiv(ifThenElseFloat(lessThanOrEqual(1.0, 10.0), myIntToFloat(0), myFloatAdd(1.0, 0.01)), myFloatIntDiv(myFloatIntDiv(100.0, 66), myOr(trueBool, falseBool)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myNot(equal(myFloatIntAdd(myFloatAdd(10.0, 100.0), myIntSub(32, falseBool)), myIntToFloat(notEqual(-4.189680856909805, 10.0)))))
Cv2Pow(AccumulateWeighted(KalmanFilter(ArcTangent(LowpassFilterGaussian(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 55, 150, 0.01, -0.4686883882860631), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), myFloatIntAdd(myFloatDiv(1.0, 100.0), lessThan(-2.1946026276757213, 10.0)), myFloatSub(myFloatAdd(1.0, 1.0), myFloatAdd(100.0, -2.713441767546639))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myFloatDiv(ifThenElseFloat(lessThanOrEqual(1.0, 10.0), myIntToFloat(0), myFloatAdd(1.0, 0.01)), myFloatIntDiv(myFloatIntDiv(100.0, 66), myOr(trueBool, falseBool)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myNot(equal(myFloatIntAdd(myFloatAdd(10.0, 100.0), myIntSub(32, falseBool)), myIntToFloat(notEqual(-4.189680856909805, 10.0)))))
CountVectorizer(mySelFpr(ScalarMultiply(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 0.7946455709500295), passTriState(TriState.STREAM_TO_STREAM), notEqual(0.01, -3.517454728155557), myFloatDiv(10.0, 10.0)), greaterThanEqual(myFloatIntMult(0.01, 64), myFloatIntDiv(0.1, 8)), myFloatToInt(myFloatIntMult(10.0, 10)), myIntSub(ifThenElseBool(trueBool, falseBool, falseBool), notEqual(10.0, 4.5383330207076185)), ifThenElseBool(passBool(falseBool), passBool(falseBool), passBool(trueBool)))
CountVectorizer(mySelFpr(ScalarMultiply(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 0.7946455709500295), passTriState(TriState.STREAM_TO_STREAM), notEqual(0.01, -3.517454728155557), myFloatDiv(10.0, 10.0)), greaterThanEqual(myFloatIntMult(0.01, 64), myFloatIntDiv(0.1, 8)), myFloatToInt(myFloatIntMult(10.0, 10)), myIntSub(ifThenElseBool(trueBool, falseBool, falseBool), notEqual(10.0, 4.5383330207076185)), ifThenElseBool(passBool(falseBool), passBool(falseBool), passBool(trueBool)))
StdDeviation(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 6)
StdDeviation(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 6)
EmadeDataDivideInt(CenterOfMass(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), lessThanOrEqual(-3.735166489404045, 10.0))
EmadeDataDivideInt(CenterOfMass(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), lessThanOrEqual(-3.735166489404045, 10.0))
ArcSine(EmadeDataDivideFloat(MorphTophatEllipse(ImagePeakFinder(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), greaterThanEqual(0.01, -3.7499696617950837), myIntDiv(3, 32)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatIntSub(myFloatIntAdd(0.01, 32), greaterThan(0.01, 100.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))))
ArcSine(EmadeDataDivideFloat(MorphTophatEllipse(ImagePeakFinder(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), greaterThanEqual(0.01, -3.7499696617950837), myIntDiv(3, 32)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatIntSub(myFloatIntAdd(0.01, 32), greaterThan(0.01, 100.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))))
MorphErosionEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 100, 2437, 6)
MorphErosionEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 100, 2437, 6)
GradientMagnitude(MorphDilateEllipse(StdDeviation(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 93), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myIntAdd(32, 62), passBool(falseBool), lessThan(1.0, 10.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myIntAdd(greaterThan(1.0, 10.0), equal(1.0, 10.0)))
GradientMagnitude(MorphDilateEllipse(StdDeviation(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 93), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myIntAdd(32, 62), passBool(falseBool), lessThan(1.0, 10.0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myIntAdd(greaterThan(1.0, 10.0), equal(1.0, 10.0)))
MorphGradientCross(MorphTophatCross(Cv2DCT(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), passBool(falseBool), lessThanOrEqual(10.0, 10.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myAnd(myAnd(falseBool, trueBool), passBool(falseBool)), myIntSub(lessThan(10.0, 0.01), myIntMult(308, 5)))
MorphGradientCross(MorphTophatCross(Cv2DCT(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), passBool(falseBool), lessThanOrEqual(10.0, 10.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), myAnd(myAnd(falseBool, trueBool), passBool(falseBool)), myIntSub(lessThan(10.0, 0.01), myIntMult(308, 5)))
ContourMaskRangeSolidity(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 1.0, -3.9667207836151954)
ContourMaskRangeSolidity(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 1.0, -3.9667207836151954)
FilterCentroids(AdjustConstrastLog(ContourMaskMinEquDiameter(SpectralClustering(ARG0, 64, 10.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), greaterThan(0.1, 100.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatSub(myFloatMult(10.0, 0.1), myFloatMult(0.01, 100.0))))
FilterCentroids(AdjustConstrastLog(ContourMaskMinEquDiameter(SpectralClustering(ARG0, 64, 10.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), greaterThan(0.1, 100.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatSub(myFloatMult(10.0, 0.1), myFloatMult(0.01, 100.0))))
GradientMagnitude(mySelFdr(ZeroOneNorm(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), equal(0.1, 0.01), passFloat(4.5228843706966)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), lessThan(myFloatSub(2.836065020186468, 10.0), myFloatIntDiv(-3.969632670433565, 100)))
GradientMagnitude(mySelFdr(ZeroOneNorm(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), equal(0.1, 0.01), passFloat(4.5228843706966)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), lessThan(myFloatSub(2.836065020186468, 10.0), myFloatIntDiv(-3.969632670433565, 100)))
ContourMaskMaxEquDiameter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, falseBool)
ContourMaskMaxEquDiameter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, falseBool)
MorphTophatEllipse(ArcCosine(mySelKBest(EmadeDataIntegerDividePair(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), greaterThanEqual(100.0, 10.0), ifThenElseBool(trueBool, falseBool, falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), passInt(myIntDiv(myIntDiv(50, 10), myIntSub(64, 55))), notEqual(myFloatDiv(myFloatMult(-1.978611455327124, 0.4453096125501288), myIntToFloat(7)), myFloatIntMult(myIntToFloat(8), myOr(trueBool, trueBool))))
MorphTophatEllipse(ArcCosine(mySelKBest(EmadeDataIntegerDividePair(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.AXIS_1), passTriState(TriState.STREAM_TO_FEATURES), greaterThanEqual(100.0, 10.0), ifThenElseBool(trueBool, falseBool, falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))), passInt(myIntDiv(myIntDiv(50, 10), myIntSub(64, 55))), notEqual(myFloatDiv(myFloatMult(-1.978611455327124, 0.4453096125501288), myIntToFloat(7)), myFloatIntMult(myIntToFloat(8), myOr(trueBool, trueBool))))
EmadeDataDivideFloat(Cv2TemplateMatching(ARG0, 15, 64), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passFloat(0.1))
EmadeDataDivideFloat(Cv2TemplateMatching(ARG0, 15, 64), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passFloat(0.1))
Mutated 120 individuals
Mutating offspring (Swap Layer)
Using TensorFlow backend.
/home/athite3-gtri/.conda/envs/emade/lib/python3.6/site-packages/sklearn/utils/deprecation.py:144: FutureWarning: The sklearn.feature_extraction.stop_words module is  deprecated in version 0.22 and will be removed in version 0.24. The corresponding classes / functions should instead be imported from sklearn.feature_extraction.text. Anything that cannot be imported from sklearn.feature_extraction.text is now part of the private API.
  warnings.warn(message, FutureWarning)
[nltk_data] Downloading package punkt to
[nltk_data]     /home/athite3-gtri/nltk_data...
[nltk_data]   Package punkt is already up-to-date!
[nltk_data] Downloading package averaged_perceptron_tagger to
[nltk_data]     /home/athite3-gtri/nltk_data...
[nltk_data]   Package averaged_perceptron_tagger is already up-to-
[nltk_data]       date!
[nltk_data] Downloading package wordnet to
[nltk_data]     /home/athite3-gtri/nltk_data...
[nltk_data]   Package wordnet is already up-to-date!
/home/athite3-gtri/.conda/envs/emade/lib/python3.6/site-packages/pymysql/cursors.py:170: Warning: (1300, "Invalid utf8mb4 character string: '800495'")
  result = self._query(query)
/home/athite3-gtri/.conda/envs/emade/lib/python3.6/site-packages/deap-1.3.1-py3.6-linux-x86_64.egg/deap/tools/emo.py:735: RuntimeWarning: invalid value encountered in double_scalars
  individuals[j].fitness.values[l]
Cv2Sqrt(ARG0, passTriState(TriState.FEATURES_TO_FEATURES), Axis.AXIS_0)
Cv2Sqrt(ARG0, passTriState(TriState.FEATURES_TO_FEATURES), Axis.AXIS_0)
ThresholdNLargestBinary(ContourMaskMaxEnclosingCircle(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 100.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passBool(falseBool))
ThresholdNLargestBinary(ContourMaskMaxEnclosingCircle(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 100.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passBool(falseBool))
GetCentroids(StdDeviationHole(Select2D(Cv2DFTReal(EmadeDataAddPair(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), Axis.AXIS_0), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThan(myFloatIntDiv(0.1, 7), -2.425601875451062), passBool(trueBool), lessThan(myFloatMult(10.0, 100.0), myIntToFloat(7)), myAnd(greaterThan(0.1, 3.0011748839657955), trueBool)), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(Axis.AXIS_0), equal(myFloatIntMult(myFloatIntDiv(0.1, 100), myAnd(falseBool, trueBool)), passFloat(myFloatIntMult(0.01, 32))), passInt(lessThanOrEqual(myFloatDiv(100.0, 10.0), -4.126451103850784))), TriState.FEATURES_TO_FEATURES, Axis.AXIS_2)
GetCentroids(StdDeviationHole(Select2D(Cv2DFTReal(EmadeDataAddPair(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), Axis.AXIS_0), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThan(myFloatIntDiv(0.1, 7), -2.425601875451062), passBool(trueBool), lessThan(myFloatMult(10.0, 100.0), myIntToFloat(7)), myAnd(greaterThan(0.1, 3.0011748839657955), trueBool)), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(Axis.AXIS_0), equal(myFloatIntMult(myFloatIntDiv(0.1, 100), myAnd(falseBool, trueBool)), passFloat(myFloatIntMult(0.01, 32))), passInt(lessThanOrEqual(myFloatDiv(100.0, 10.0), -4.126451103850784))), TriState.FEATURES_TO_FEATURES, Axis.AXIS_2)
ContourMaskMaxExtentEnclosingCircle(ARG0, passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myFloatMult(myFloatMult(myFloatIntDiv(myIntToFloat(50), lessThanOrEqual(1.0, 0.1)), myFloatMult(10.0, 100.0)), 1.0))
ContourMaskMaxExtentEnclosingCircle(ARG0, passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myFloatMult(myFloatMult(myFloatIntDiv(myIntToFloat(50), lessThanOrEqual(1.0, 0.1)), myFloatMult(10.0, 100.0)), 1.0))
WindowGaussian(mySelFwe(ContourMaskMinEquDiameter(Tangent(EdgeDetectionCanny(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 8, 37, 32), TriState.STREAM_TO_FEATURES, passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), equal(myFloatAdd(1.0, 100.0), myFloatSub(100.0, 100.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), myAnd(lessThanOrEqual(myFloatIntSub(0.1, 50), myFloatMult(100.0, 0.1)), notEqual(myFloatIntAdd(1.0, -2), 0.01)), passFloat(myFloatAdd(10.0, myFloatMult(100.0, 10.0)))), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), passFloat(passFloat(ifThenElseFloat(ifThenElseBool(falseBool, falseBool, trueBool), myFloatIntMult(100.0, 5), myFloatAdd(0.01, 1.0)))))
WindowGaussian(mySelFwe(ContourMaskMinEquDiameter(Tangent(EdgeDetectionCanny(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 8, 37, 32), TriState.STREAM_TO_FEATURES, passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), equal(myFloatAdd(1.0, 100.0), myFloatSub(100.0, 100.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), myAnd(lessThanOrEqual(myFloatIntSub(0.1, 50), myFloatMult(100.0, 0.1)), notEqual(myFloatIntAdd(1.0, -2), 0.01)), passFloat(myFloatAdd(10.0, myFloatMult(100.0, 10.0)))), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), passFloat(passFloat(ifThenElseFloat(ifThenElseBool(falseBool, falseBool, trueBool), myFloatIntMult(100.0, 5), myFloatAdd(0.01, 1.0)))))
myVarThresh(ARG0, passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passFloat(myFloatAdd(10.0, 10.0)))
myVarThresh(ARG0, passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passFloat(myFloatAdd(10.0, 10.0)))
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(7, ARG0, randomUniformWeights, InputLayer(ARG0))), 100)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(7, ARG0, randomUniformWeights, InputLayer(ARG0))), 100)
WindowCosine(ThresholdToZero(myPCA(ContourMask(Select3D(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 0, 1002, 7, 10, 4, 9), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passInt(notEqual(10.0, 0.01)), greaterThanEqual(myIntToFloat(6), myIntToFloat(trueBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myFloatMult(myFloatIntMult(ifThenElseFloat(trueBool, 10.0, 0.1), myAnd(falseBool, falseBool)), myFloatSub(myIntToFloat(150), myFloatDiv(100.0, -0.2193816702640552)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))))
WindowCosine(ThresholdToZero(myPCA(ContourMask(Select3D(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 0, 1002, 7, 10, 4, 9), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passInt(notEqual(10.0, 0.01)), greaterThanEqual(myIntToFloat(6), myIntToFloat(trueBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))), myFloatMult(myFloatIntMult(ifThenElseFloat(trueBool, 10.0, 0.1), myAnd(falseBool, falseBool)), myFloatSub(myIntToFloat(150), myFloatDiv(100.0, -0.2193816702640552)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))))
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 150)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 150)
SpectralClustering(StandardNorm(ARG0, TriState.STREAM_TO_FEATURES, passAxis(passAxis(passAxis(Axis.AXIS_0)))), lessThan(myFloatIntAdd(myFloatIntDiv(myFloatSub(0.1, 0.1), passInt(10)), notEqual(-2.4033966752898586, 0.01)), myFloatSub(0.01, myIntToFloat(lessThanOrEqual(10.0, 100.0)))), 0.1)
SpectralClustering(StandardNorm(ARG0, TriState.STREAM_TO_FEATURES, passAxis(passAxis(passAxis(Axis.AXIS_0)))), lessThan(myFloatIntAdd(myFloatIntDiv(myFloatSub(0.1, 0.1), passInt(10)), notEqual(-2.4033966752898586, 0.01)), myFloatSub(0.01, myIntToFloat(lessThanOrEqual(10.0, 100.0)))), 0.1)
MySnapshot(ContourMaskConvex(Cv2Divide(Sine(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), Cv2Max(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), myNot(greaterThanEqual(100.0, 100.0))), EmadeDataAddInt(WienerFilter(ThresholdToZeroPixelFloat(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), lessThanOrEqual(myFloatIntSub(0.01, 128), passFloat(0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), passAxis(passAxis(passAxis(Axis.AXIS_2))), notEqual(ifThenElseFloat(ifThenElseBool(falseBool, trueBool, falseBool), passFloat(2.9900549360085655), ifThenElseFloat(trueBool, 0.01, -4.268745342159392)), myFloatIntDiv(myIntToFloat(255), myIntAdd(4, 128))))
MySnapshot(ContourMaskConvex(Cv2Divide(Sine(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0), Cv2Max(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), myNot(greaterThanEqual(100.0, 100.0))), EmadeDataAddInt(WienerFilter(ThresholdToZeroPixelFloat(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), lessThanOrEqual(myFloatIntSub(0.01, 128), passFloat(0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_0))), passAxis(passAxis(passAxis(Axis.AXIS_2))), notEqual(ifThenElseFloat(ifThenElseBool(falseBool, trueBool, falseBool), passFloat(2.9900549360085655), ifThenElseFloat(trueBool, 0.01, -4.268745342159392)), myFloatIntDiv(myIntToFloat(255), myIntAdd(4, 128))))
SVCMulti(ARG0)
SVCMulti(ARG0)
Daisy(Cv2AbsDiff(Round(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), Prerejection(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 150, 3, 0.01), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThan(myFloatIntDiv(0.1, 95), myFloatIntMult(100.0, 1)), lessThanOrEqual(myFloatIntMult(-2.4033966752898586, 9438), myFloatIntSub(0.1, 4)), myNot(myNot(falseBool)), myOr(ifThenElseBool(trueBool, falseBool, falseBool), greaterThan(0.1, 1.0)), 55)
Daisy(Cv2AbsDiff(Round(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), Prerejection(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 150, 3, 0.01), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), passAxis(Axis.FULL)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThan(myFloatIntDiv(0.1, 95), myFloatIntMult(100.0, 1)), lessThanOrEqual(myFloatIntMult(-2.4033966752898586, 9438), myFloatIntSub(0.1, 4)), myNot(myNot(falseBool)), myOr(ifThenElseBool(trueBool, falseBool, falseBool), greaterThan(0.1, 1.0)), 55)
WindowBartlett(CopyStreamToTarget(ContourMaskRangeEquDiameter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 128, 4)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)))
WindowBartlett(CopyStreamToTarget(ContourMaskRangeEquDiameter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 128, 4)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)))
MultiplySpectrum(Select1D(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, trueBool, 100), WindowTriangular(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), Axis.FULL, passAxis(Axis.AXIS_1))
MultiplySpectrum(Select1D(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, trueBool, 100), WindowTriangular(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_STREAM), Axis.FULL, passAxis(Axis.AXIS_1))
SpectralClustering(mySelFdr(BitwiseNOT(CCorrObjectFilter(StdDeviationHole(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 150, 8), Cv2Divide(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.FULL), myIntDiv(falseBool, 128), myFloatMult(2.712278516880108, 0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), lessThanOrEqual(myFloatAdd(myFloatSub(0.01, 1.0), myFloatMult(0.01, 0.1)), myFloatSub(0.1, myFloatIntAdd(100.0, 32))), myIntToFloat(myOr(greaterThan(1.0, 100.0), lessThanOrEqual(100.0, -3.579735167629683)))), notEqual(myIntToFloat(equal(0.1, myFloatMult(100.0, 0.01))), passFloat(myFloatIntAdd(myFloatIntSub(0.01, 2), ifThenElseBool(falseBool, falseBool, trueBool)))), myFloatMult(myFloatIntDiv(ifThenElseFloat(equal(100.0, 10.0), myFloatIntMult(2.476430078273766, 2), myFloatAdd(100.0, 0.01)), 0), myFloatIntDiv(myFloatIntDiv(myFloatIntAdd(100.0, 128), myNot(trueBool)), lessThanOrEqual(myFloatMult(0.1, 0.01), myFloatIntMult(10.0, 150)))))
SpectralClustering(mySelFdr(BitwiseNOT(CCorrObjectFilter(StdDeviationHole(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 150, 8), Cv2Divide(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.FULL), myIntDiv(falseBool, 128), myFloatMult(2.712278516880108, 0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), lessThanOrEqual(myFloatAdd(myFloatSub(0.01, 1.0), myFloatMult(0.01, 0.1)), myFloatSub(0.1, myFloatIntAdd(100.0, 32))), myIntToFloat(myOr(greaterThan(1.0, 100.0), lessThanOrEqual(100.0, -3.579735167629683)))), notEqual(myIntToFloat(equal(0.1, myFloatMult(100.0, 0.01))), passFloat(myFloatIntAdd(myFloatIntSub(0.01, 2), ifThenElseBool(falseBool, falseBool, trueBool)))), myFloatMult(myFloatIntDiv(ifThenElseFloat(equal(100.0, 10.0), myFloatIntMult(2.476430078273766, 2), myFloatAdd(100.0, 0.01)), 0), myFloatIntDiv(myFloatIntDiv(myFloatIntAdd(100.0, 128), myNot(trueBool)), lessThanOrEqual(myFloatMult(0.1, 0.01), myFloatIntMult(10.0, 150)))))
CreateBBox(LowpassFilterEllipsoid(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 50), WindowHamming(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, falseBool), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_2), myNot(falseBool))
CreateBBox(LowpassFilterEllipsoid(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 50), WindowHamming(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, falseBool), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), passAxis(Axis.AXIS_2), myNot(falseBool))
mySelKBest(ARG0, TriState.FEATURES_TO_FEATURES, trueBool, 4)
mySelKBest(ARG0, TriState.FEATURES_TO_FEATURES, trueBool, 4)
NNLearner(ARG0, OutputLayer(ARG0, AttentionLayer(EmbeddingLayer(8, ARG0, randomUniformWeights, OutputLayer(ARG0, EmbeddingLayer(3, ARG0, randomUniformWeights, InputLayer(ARG0)))), EmbeddingLayer(8, ARG0, randomUniformWeights, OutputLayer(ARG0, EmbeddingLayer(3, ARG0, randomUniformWeights, InputLayer(ARG0)))))), 9793)
new node
MaxPoolingLayer1D
NNLearner(ARG0, OutputLayer(ARG0, MaxPoolingLayer1D(8, EmbeddingLayer(8, ARG0, randomUniformWeights, OutputLayer(ARG0, EmbeddingLayer(3, ARG0, randomUniformWeights, InputLayer(ARG0)))))), 9793)
NNLearner(RandomUniform(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 0, 9), OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 92)
NNLearner(RandomUniform(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 0, 9), OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 92)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 88)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(100, ARG0, randomUniformWeights, InputLayer(ARG0))), 88)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(64, ARG0, randomUniformWeights, InputLayer(ARG0))), 7)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(64, ARG0, randomUniformWeights, InputLayer(ARG0))), 7)
Cv2AbsDiff(MorphGradientRect(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 95, 6), ThresholdBinaryFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 0.01, 100.0), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_1))
Cv2AbsDiff(MorphGradientRect(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 95, 6), ThresholdBinaryFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 0.01, 100.0), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_1))
Sine(ImageAlignmentECC(ARG0, Daisy(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 100, 10, 10, falseBool, 3), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_2), equal(0.01, 0.7289083158458496), myFloatAdd(100.0, 10.0), myAnd(falseBool, trueBool), passBool(falseBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)))
Sine(ImageAlignmentECC(ARG0, Daisy(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 100, 10, 10, falseBool, 3), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_2), equal(0.01, 0.7289083158458496), myFloatAdd(100.0, 10.0), myAnd(falseBool, trueBool), passBool(falseBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)))
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(6, Cv2LessThanOrEqual(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_2), randomUniformWeights, InputLayer(ARG0))), 0)
NNLearner(ARG0, OutputLayer(ARG0, EmbeddingLayer(6, Cv2LessThanOrEqual(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_2), randomUniformWeights, InputLayer(ARG0))), 0)
LowpassFilterGaussian(Cv2Pow(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 64), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), ifThenElseBool(trueBool, trueBool, trueBool), myIntMult(falseBool, 2), myFloatSub(0.1, 10.0), passFloat(-1.3598172838741962))
LowpassFilterGaussian(Cv2Pow(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 64), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), ifThenElseBool(trueBool, trueBool, trueBool), myIntMult(falseBool, 2), myFloatSub(0.1, 10.0), passFloat(-1.3598172838741962))
Cv2RMS(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 50)
Cv2RMS(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 50)
WindowHamming(ARG0, passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), notEqual(myFloatIntDiv(100.0, 100), myFloatIntDiv(1.0, 6)))
WindowHamming(ARG0, passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), notEqual(myFloatIntDiv(100.0, 100), myFloatIntDiv(1.0, 6)))
WindowGaussian(mySelFwe(ContourMaskMinEquDiameter(Tangent(EdgeDetectionCanny(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 8, 37, 32), TriState.STREAM_TO_FEATURES, passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), equal(myFloatAdd(1.0, 100.0), myFloatSub(100.0, 100.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), myAnd(lessThanOrEqual(myFloatIntSub(0.1, 50), myFloatMult(100.0, 0.1)), notEqual(myFloatIntAdd(1.0, -2), 0.01)), passFloat(myFloatAdd(10.0, myFloatMult(100.0, 10.0)))), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), passFloat(passFloat(ifThenElseFloat(ifThenElseBool(falseBool, falseBool, trueBool), myFloatIntMult(100.0, 5), myFloatAdd(0.01, 1.0)))))
WindowGaussian(mySelFwe(ContourMaskMinEquDiameter(Tangent(EdgeDetectionCanny(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 8, 37, 32), TriState.STREAM_TO_FEATURES, passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_1)), equal(myFloatAdd(1.0, 100.0), myFloatSub(100.0, 100.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), myAnd(lessThanOrEqual(myFloatIntSub(0.1, 50), myFloatMult(100.0, 0.1)), notEqual(myFloatIntAdd(1.0, -2), 0.01)), passFloat(myFloatAdd(10.0, myFloatMult(100.0, 10.0)))), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), passFloat(passFloat(ifThenElseFloat(ifThenElseBool(falseBool, falseBool, trueBool), myFloatIntMult(100.0, 5), myFloatAdd(0.01, 1.0)))))
LogDetection(Cv2Pow(MeanFilter(ContourMaskMaxExtentEnclosingCircle(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatToInt(0.1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThan(myFloatDiv(-3.4316643674859906, 100.0), myFloatMult(-3.9664146998609673, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2))), passFloat(myFloatIntAdd(myFloatMult(10.0, 0.01), myFloatToInt(0.01))), ifThenElseFloat(notEqual(myFloatMult(0.1, 0.01), myFloatIntDiv(0.1, 4)), passFloat(myIntToFloat(99)), myFloatIntDiv(ifThenElseFloat(falseBool, 10.0, 0.01), equal(10.0, 0.1))), lessThan(ifThenElseFloat(notEqual(100.0, 0.01), myFloatIntDiv(0.01, 32), myFloatIntDiv(10.0, 64)), myFloatIntDiv(ifThenElseFloat(falseBool, 0.01, -3.1611027872158415), lessThan(0.01, 0.01))), myFloatMult(myFloatMult(myFloatDiv(10.0, 1.0), myFloatIntMult(0.1, 83)), myFloatAdd(myFloatDiv(-0.19263036148403323, -1.3909339498826565), myFloatIntSub(0.01, 10))), myFloatMult(myIntToFloat(myIntSub(4, 1)), myFloatDiv(myFloatIntSub(-4.661708200468498, 0), myIntToFloat(64))))
LogDetection(Cv2Pow(MeanFilter(ContourMaskMaxExtentEnclosingCircle(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0.1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatToInt(0.1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), lessThan(myFloatDiv(-3.4316643674859906, 100.0), myFloatMult(-3.9664146998609673, 0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_2))), passFloat(myFloatIntAdd(myFloatMult(10.0, 0.01), myFloatToInt(0.01))), ifThenElseFloat(notEqual(myFloatMult(0.1, 0.01), myFloatIntDiv(0.1, 4)), passFloat(myIntToFloat(99)), myFloatIntDiv(ifThenElseFloat(falseBool, 10.0, 0.01), equal(10.0, 0.1))), lessThan(ifThenElseFloat(notEqual(100.0, 0.01), myFloatIntDiv(0.01, 32), myFloatIntDiv(10.0, 64)), myFloatIntDiv(ifThenElseFloat(falseBool, 0.01, -3.1611027872158415), lessThan(0.01, 0.01))), myFloatMult(myFloatMult(myFloatDiv(10.0, 1.0), myFloatIntMult(0.1, 83)), myFloatAdd(myFloatDiv(-0.19263036148403323, -1.3909339498826565), myFloatIntSub(0.01, 10))), myFloatMult(myIntToFloat(myIntSub(4, 1)), myFloatDiv(myFloatIntSub(-4.661708200468498, 0), myIntToFloat(64))))
Exponetial(ContourMaskMinLength(AdjustConstrastLog(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 0.1), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatIntDiv(0.01, 55)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)))
Exponetial(ContourMaskMinLength(AdjustConstrastLog(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 0.1), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatIntDiv(0.01, 55)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)))
MeanWithHole(Hog(EmadeDataNumpyMultiplyFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 100.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myAnd(falseBool, trueBool), lessThan(1.0, 100.0), passInt(trueBool), passInt(10)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), greaterThan(myIntToFloat(32), ifThenElseFloat(falseBool, 0.01, 0.08380888567614964)), myIntAdd(ifThenElseBool(trueBool, falseBool, trueBool), myIntSub(1, 100)))
MeanWithHole(Hog(EmadeDataNumpyMultiplyFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 100.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myAnd(falseBool, trueBool), lessThan(1.0, 100.0), passInt(trueBool), passInt(10)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), greaterThan(myIntToFloat(32), ifThenElseFloat(falseBool, 0.01, 0.08380888567614964)), myIntAdd(ifThenElseBool(trueBool, falseBool, trueBool), myIntSub(1, 100)))
WienerFilter(MedianFilterHole(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 7, -10), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0))
WienerFilter(MedianFilterHole(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 7, -10), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0))
StdDeviationHoleCustom(MyNorm(WindowHann(ThresholdBinaryInverse(Cv2Divide(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatSub(0.1, 1.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), notEqual(myFloatIntAdd(1.0, 7), myIntToFloat(3))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_0))), ifThenElseBool(myAnd(passBool(trueBool), myOr(falseBool, trueBool)), ifThenElseBool(greaterThan(100.0, 1.3042473324992523), passBool(trueBool), myOr(trueBool, falseBool)), myAnd(greaterThan(1.0, 10.0), ifThenElseBool(falseBool, trueBool, falseBool)))), MyDCT(PeakFinder(MyCumProd(ArcTangent(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), passBool(trueBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myFloatDiv(myFloatAdd(0.01, 1.0), myFloatDiv(100.0, 0.1)), passBool(myAnd(trueBool, trueBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_0))), lessThan(ifThenElseFloat(passBool(falseBool), myIntToFloat(32), myFloatSub(100.0, 10.0)), myFloatDiv(myFloatIntMult(0.1, 10), passFloat(0.01))), greaterThanEqual(myIntToFloat(myAnd(falseBool, falseBool)), myFloatDiv(myFloatIntSub(0.1, 50), ifThenElseFloat(trueBool, 0.01, 1.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), myIntMult(ifThenElseBool(passBool(lessThan(10.0, 0.01)), ifThenElseBool(greaterThanEqual(100.0, 0.1), myOr(trueBool, trueBool), greaterThanEqual(1.3580484825165398, 100.0)), ifThenElseBool(equal(0.01, 1.0), notEqual(100.0, -3.2800340559325), notEqual(100.0, 1.652410072834714))), myIntMult(myNot(myNot(falseBool)), lessThan(myFloatMult(10.0, 0.01), myFloatDiv(0.01, 0.01)))), greaterThan(myFloatAdd(myFloatSub(myFloatMult(0.1, 0.1), myFloatIntMult(1.0, 100)), ifThenElseFloat(myAnd(falseBool, falseBool), myFloatIntMult(100.0, 50), myFloatIntAdd(10.0, 10))), passFloat(myFloatIntAdd(myFloatIntDiv(10.0, 1), greaterThanEqual(0.01, 10.0)))))
StdDeviationHoleCustom(MyNorm(WindowHann(ThresholdBinaryInverse(Cv2Divide(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatSub(0.1, 1.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), notEqual(myFloatIntAdd(1.0, 7), myIntToFloat(3))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_0))), ifThenElseBool(myAnd(passBool(trueBool), myOr(falseBool, trueBool)), ifThenElseBool(greaterThan(100.0, 1.3042473324992523), passBool(trueBool), myOr(trueBool, falseBool)), myAnd(greaterThan(1.0, 10.0), ifThenElseBool(falseBool, trueBool, falseBool)))), MyDCT(PeakFinder(MyCumProd(ArcTangent(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), passBool(trueBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)), myFloatDiv(myFloatAdd(0.01, 1.0), myFloatDiv(100.0, 0.1)), passBool(myAnd(trueBool, trueBool))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_0))), lessThan(ifThenElseFloat(passBool(falseBool), myIntToFloat(32), myFloatSub(100.0, 10.0)), myFloatDiv(myFloatIntMult(0.1, 10), passFloat(0.01))), greaterThanEqual(myIntToFloat(myAnd(falseBool, falseBool)), myFloatDiv(myFloatIntSub(0.1, 50), ifThenElseFloat(trueBool, 0.01, 1.0)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), myIntMult(ifThenElseBool(passBool(lessThan(10.0, 0.01)), ifThenElseBool(greaterThanEqual(100.0, 0.1), myOr(trueBool, trueBool), greaterThanEqual(1.3580484825165398, 100.0)), ifThenElseBool(equal(0.01, 1.0), notEqual(100.0, -3.2800340559325), notEqual(100.0, 1.652410072834714))), myIntMult(myNot(myNot(falseBool)), lessThan(myFloatMult(10.0, 0.01), myFloatDiv(0.01, 0.01)))), greaterThan(myFloatAdd(myFloatSub(myFloatMult(0.1, 0.1), myFloatIntMult(1.0, 100)), ifThenElseFloat(myAnd(falseBool, falseBool), myFloatIntMult(100.0, 50), myFloatIntAdd(10.0, 10))), passFloat(myFloatIntAdd(myFloatIntDiv(10.0, 1), greaterThanEqual(0.01, 10.0)))))
GetCentroids(ARG0, passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))))
GetCentroids(ARG0, passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))))
SetToZeroIf<Data&Factor(ARG0, MyInformedSearch(ContourMaskMaxArea(BitwiseOr(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatDiv(3.902935830697686, 10.0)), mySelPercentile(ArcCosine(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), myNot(trueBool), myFloatToInt(10.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.FULL)), greaterThanEqual(myFloatAdd(0.1, 1.0), myFloatIntSub(10.0, 150)), ifThenElseFloat(myAnd(trueBool, trueBool), myFloatDiv(-1.069937810499355, 100.0), myFloatMult(0.1, 0.01))), TriState.FEATURES_TO_FEATURES, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), Axis.AXIS_1, 32)
SetToZeroIf<Data&Factor(ARG0, MyInformedSearch(ContourMaskMaxArea(BitwiseOr(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_1, Axis.FULL), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatDiv(3.902935830697686, 10.0)), mySelPercentile(ArcCosine(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), myNot(trueBool), myFloatToInt(10.0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.FULL)), greaterThanEqual(myFloatAdd(0.1, 1.0), myFloatIntSub(10.0, 150)), ifThenElseFloat(myAnd(trueBool, trueBool), myFloatDiv(-1.069937810499355, 100.0), myFloatMult(0.1, 0.01))), TriState.FEATURES_TO_FEATURES, passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), Axis.AXIS_1, 32)
EmadeDataAddPairTriple(Cv2DCT(LinearPredictiveCoding(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 32), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2)), ThresholdToZeroPixelFloat(EmadeDataNumpyMultiplyFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 100.0), LogDetection(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 100.0, 1.0, 150, 0.01, 100.0), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_1)), ConvertBW(NNLearner(ARG0, EmbeddingLayer(0, ARG0, gloveTwitterWeights, InputLayer(ARG0)), 55), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.FULL)), passAxis(passAxis(Axis.AXIS_2)))
EmadeDataAddPairTriple(Cv2DCT(LinearPredictiveCoding(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 32), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2)), ThresholdToZeroPixelFloat(EmadeDataNumpyMultiplyFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 100.0), LogDetection(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 100.0, 1.0, 150, 0.01, 100.0), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_1)), ConvertBW(NNLearner(ARG0, EmbeddingLayer(0, ARG0, gloveTwitterWeights, InputLayer(ARG0)), 55), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passAxis(passAxis(Axis.FULL)), passAxis(passAxis(Axis.AXIS_2)))
ContourMaskRangeExtent(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 55, trueBool)
ContourMaskRangeExtent(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 55, trueBool)
WindowBlackmanHarris(TfidfVectorizer(AbsoluteValue(ContoursConvexConcave(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, falseBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0)), myOr(notEqual(10.0, 10.0), equal(1.0, 10.0)), myAnd(ifThenElseBool(falseBool, falseBool, falseBool), passBool(trueBool)), 1, equal(1.5460653774057374, myIntToFloat(4))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(Axis.FULL))
WindowBlackmanHarris(TfidfVectorizer(AbsoluteValue(ContoursConvexConcave(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, falseBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0)), myOr(notEqual(10.0, 10.0), equal(1.0, 10.0)), myAnd(ifThenElseBool(falseBool, falseBool, falseBool), passBool(trueBool)), 1, equal(1.5460653774057374, myIntToFloat(4))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(Axis.FULL))
SelectRange(adf_0(ARG0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), greaterThan(1.0, 100.0), notEqual(1.0, 0.1))
SelectRange(adf_0(ARG0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0), greaterThan(1.0, 100.0), notEqual(1.0, 0.1))
ThresholdBinaryInverseMask(MorphOpenCross(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, -8, 1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myFloatAdd(10.0, 4.8026361294134485))
ThresholdBinaryInverseMask(MorphOpenCross(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, -8, 1), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.FULL), myFloatAdd(10.0, 4.8026361294134485))
myConcatenate(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.FULL, Axis.AXIS_1)
myConcatenate(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.FULL, Axis.AXIS_1)
GaussianPeakEM(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2)
GaussianPeakEM(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2)
mySparsePCA(MatchedFiltering(ContourMaskMinEnclosingCircle(Tfisf(adf_0(ARG0), greaterThan(100.0, -3.6196067880950853), equal(0.01, 10.0), myIntAdd(2, 4), myIntSub(1574, 55)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), myFloatSub(myFloatIntSub(0.1, 7), myFloatIntSub(0.1, 10))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL))), lessThanOrEqual(passFloat(ifThenElseFloat(falseBool, 10.0, 0.01)), passFloat(myFloatIntSub(-0.31747137817785376, 50)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), greaterThan(myFloatAdd(myFloatAdd(myFloatMult(10.0, -2.6956640280954924), passFloat(-1.1519029584187015)), myFloatIntMult(myFloatMult(1.0, 0.1), myFloatToInt(0.1))), myFloatIntDiv(ifThenElseFloat(lessThanOrEqual(0.01, 100.0), passFloat(0.1), myFloatMult(0.01, 1.0)), lessThanOrEqual(passFloat(100.0), myFloatIntMult(0.01, 5)))), myFloatIntSub(ifThenElseFloat(passBool(myOr(falseBool, trueBool)), myFloatAdd(myFloatIntMult(-0.04991247957525058, 32), myFloatAdd(100.0, 0.1)), myFloatAdd(myFloatMult(0.01, 10.0), myFloatIntAdd(0.01, 2))), myFloatToInt(passFloat(myFloatIntSub(0.01, 33)))))
mySparsePCA(MatchedFiltering(ContourMaskMinEnclosingCircle(Tfisf(adf_0(ARG0), greaterThan(100.0, -3.6196067880950853), equal(0.01, 10.0), myIntAdd(2, 4), myIntSub(1574, 55)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), myFloatSub(myFloatIntSub(0.1, 7), myFloatIntSub(0.1, 10))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL))), lessThanOrEqual(passFloat(ifThenElseFloat(falseBool, 10.0, 0.01)), passFloat(myFloatIntSub(-0.31747137817785376, 50)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), greaterThan(myFloatAdd(myFloatAdd(myFloatMult(10.0, -2.6956640280954924), passFloat(-1.1519029584187015)), myFloatIntMult(myFloatMult(1.0, 0.1), myFloatToInt(0.1))), myFloatIntDiv(ifThenElseFloat(lessThanOrEqual(0.01, 100.0), passFloat(0.1), myFloatMult(0.01, 1.0)), lessThanOrEqual(passFloat(100.0), myFloatIntMult(0.01, 5)))), myFloatIntSub(ifThenElseFloat(passBool(myOr(falseBool, trueBool)), myFloatAdd(myFloatIntMult(-0.04991247957525058, 32), myFloatAdd(100.0, 0.1)), myFloatAdd(myFloatMult(0.01, 10.0), myFloatIntAdd(0.01, 2))), myFloatToInt(passFloat(myFloatIntSub(0.01, 33)))))
WindowBartlettHann(mySubSampleData(mySpectralEmbedding(ARG0, TriState.STREAM_TO_FEATURES, 6), equal(10.0, 0.01), myOr(trueBool, falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)))
WindowBartlettHann(mySubSampleData(mySpectralEmbedding(ARG0, TriState.STREAM_TO_FEATURES, 6), equal(10.0, 0.01), myOr(trueBool, falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)))
DohDetection(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 1.0, 0.01, 4, 100.0, 1.0)
DohDetection(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 1.0, 0.01, 4, 100.0, 1.0)
ContourMaskMaxExtentEnclosingCircle(ToUint8Scale(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), myIntToFloat(100))
ContourMaskMaxExtentEnclosingCircle(ToUint8Scale(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), myIntToFloat(100))
ThresholdToZeroFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 0.01)
ThresholdToZeroFloat(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 0.01)
SetToZeroIf>Data&Factor(SelectRange(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 128, 2), NormalLikelihood(ARG0, 76), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_1), myIntToFloat(4))
SetToZeroIf>Data&Factor(SelectRange(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 128, 2), NormalLikelihood(ARG0, 76), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.AXIS_1), myIntToFloat(4))
Tfisf(ContourMaskMinLength(ContourMaskConvex(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, falseBool), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myFloatIntDiv(100.0, 64)), myNot(trueBool), myOr(equal(3.8139005120978506, 0.1), ifThenElseBool(falseBool, falseBool, trueBool)), myAnd(myAnd(trueBool, falseBool), falseBool), passInt(notEqual(-0.49742443561056326, 1.4542023334113585)))
Tfisf(ContourMaskMinLength(ContourMaskConvex(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, falseBool), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myFloatIntDiv(100.0, 64)), myNot(trueBool), myOr(equal(3.8139005120978506, 0.1), ifThenElseBool(falseBool, falseBool, trueBool)), myAnd(myAnd(trueBool, falseBool), falseBool), passInt(notEqual(-0.49742443561056326, 1.4542023334113585)))
MorphOpenCross(MultiplyTransposed(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, falseBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myOr(falseBool, falseBool), lessThanOrEqual(10.0, 100.0))
MorphOpenCross(MultiplyTransposed(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, falseBool), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myOr(falseBool, falseBool), lessThanOrEqual(10.0, 100.0))
LogDetection(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 0.1, 1.0, 3, 0.1, 1.0)
LogDetection(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 0.1, 1.0, 3, 0.1, 1.0)
MySum(WindowGaussian(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 0.1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1))
MySum(WindowGaussian(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 0.1), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1))
Cv2Equal(TfidfVectorizer(ConvertBW(Cv2iDFT(Stemmatizer(ARG0, 64, 64), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2))), greaterThan(myFloatIntAdd(myIntToFloat(5), myIntAdd(10, 32)), myFloatMult(myFloatIntAdd(10.0, 255), myIntToFloat(64))), myIntSub(myNot(notEqual(-0.4264393286094119, 0.1980906707621619)), lessThan(passFloat(0.1), myIntToFloat(158))), lessThan(myFloatAdd(myIntToFloat(150), passFloat(0.1)), myFloatDiv(myIntToFloat(100), myFloatIntDiv(0.1, -6))), myAnd(myAnd(lessThanOrEqual(100.0, 10.0), myAnd(falseBool, trueBool)), lessThan(myFloatIntAdd(1.0, 100), myFloatDiv(100.0, 1.0)))), ContourMaskMinAspectRatio(EmadeDataAddFloat(Cv2Log(LocalPoolingMean(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, trueBool), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passFloat(myFloatMult(1.0, 10.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatSub(myFloatIntDiv(ifThenElseFloat(trueBool, 0.1, 100.0), passInt(-2)), myFloatAdd(myFloatIntSub(0.01, 50), passFloat(1.0)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))))
Cv2Equal(TfidfVectorizer(ConvertBW(Cv2iDFT(Stemmatizer(ARG0, 64, 64), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2))), greaterThan(myFloatIntAdd(myIntToFloat(5), myIntAdd(10, 32)), myFloatMult(myFloatIntAdd(10.0, 255), myIntToFloat(64))), myIntSub(myNot(notEqual(-0.4264393286094119, 0.1980906707621619)), lessThan(passFloat(0.1), myIntToFloat(158))), lessThan(myFloatAdd(myIntToFloat(150), passFloat(0.1)), myFloatDiv(myIntToFloat(100), myFloatIntDiv(0.1, -6))), myAnd(myAnd(lessThanOrEqual(100.0, 10.0), myAnd(falseBool, trueBool)), lessThan(myFloatIntAdd(1.0, 100), myFloatDiv(100.0, 1.0)))), ContourMaskMinAspectRatio(EmadeDataAddFloat(Cv2Log(LocalPoolingMean(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, trueBool), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_0)), passFloat(myFloatMult(1.0, 10.0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatSub(myFloatIntDiv(ifThenElseFloat(trueBool, 0.1, 100.0), passInt(-2)), myFloatAdd(myFloatIntSub(0.01, 50), passFloat(1.0)))), passTriState(passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_2)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))))
ContoursAll(ThresholdBinaryFloat(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 10.0, 100.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1))
ContoursAll(ThresholdBinaryFloat(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 10.0, 100.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1))
ThresholdBinaryMax(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 150, 10.0)
ThresholdBinaryMax(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 150, 10.0)
WindowFlatTop(Cv2LessThanOrEqual(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0))
WindowFlatTop(Cv2LessThanOrEqual(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0))
SobelFilter(Cv2ScaleAbs(MinimumFilter(Cv2DCT(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myIntDiv(8, 1), passFloat(0.1)), TriState.STREAM_TO_FEATURES, Axis.AXIS_1, lessThanOrEqual(1.0, myFloatAdd(3.474025506368065, 100.0)), greaterThanEqual(myFloatMult(1.4417816121668512, 2.8803222037658207), myFloatIntDiv(10.0, 55))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))))
SobelFilter(Cv2ScaleAbs(MinimumFilter(Cv2DCT(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), myIntDiv(8, 1), passFloat(0.1)), TriState.STREAM_TO_FEATURES, Axis.AXIS_1, lessThanOrEqual(1.0, myFloatAdd(3.474025506368065, 100.0)), greaterThanEqual(myFloatMult(1.4417816121668512, 2.8803222037658207), myFloatIntDiv(10.0, 55))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))))
mySelFwe(ContoursMaxArea(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, falseBool), passTriState(TriState.FEATURES_TO_FEATURES), myFloatToInt(10.0), ifThenElseFloat(falseBool, 0.1, 1.0))
mySelFwe(ContoursMaxArea(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, falseBool), passTriState(TriState.FEATURES_TO_FEATURES), myFloatToInt(10.0), ifThenElseFloat(falseBool, 0.1, 1.0))
ScalarAdd(RandomUniform(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 255, 0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatIntAdd(2.5524071259889265, 3))
ScalarAdd(RandomUniform(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 255, 0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatIntAdd(2.5524071259889265, 3))
WindowBartlett(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1)
WindowBartlett(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1)
MaximumWindow(ARG0, 9, falseBool, 100.0)
MaximumWindow(ARG0, 9, falseBool, 100.0)
LognormalLM(EmadeDataNumpyMultiplyPair(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.FULL, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL))
LognormalLM(EmadeDataNumpyMultiplyPair(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.FULL, Axis.FULL), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL))
ToFloat(BayesMulti(ThresholdToZeroFloat(Select3D(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 128, 64, 8, 9, 150, 7005), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myFloatIntDiv(10.0, 0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))))
ToFloat(BayesMulti(ThresholdToZeroFloat(Select3D(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 128, 64, 8, 9, 150, 7005), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myFloatIntDiv(10.0, 0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_1))))
ImageAlignmentECC(CornerDetectionHarris(LowpassFilterMedian(LowpassFourierShift(OtsuBinaryThreshold(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), notEqual(0.01, 0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myIntAdd(greaterThan(10.0, 0.1), myIntDiv(64, 0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myIntAdd(myIntSub(lessThan(-1.5569071332646098, 1.0), myIntAdd(55, 32)), passBool(greaterThan(10.0, 100.0))), passInt(myFloatToInt(myFloatDiv(0.1, 10.0))), myFloatAdd(myFloatIntSub(myFloatDiv(1.0, 1.0), myIntMult(-3, 3)), myFloatIntDiv(myFloatAdd(0.01, 0.1), greaterThan(10.0, 100.0)))), FilterCentroids(k_means_clustering(Fraction(MaximumFilter(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 1, 100.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myOr(trueBool, trueBool)), myNot(lessThanOrEqual(10.0, 0.1)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), myIntAdd(greaterThanEqual(myFloatIntSub(myFloatIntSub(0.1, 8), ifThenElseBool(falseBool, falseBool, falseBool)), myFloatMult(myFloatMult(0.1, 1.869954833051473), myIntToFloat(5728))), passBool(lessThan(ifThenElseFloat(trueBool, 10.0, 1.0), myFloatAdd(0.01, 1.0)))), myFloatMult(myFloatIntAdd(myIntToFloat(equal(0.01, 0.1)), myIntMult(passBool(falseBool), ifThenElseBool(trueBool, falseBool, trueBool))), myFloatIntAdd(myFloatIntMult(myFloatSub(1.0, 0.1), ifThenElseBool(trueBool, falseBool, falseBool)), lessThanOrEqual(myFloatIntDiv(100.0, 2), ifThenElseFloat(falseBool, -1.576691446942525, -0.7349096011325473)))), notEqual(myFloatMult(myFloatMult(myFloatIntDiv(100.0, 7), myFloatMult(-2.834149273754465, 0.1)), myFloatMult(myIntToFloat(8), myIntToFloat(32))), myFloatAdd(myFloatMult(myFloatSub(10.0, 1.0), myFloatIntSub(1.0, 255)), myFloatDiv(myFloatIntAdd(100.0, 6), ifThenElseFloat(falseBool, -0.9614780718571652, 100.0)))), equal(myFloatAdd(myFloatIntDiv(myFloatIntSub(-2.9298023137682536, 1), passInt(64)), myFloatIntDiv(myFloatIntMult(0.01, 2), passBool(trueBool))), myFloatDiv(myFloatIntMult(myFloatDiv(10.0, 1.0), myIntDiv(50, 2)), myFloatIntSub(myFloatAdd(100.0, 1.1298946272551849), notEqual(-0.24572172274385196, -3.8649009111939248)))))
ImageAlignmentECC(CornerDetectionHarris(LowpassFilterMedian(LowpassFourierShift(OtsuBinaryThreshold(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, 0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), notEqual(0.01, 0.01)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myIntAdd(greaterThan(10.0, 0.1), myIntDiv(64, 0))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myIntAdd(myIntSub(lessThan(-1.5569071332646098, 1.0), myIntAdd(55, 32)), passBool(greaterThan(10.0, 100.0))), passInt(myFloatToInt(myFloatDiv(0.1, 10.0))), myFloatAdd(myFloatIntSub(myFloatDiv(1.0, 1.0), myIntMult(-3, 3)), myFloatIntDiv(myFloatAdd(0.01, 0.1), greaterThan(10.0, 100.0)))), FilterCentroids(k_means_clustering(Fraction(MaximumFilter(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 1, 100.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myOr(trueBool, trueBool)), myNot(lessThanOrEqual(10.0, 0.1)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), passAxis(passAxis(passAxis(passAxis(Axis.FULL)))), myIntAdd(greaterThanEqual(myFloatIntSub(myFloatIntSub(0.1, 8), ifThenElseBool(falseBool, falseBool, falseBool)), myFloatMult(myFloatMult(0.1, 1.869954833051473), myIntToFloat(5728))), passBool(lessThan(ifThenElseFloat(trueBool, 10.0, 1.0), myFloatAdd(0.01, 1.0)))), myFloatMult(myFloatIntAdd(myIntToFloat(equal(0.01, 0.1)), myIntMult(passBool(falseBool), ifThenElseBool(trueBool, falseBool, trueBool))), myFloatIntAdd(myFloatIntMult(myFloatSub(1.0, 0.1), ifThenElseBool(trueBool, falseBool, falseBool)), lessThanOrEqual(myFloatIntDiv(100.0, 2), ifThenElseFloat(falseBool, -1.576691446942525, -0.7349096011325473)))), notEqual(myFloatMult(myFloatMult(myFloatIntDiv(100.0, 7), myFloatMult(-2.834149273754465, 0.1)), myFloatMult(myIntToFloat(8), myIntToFloat(32))), myFloatAdd(myFloatMult(myFloatSub(10.0, 1.0), myFloatIntSub(1.0, 255)), myFloatDiv(myFloatIntAdd(100.0, 6), ifThenElseFloat(falseBool, -0.9614780718571652, 100.0)))), equal(myFloatAdd(myFloatIntDiv(myFloatIntSub(-2.9298023137682536, 1), passInt(64)), myFloatIntDiv(myFloatIntMult(0.01, 2), passBool(trueBool))), myFloatDiv(myFloatIntMult(myFloatDiv(10.0, 1.0), myIntDiv(50, 2)), myFloatIntSub(myFloatAdd(100.0, 1.1298946272551849), notEqual(-0.24572172274385196, -3.8649009111939248)))))
ContourMaskRangeAspectRatio(ContourMaskMinEnclosingCircle(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 0.01), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myFloatToInt(-3.9377984780653694), passBool(falseBool))
ContourMaskRangeAspectRatio(ContourMaskMinEnclosingCircle(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_1, 0.01), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myFloatToInt(-3.9377984780653694), passBool(falseBool))
StandardNorm(LowpassFilterBilateral(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 255, 50, 255), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0))
StandardNorm(LowpassFilterBilateral(ARG0, TriState.STREAM_TO_FEATURES, Axis.FULL, 255, 50, 255), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0))
MyAverager(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 4332)
MyAverager(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 4332)
CountVectorizer(MaximumFilter(myICA(BitwiseOr(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), myOr(falseBool, trueBool), ifThenElseBool(trueBool, trueBool, trueBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), myIntSub(myFloatToInt(10.0), ifThenElseBool(trueBool, falseBool, falseBool)), passFloat(myFloatAdd(0.1, 0.01))), myAnd(notEqual(myIntToFloat(64), ifThenElseFloat(falseBool, 0.1, 0.01)), equal(myFloatMult(0.1, 10.0), passFloat(10.0))), notEqual(myFloatAdd(myFloatIntSub(-1.7358915329958169, 8), myFloatIntAdd(100.0, 5)), myFloatSub(myFloatDiv(100.0, 100.0), passFloat(-3.2963906250991384))), myFloatToInt(myFloatIntMult(myFloatIntAdd(0.1, 5), myFloatToInt(1.0835664995529335))), myIntSub(myIntSub(myAnd(trueBool, falseBool), myIntDiv(55, 150)), myIntAdd(myIntMult(4, 2), passInt(6609))))
CountVectorizer(MaximumFilter(myICA(BitwiseOr(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_2), passTriState(TriState.STREAM_TO_FEATURES), myOr(falseBool, trueBool), ifThenElseBool(trueBool, trueBool, trueBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), myIntSub(myFloatToInt(10.0), ifThenElseBool(trueBool, falseBool, falseBool)), passFloat(myFloatAdd(0.1, 0.01))), myAnd(notEqual(myIntToFloat(64), ifThenElseFloat(falseBool, 0.1, 0.01)), equal(myFloatMult(0.1, 10.0), passFloat(10.0))), notEqual(myFloatAdd(myFloatIntSub(-1.7358915329958169, 8), myFloatIntAdd(100.0, 5)), myFloatSub(myFloatDiv(100.0, 100.0), passFloat(-3.2963906250991384))), myFloatToInt(myFloatIntMult(myFloatIntAdd(0.1, 5), myFloatToInt(1.0835664995529335))), myIntSub(myIntSub(myAnd(trueBool, falseBool), myIntDiv(55, 150)), myIntAdd(myIntMult(4, 2), passInt(6609))))
MaxLoc(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2)
MaxLoc(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2)
HighpassFourierGaussian(MorphCloseEllipse(NNLearner(ARG0, EmbeddingLayer(255, ARG0, gloveWeights, InputLayer(ARG0)), 255), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myAnd(trueBool, falseBool), ifThenElseBool(falseBool, trueBool, falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), passInt(greaterThanEqual(0.01, 0.1)))
HighpassFourierGaussian(MorphCloseEllipse(NNLearner(ARG0, EmbeddingLayer(255, ARG0, gloveWeights, InputLayer(ARG0)), 255), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myAnd(trueBool, falseBool), ifThenElseBool(falseBool, trueBool, falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), passInt(greaterThanEqual(0.01, 0.1)))
NumNamedEntities(Cv2Divide(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.FULL))
NumNamedEntities(Cv2Divide(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.FULL))
HighpassFourierGaussian(mySelFpr(ARG0, TriState.STREAM_TO_FEATURES, 3, -1.5992028546918546), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), equal(4.811053779351106, -1.7384454033552377))
HighpassFourierGaussian(mySelFpr(ARG0, TriState.STREAM_TO_FEATURES, 3, -1.5992028546918546), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_1), equal(4.811053779351106, -1.7384454033552377))
SetToZeroIf>Data&Factor(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_1, 0.01)
SetToZeroIf>Data&Factor(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_1, 0.01)
Fraction(ObjectDetection(Select1D(KalmanFilter(MorphTophatRect(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, falseBool, 3), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatIntSub(-2.846416719645023, 64), myFloatIntSub(100.0, 8)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passInt(myFloatToInt(10.0)), myIntSub(lessThanOrEqual(0.01, 100.0), notEqual(0.01, 10.0))), lessThanOrEqual(myIntToFloat(myAnd(trueBool, trueBool)), myFloatIntAdd(ifThenElseFloat(falseBool, 0.01, 1.0), lessThan(2.6156783409283246, -3.4866257930551225))), myFloatIntAdd(myFloatDiv(ifThenElseFloat(falseBool, 10.0, 10.0), myFloatIntMult(-1.4866137766821397, -9)), myOr(passBool(falseBool), myOr(trueBool, falseBool))), myIntToFloat(notEqual(myFloatSub(0.1, 0.1), myFloatIntDiv(1.0, 4128)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), lessThan(myFloatIntMult(passFloat(myFloatIntDiv(0.1, 8)), greaterThan(myFloatDiv(-1.0140044719765817, 10.0), passFloat(1.0))), myFloatSub(myFloatIntSub(myFloatSub(1.0, 10.0), myOr(falseBool, trueBool)), ifThenElseFloat(equal(1.0, 0.01), myFloatIntDiv(1.0, 64), passFloat(1.7916250845425177)))))
Fraction(ObjectDetection(Select1D(KalmanFilter(MorphTophatRect(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, falseBool, 3), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatIntSub(-2.846416719645023, 64), myFloatIntSub(100.0, 8)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), passInt(myFloatToInt(10.0)), myIntSub(lessThanOrEqual(0.01, 100.0), notEqual(0.01, 10.0))), lessThanOrEqual(myIntToFloat(myAnd(trueBool, trueBool)), myFloatIntAdd(ifThenElseFloat(falseBool, 0.01, 1.0), lessThan(2.6156783409283246, -3.4866257930551225))), myFloatIntAdd(myFloatDiv(ifThenElseFloat(falseBool, 10.0, 10.0), myFloatIntMult(-1.4866137766821397, -9)), myOr(passBool(falseBool), myOr(trueBool, falseBool))), myIntToFloat(notEqual(myFloatSub(0.1, 0.1), myFloatIntDiv(1.0, 4128)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), lessThan(myFloatIntMult(passFloat(myFloatIntDiv(0.1, 8)), greaterThan(myFloatDiv(-1.0140044719765817, 10.0), passFloat(1.0))), myFloatSub(myFloatIntSub(myFloatSub(1.0, 10.0), myOr(falseBool, trueBool)), ifThenElseFloat(equal(1.0, 0.01), myFloatIntDiv(1.0, 64), passFloat(1.7916250845425177)))))
Cv2Min(ContourMaskMaxLength(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 0.46640438263221196), WindowGaussian(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 1.0), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.FULL))
Cv2Min(ContourMaskMaxLength(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 0.46640438263221196), WindowGaussian(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 1.0), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), passAxis(Axis.FULL))
RandomUniform(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 64, 1)
RandomUniform(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 64, 1)
KalmanFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, -4.571978303288692, 0.1)
KalmanFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, -4.571978303288692, 0.1)
Hog(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, falseBool, 5, 64, falseBool)
Hog(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, falseBool, 5, 64, falseBool)
ContourMaskMinEnclosingCircle(CornerDetectionHarris(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 128, 64, 100.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatIntAdd(1.0, 2690))
ContourMaskMinEnclosingCircle(CornerDetectionHarris(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 128, 64, 100.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0), myFloatIntAdd(1.0, 2690))
DogDetection(MorphBlackhatEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 757, 150), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatDiv(-3.046967967391885, 10.0), myIntToFloat(6), ifThenElseFloat(falseBool, 1.0, 1.0), ifThenElseFloat(falseBool, 100.0, 0.01), myFloatAdd(100.0, 10.0))
DogDetection(MorphBlackhatEllipse(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 757, 150), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myFloatDiv(-3.046967967391885, 10.0), myIntToFloat(6), ifThenElseFloat(falseBool, 1.0, 1.0), ifThenElseFloat(falseBool, 100.0, 0.01), myFloatAdd(100.0, 10.0))
Cv2Multiply(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_2, Axis.FULL)
Cv2Multiply(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.STREAM_TO_STREAM, Axis.AXIS_2, Axis.FULL)
LocalPoolingMedian(ContourMaskConvex(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, falseBool), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), lessThanOrEqual(1.0, 10.0))
LocalPoolingMedian(ContourMaskConvex(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, falseBool), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), lessThanOrEqual(1.0, 10.0))
ContourMaskMinArea(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, -4.9628214804396205)
ContourMaskMinArea(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, -4.9628214804396205)
mySubSampleData(ARG0, 2, 128)
mySubSampleData(ARG0, 2, 128)
AbsoluteValue(mySelGenUni(ARG0, TriState.STREAM_TO_FEATURES, 6, 75, 10.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0))
AbsoluteValue(mySelGenUni(ARG0, TriState.STREAM_TO_FEATURES, 6, 75, 10.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_0))
MatchedFiltering2D(Sine(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myIntMult(49, trueBool), myFloatIntMult(1.0, 9))
MatchedFiltering2D(Sine(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myIntMult(49, trueBool), myFloatIntMult(1.0, 9))
SobelFilter(WindowPlanckTaper(ContoursMinLength(MyCumSum(EqualizeDisk(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 6), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), greaterThan(1.0, 1.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myIntDiv(equal(10.0, -0.6942869188435976), myFloatToInt(0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatIntMult(myFloatMult(myFloatIntAdd(1.0, 5), myFloatAdd(2.740912950258231, 10.0)), ifThenElseBool(myNot(trueBool), lessThanOrEqual(100.0, 0.1), passBool(trueBool)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))))
SobelFilter(WindowPlanckTaper(ContoursMinLength(MyCumSum(EqualizeDisk(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 6), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), greaterThan(1.0, 1.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_2)), myIntDiv(equal(10.0, -0.6942869188435976), myFloatToInt(0.01))), passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myFloatIntMult(myFloatMult(myFloatIntAdd(1.0, 5), myFloatAdd(2.740912950258231, 10.0)), ifThenElseBool(myNot(trueBool), lessThanOrEqual(100.0, 0.1), passBool(trueBool)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))))
LogDetection(Cv2LessThan(ARG0, MorphErosionCross(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 5, 7, 8), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatMult(myFloatIntDiv(10.0, 3), myFloatIntDiv(100.0, 9)), myFloatAdd(0.1, 1.0), 2, 0.01, myFloatIntDiv(myIntToFloat(100), myIntAdd(150, 2)))
LogDetection(Cv2LessThan(ARG0, MorphErosionCross(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 5, 7, 8), passTriState(TriState.STREAM_TO_STREAM), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatMult(myFloatIntDiv(10.0, 3), myFloatIntDiv(100.0, 9)), myFloatAdd(0.1, 1.0), 2, 0.01, myFloatIntDiv(myIntToFloat(100), myIntAdd(150, 2)))
SkiMedianFilter(MorphCloseRect(SavitzkyGolayFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 50, 6, 5), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myIntSub(3, 3), ifThenElseBool(trueBool, trueBool, falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), passInt(myIntDiv(55, 10)))
SkiMedianFilter(MorphCloseRect(SavitzkyGolayFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 50, 6, 5), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), myIntSub(3, 3), ifThenElseBool(trueBool, trueBool, falseBool)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), passInt(myIntDiv(55, 10)))
FilterCentroids(ARG0)
FilterCentroids(ARG0)
WindowHann(MaximumWindow(ARG0, 0, 255, 1.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), equal(0.2587245312813504, 10.0))
WindowHann(MaximumWindow(ARG0, 0, 255, 1.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), equal(0.2587245312813504, 10.0))
ContourMaskMinLength(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 0.1)
ContourMaskMinLength(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 0.1)
AffinityPropagationClustering(Cv2Multiply(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.AXIS_2), myFloatIntAdd(10.0, 128))
AffinityPropagationClustering(Cv2Multiply(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.FULL, Axis.AXIS_2), myFloatIntAdd(10.0, 128))
LowpassFilterGaussian(ContoursMinArea(Cv2AddWeighted(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_2, 150, 9), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myOr(falseBool, falseBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), lessThan(myFloatDiv(-1.156550656374904, 100.0), myFloatIntAdd(1.0, 255)), myOr(equal(0.9276108821308977, 100.0), myOr(falseBool, trueBool)), myFloatMult(myFloatDiv(100.0, 1.0), myFloatDiv(0.07717185372101643, 100.0)), passFloat(myFloatAdd(100.0, 100.0)))
LowpassFilterGaussian(ContoursMinArea(Cv2AddWeighted(ARG0, ARG0, TriState.STREAM_TO_STREAM, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, Axis.AXIS_2, 150, 9), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myOr(falseBool, falseBool)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), lessThan(myFloatDiv(-1.156550656374904, 100.0), myFloatIntAdd(1.0, 255)), myOr(equal(0.9276108821308977, 100.0), myOr(falseBool, trueBool)), myFloatMult(myFloatDiv(100.0, 1.0), myFloatDiv(0.07717185372101643, 100.0)), passFloat(myFloatAdd(100.0, 100.0)))
Cv2Sqrt(WindowHann(MaximumFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 6, 0.01), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), lessThanOrEqual(0.1, 0.2237025040599141)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)))
Cv2Sqrt(WindowHann(MaximumFilter(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 6, 0.01), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), lessThanOrEqual(0.1, 0.2237025040599141)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_1)))
Round(Cv2Log(MorphDilateRect(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 8, trueBool, 10), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)))
Round(Cv2Log(MorphDilateRect(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, 8, trueBool, 10), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.FULL)))
BitwiseAnd(MorphDilateRect(MorphCloseCross(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0, 0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), notEqual(100.0, -1.8606177326679605), ifThenElseBool(trueBool, trueBool, trueBool), myAnd(trueBool, trueBool)), Cv2Subtract(MorphErosionRect(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 1, 9, 128), StdDeviationHole(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, falseBool, 6), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), passAxis(passAxis(Axis.AXIS_2)))
BitwiseAnd(MorphDilateRect(MorphCloseCross(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 0, 0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), notEqual(100.0, -1.8606177326679605), ifThenElseBool(trueBool, trueBool, trueBool), myAnd(trueBool, trueBool)), Cv2Subtract(MorphErosionRect(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 1, 9, 128), StdDeviationHole(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2, falseBool, 6), passTriState(TriState.FEATURES_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2), passAxis(Axis.AXIS_1)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), passAxis(passAxis(Axis.AXIS_2)))
Learner(ArcTangent(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), ModifyLearnerInt(LearnerType('EXTRATREES', {'n_estimators': 100, 'max_depth': 6, 'criterion': 0}), 32, 34), ModifyEnsembleFloat(EnsembleType('GRID', None), -1.6382172755005033, 5))
Learner(ArcTangent(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1), ModifyLearnerInt(LearnerType('EXTRATREES', {'n_estimators': 100, 'max_depth': 6, 'criterion': 0}), 32, 34), ModifyEnsembleFloat(EnsembleType('GRID', None), -1.6382172755005033, 5))
ScalarMultiply(mySelFpr(ARG0, TriState.STREAM_TO_STREAM, falseBool, 0.01), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), ifThenElseFloat(trueBool, 0.1, 10.0))
ScalarMultiply(mySelFpr(ARG0, TriState.STREAM_TO_STREAM, falseBool, 0.01), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), ifThenElseFloat(trueBool, 0.1, 10.0))
Sentiment(EmadeDataSubtractInt(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 64), ifThenElseBool(falseBool, trueBool, trueBool))
Sentiment(EmadeDataSubtractInt(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 64), ifThenElseBool(falseBool, trueBool, trueBool))
Cv2Max(WindowTurkey(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 0.01), HighpassUnsharpMask(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 7, 55, 3), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_2))
Cv2Max(WindowTurkey(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 0.01), HighpassUnsharpMask(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 7, 55, 3), passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), passAxis(Axis.AXIS_2))
RemoveFeature(MyBinaryThreshold(RMS2D(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 3), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myFloatDiv(1.0, 0.1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), equal(myIntToFloat(falseBool), myFloatIntMult(1.0, 100)))
RemoveFeature(MyBinaryThreshold(RMS2D(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_1, 3), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_1), myFloatDiv(1.0, 0.1)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), equal(myIntToFloat(falseBool), myFloatIntMult(1.0, 100)))
CountVectorizer(RandomShuffle(mySelFdr(ARG0, TriState.STREAM_TO_STREAM, 99, 100.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2)), lessThan(myFloatIntDiv(-3.735114044215967, 6), myFloatAdd(100.0, 0.01)), lessThanOrEqual(myFloatSub(10.0, 0.01), myFloatAdd(0.1, 0.1)), myIntAdd(passInt(3), passBool(trueBool)), lessThan(myFloatSub(-2.2713066792640246, 100.0), myFloatSub(-0.6546960608601538, 1.0)))
CountVectorizer(RandomShuffle(mySelFdr(ARG0, TriState.STREAM_TO_STREAM, 99, 100.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2)), lessThan(myFloatIntDiv(-3.735114044215967, 6), myFloatAdd(100.0, 0.01)), lessThanOrEqual(myFloatSub(10.0, 0.01), myFloatAdd(0.1, 0.1)), myIntAdd(passInt(3), passBool(trueBool)), lessThan(myFloatSub(-2.2713066792640246, 100.0), myFloatSub(-0.6546960608601538, 1.0)))
SepDetectionWindow(ARG0, 255, 10, 3.193747095809975)
SepDetectionWindow(ARG0, 255, 10, 3.193747095809975)
BackgroundSubtraction(MultiplySpectrum(ThresholdNLargest(GaussianFilter(BackgroundSubtraction(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myFloatIntDiv(100.0, 4)), TriState.STREAM_TO_STREAM, passAxis(passAxis(Axis.AXIS_2)), myNot(ifThenElseBool(trueBool, falseBool, falseBool))), MyAverager(CreateBBox(MorphGradientCross(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 32, 2514), ARG0, passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), Axis.FULL, greaterThanEqual(1.0, 0.01)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), passBool(myNot(falseBool))), TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, passAxis(passAxis(Axis.FULL)), passAxis(passAxis(passAxis(Axis.FULL)))), passTriState(TriState.STREAM_TO_FEATURES), passAxis(passAxis(passAxis(Axis.AXIS_1))))
BackgroundSubtraction(MultiplySpectrum(ThresholdNLargest(GaussianFilter(BackgroundSubtraction(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_2), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), myFloatIntDiv(100.0, 4)), TriState.STREAM_TO_STREAM, passAxis(passAxis(Axis.AXIS_2)), myNot(ifThenElseBool(trueBool, falseBool, falseBool))), MyAverager(CreateBBox(MorphGradientCross(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL, 32, 2514), ARG0, passTriState(TriState.STREAM_TO_FEATURES), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_2), Axis.FULL, greaterThanEqual(1.0, 0.01)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), passBool(myNot(falseBool))), TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, passAxis(passAxis(Axis.FULL)), passAxis(passAxis(passAxis(Axis.FULL)))), passTriState(TriState.STREAM_TO_FEATURES), passAxis(passAxis(passAxis(Axis.AXIS_1))))
EmadeDataSubtractInt(Cv2ScaleAbs(MinLoc(WindowFlatTop(Tfisf(ARG0, falseBool, 100, 3, 2), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myAnd(ifThenElseBool(lessThan(-2.979924706014281, 2.425543532421644), myNot(falseBool), notEqual(100.0, 1.0)), ifThenElseBool(greaterThan(10.0, 0.01), passBool(trueBool), passBool(trueBool))), equal(myFloatIntSub(myFloatAdd(10.0, 0.01), myAnd(falseBool, falseBool)), myIntToFloat(ifThenElseBool(falseBool, trueBool, trueBool)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), myNot(passBool(ifThenElseBool(greaterThan(0.01, 100.0), passBool(trueBool), notEqual(10.0, 100.0)))))
EmadeDataSubtractInt(Cv2ScaleAbs(MinLoc(WindowFlatTop(Tfisf(ARG0, falseBool, 100, 3, 2), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.AXIS_2)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.FULL))), myAnd(ifThenElseBool(lessThan(-2.979924706014281, 2.425543532421644), myNot(falseBool), notEqual(100.0, 1.0)), ifThenElseBool(greaterThan(10.0, 0.01), passBool(trueBool), passBool(trueBool))), equal(myFloatIntSub(myFloatAdd(10.0, 0.01), myAnd(falseBool, falseBool)), myIntToFloat(ifThenElseBool(falseBool, trueBool, trueBool)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_1)))), myNot(passBool(ifThenElseBool(greaterThan(0.01, 100.0), passBool(trueBool), notEqual(10.0, 100.0)))))
mySpectralEmbedding(HighpassFourierUniform(MatchedFiltering2D(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 50, 1.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myNot(trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), lessThan(myFloatSub(2.5551613265153943, 0.1), ifThenElseFloat(falseBool, 1.0, 0.01)))
mySpectralEmbedding(HighpassFourierUniform(MatchedFiltering2D(ARG0, TriState.FEATURES_TO_FEATURES, Axis.FULL, 50, 1.0), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myNot(trueBool)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), lessThan(myFloatSub(2.5551613265153943, 0.1), ifThenElseFloat(falseBool, 1.0, 0.01)))
Cv2Pow(AccumulateWeighted(KalmanFilter(ArcTangent(LowpassFilterGaussian(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 55, 150, 0.01, -0.4686883882860631), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), myFloatIntAdd(myFloatDiv(1.0, 100.0), lessThan(-2.1946026276757213, 10.0)), myFloatSub(myFloatAdd(1.0, 1.0), myFloatAdd(100.0, -2.713441767546639))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myFloatDiv(ifThenElseFloat(lessThanOrEqual(1.0, 10.0), myIntToFloat(0), myFloatAdd(1.0, 0.01)), myFloatIntDiv(myFloatIntDiv(100.0, 66), myOr(trueBool, falseBool)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myNot(equal(myFloatIntAdd(myFloatAdd(10.0, 100.0), myIntSub(32, falseBool)), myIntToFloat(notEqual(-4.189680856909805, 10.0)))))
Cv2Pow(AccumulateWeighted(KalmanFilter(ArcTangent(LowpassFilterGaussian(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 55, 150, 0.01, -0.4686883882860631), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_0)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.FULL)), myFloatIntAdd(myFloatDiv(1.0, 100.0), lessThan(-2.1946026276757213, 10.0)), myFloatSub(myFloatAdd(1.0, 1.0), myFloatAdd(100.0, -2.713441767546639))), passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM))), passAxis(passAxis(passAxis(Axis.AXIS_1))), myFloatDiv(ifThenElseFloat(lessThanOrEqual(1.0, 10.0), myIntToFloat(0), myFloatAdd(1.0, 0.01)), myFloatIntDiv(myFloatIntDiv(100.0, 66), myOr(trueBool, falseBool)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_FEATURES)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))), myNot(equal(myFloatIntAdd(myFloatAdd(10.0, 100.0), myIntSub(32, falseBool)), myIntToFloat(notEqual(-4.189680856909805, 10.0)))))
Supersampling(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 0.01, 1)
Supersampling(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_0, 0.01, 1)
StdDeviation(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 6)
StdDeviation(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, 6)
ToUint8(SepDetectionWindow(ContourMaskConvex(rmsHole(MyCumProd(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 128), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), lessThan(10.0, 0.1), notEqual(0.01, -3.4505110710960074)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), lessThanOrEqual(ifThenElseFloat(trueBool, 1.0, 100.0), myFloatIntAdd(0.1, 1))), greaterThan(myFloatDiv(myIntToFloat(8), passFloat(0.1)), myFloatSub(myFloatSub(-1.2024004571658153, 100.0), myFloatIntDiv(100.0, 5))), lessThan(myFloatSub(passFloat(4.048146470179383), myFloatSub(-4.224846585753146, 10.0)), myFloatIntAdd(myFloatDiv(100.0, 0.1), myNot(falseBool))), myIntToFloat(myIntDiv(greaterThanEqual(1.0, 0.1), equal(100.0, 0.1)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))))
ToUint8(SepDetectionWindow(ContourMaskConvex(rmsHole(MyCumProd(ARG0, TriState.STREAM_TO_FEATURES, Axis.AXIS_0, 128), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), lessThan(10.0, 0.1), notEqual(0.01, -3.4505110710960074)), passTriState(passTriState(TriState.STREAM_TO_STREAM)), passAxis(passAxis(Axis.AXIS_2)), lessThanOrEqual(ifThenElseFloat(trueBool, 1.0, 100.0), myFloatIntAdd(0.1, 1))), greaterThan(myFloatDiv(myIntToFloat(8), passFloat(0.1)), myFloatSub(myFloatSub(-1.2024004571658153, 100.0), myFloatIntDiv(100.0, 5))), lessThan(myFloatSub(passFloat(4.048146470179383), myFloatSub(-4.224846585753146, 10.0)), myFloatIntAdd(myFloatDiv(100.0, 0.1), myNot(falseBool))), myIntToFloat(myIntDiv(greaterThanEqual(1.0, 0.1), equal(100.0, 0.1)))), passTriState(passTriState(passTriState(passTriState(TriState.STREAM_TO_STREAM)))), passAxis(passAxis(passAxis(passAxis(Axis.AXIS_0)))))
ArcSine(EmadeDataDivideFloat(MorphTophatEllipse(ImagePeakFinder(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), greaterThanEqual(0.01, -3.7499696617950837), myIntDiv(3, 32)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatIntSub(myFloatIntAdd(0.01, 32), greaterThan(0.01, 100.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))))
ArcSine(EmadeDataDivideFloat(MorphTophatEllipse(ImagePeakFinder(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.FULL), greaterThanEqual(0.01, -3.7499696617950837), myIntDiv(3, 32)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatIntSub(myFloatIntAdd(0.01, 32), greaterThan(0.01, 100.0))), passTriState(passTriState(passTriState(TriState.FEATURES_TO_FEATURES))), passAxis(passAxis(passAxis(Axis.AXIS_2))))
ImageAlignmentECC(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_1, 3, 100.0, 128, -14)
ImageAlignmentECC(ARG0, ARG0, TriState.FEATURES_TO_FEATURES, TriState.FEATURES_TO_FEATURES, Axis.AXIS_0, Axis.AXIS_1, 3, 100.0, 128, -14)
mySelFwe(ARG0, TriState.STREAM_TO_FEATURES, 7, 0.01)
mySelFwe(ARG0, TriState.STREAM_TO_FEATURES, 7, 0.01)
myVarThresh(EmadeDataSubtractFloat(WindowBlackman(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 3.1536565974784363), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatAdd(1.0, 4.747831639838642)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), myFloatMult(myFloatIntDiv(-1.2318537584818179, 128), myFloatSub(0.01, 100.0)))
myVarThresh(EmadeDataSubtractFloat(WindowBlackman(ARG0, TriState.FEATURES_TO_FEATURES, Axis.AXIS_2, 3.1536565974784363), passTriState(TriState.STREAM_TO_FEATURES), passAxis(Axis.AXIS_2), myFloatAdd(1.0, 4.747831639838642)), passTriState(passTriState(TriState.STREAM_TO_FEATURES)), myFloatMult(myFloatIntDiv(-1.2318537584818179, 128), myFloatSub(0.01, 100.0)))
Round(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL)
Round(ARG0, TriState.STREAM_TO_STREAM, Axis.FULL)
ECDF(GradientWeighted(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 8, 10.0, 10.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myIntSub(55, 8))
ECDF(GradientWeighted(ARG0, TriState.STREAM_TO_STREAM, Axis.AXIS_1, 8, 10.0, 10.0), passTriState(TriState.FEATURES_TO_FEATURES), passAxis(Axis.AXIS_1), myIntSub(55, 8))
FilterCentroids(AdjustConstrastLog(ContourMaskMinEquDiameter(SpectralClustering(ARG0, 64, 10.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), greaterThan(0.1, 100.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatSub(myFloatMult(10.0, 0.1), myFloatMult(0.01, 100.0))))
FilterCentroids(AdjustConstrastLog(ContourMaskMinEquDiameter(SpectralClustering(ARG0, 64, 10.0), passTriState(TriState.STREAM_TO_STREAM), passAxis(Axis.FULL), greaterThan(0.1, 100.0)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.AXIS_0)), myFloatSub(myFloatMult(10.0, 0.1), myFloatMult(0.01, 100.0))))
MorphGradientCross(NNLearner(Cv2Multiply(ARG0, ARG0, TriState.STREAM_TO_FEATURES, TriState.STREAM_TO_STREAM, Axis.AXIS_0, Axis.AXIS_2), LeakyReLULayer(150, []), greaterThan(1.0, -4.429955160426351)), passTriState(passTriState(TriState.FEATURES_TO_FEATURES)), passAxis(passAxis(Axis.FULL)), equal(myFloatSub(0.01, 1.0), myFloatIntMult(100.0, 7)), equal(myFloatIntDiv(100.0, 100), myFloatIntSub(1.0, 128)))
new node
Conv1DLayer
Traceback (most recent call last):
  File "src/GPFramework/didLaunch.py", line 119, in <module>
    main(evolutionParametersDict, objectivesDict, datasetDict, stats_dict, misc_dict, reuse, database_str, num_workers, debug=True)
  File "src/GPFramework/didLaunch.py", line 109, in main
    database_str=database_str, reuse=reuse, debug=True)
  File "/home/athite3-gtri/.conda/envs/emade/lib/python3.6/site-packages/GPFramework-1.0-py3.6.egg/GPFramework/EMADE.py", line 837, in master_algorithm
    count = mutate(offspring, _inst.toolbox.mutateSwapLayer, MUTPB, needs_pset=True)
  File "/home/athite3-gtri/.conda/envs/emade/lib/python3.6/site-packages/GPFramework-1.0-py3.6.egg/GPFramework/EMADE.py", line 607, in mutate
    mutate_function(tree, pset)
  File "/home/athite3-gtri/.conda/envs/emade/lib/python3.6/site-packages/GPFramework-1.0-py3.6.egg/GPFramework/emade_operators.py", line 377, in swap_layer
    concat_healer(individual, pset, subtree) 
  File "/home/athite3-gtri/.conda/envs/emade/lib/python3.6/site-packages/GPFramework-1.0-py3.6.egg/GPFramework/emade_operators.py", line 389, in concat_healer
    concat_healer(individual, pset, oldbranch)
  File "/home/athite3-gtri/.conda/envs/emade/lib/python3.6/site-packages/GPFramework-1.0-py3.6.egg/GPFramework/emade_operators.py", line 389, in concat_healer
    concat_healer(individual, pset, oldbranch)
  File "/home/athite3-gtri/.conda/envs/emade/lib/python3.6/site-packages/GPFramework-1.0-py3.6.egg/GPFramework/emade_operators.py", line 389, in concat_healer
    concat_healer(individual, pset, oldbranch)
  [Previous line repeated 987 more times]
  File "/home/athite3-gtri/.conda/envs/emade/lib/python3.6/site-packages/GPFramework-1.0-py3.6.egg/GPFramework/emade_operators.py", line 388, in concat_healer
    individual.__init__(new_individual)
  File "/home/athite3-gtri/.conda/envs/emade/lib/python3.6/site-packages/deap-1.3.1-py3.6-linux-x86_64.egg/deap/gp.py", line 54, in __init__
    list.__init__(self, content)
RecursionError: maximum recursion depth exceeded while calling a Python object
